
usb_touch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080072c0  080072c0  000172c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007528  08007528  00017528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002f0  20000000  0800752c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009bc  200002f0  0800781c  000202f0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000cac  0800781c  00020cac  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
  9 .debug_info   000189f3  00000000  00000000  00020319  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000035f8  00000000  00000000  00038d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ce8  00000000  00000000  0003c308  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b70  00000000  00000000  0003cff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000709f  00000000  00000000  0003db60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000377e  00000000  00000000  00044bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004837d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003a58  00000000  00000000  000483fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000084  00000000  00000000  0004be54  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      00000117  00000000  00000000  0004bed8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002f0 	.word	0x200002f0
 8000128:	00000000 	.word	0x00000000
 800012c:	080072a8 	.word	0x080072a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002f4 	.word	0x200002f4
 8000148:	080072a8 	.word	0x080072a8

0800014c <delay1us>:

uint8_t bNoAck=0;


void delay1us(uint32_t udelay)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  __IO uint32_t delayTick = (udelay * (SystemCoreClock / 10U / 1000000U));
 8000154:	4b0a      	ldr	r3, [pc, #40]	; (8000180 <delay1us+0x34>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a0a      	ldr	r2, [pc, #40]	; (8000184 <delay1us+0x38>)
 800015a:	fba2 2303 	umull	r2, r3, r2, r3
 800015e:	0d9b      	lsrs	r3, r3, #22
 8000160:	687a      	ldr	r2, [r7, #4]
 8000162:	fb02 f303 	mul.w	r3, r2, r3
 8000166:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000168:	bf00      	nop

  do
  {
    __NOP();
  }
  while(delayTick--);
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	1e5a      	subs	r2, r3, #1
 800016e:	60fa      	str	r2, [r7, #12]
 8000170:	2b00      	cmp	r3, #0
 8000172:	d1f9      	bne.n	8000168 <delay1us+0x1c>
}
 8000174:	bf00      	nop
 8000176:	3714      	adds	r7, #20
 8000178:	46bd      	mov	sp, r7
 800017a:	bc80      	pop	{r7}
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop
 8000180:	20000254 	.word	0x20000254
 8000184:	6b5fca6b 	.word	0x6b5fca6b

08000188 <initI2C>:

void initI2C()
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = SDA_PIN;
 800018e:	2380      	movs	r3, #128	; 0x80
 8000190:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000192:	2311      	movs	r3, #17
 8000194:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000196:	2300      	movs	r3, #0
 8000198:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800019a:	2302      	movs	r3, #2
 800019c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SDA_PORT, &GPIO_InitStruct);
 800019e:	463b      	mov	r3, r7
 80001a0:	4619      	mov	r1, r3
 80001a2:	480e      	ldr	r0, [pc, #56]	; (80001dc <initI2C+0x54>)
 80001a4:	f000 fe64 	bl	8000e70 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SCL_PIN;
 80001a8:	2340      	movs	r3, #64	; 0x40
 80001aa:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80001ac:	2311      	movs	r3, #17
 80001ae:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b0:	2300      	movs	r3, #0
 80001b2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001b4:	2302      	movs	r3, #2
 80001b6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct);
 80001b8:	463b      	mov	r3, r7
 80001ba:	4619      	mov	r1, r3
 80001bc:	4807      	ldr	r0, [pc, #28]	; (80001dc <initI2C+0x54>)
 80001be:	f000 fe57 	bl	8000e70 <HAL_GPIO_Init>
	SetSCL;
 80001c2:	4b06      	ldr	r3, [pc, #24]	; (80001dc <initI2C+0x54>)
 80001c4:	2240      	movs	r2, #64	; 0x40
 80001c6:	611a      	str	r2, [r3, #16]
	SetSDA;
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <initI2C+0x54>)
 80001ca:	2280      	movs	r2, #128	; 0x80
 80001cc:	611a      	str	r2, [r3, #16]
 	HAL_Delay(100);
 80001ce:	2064      	movs	r0, #100	; 0x64
 80001d0:	f000 fc80 	bl	8000ad4 <HAL_Delay>
}
 80001d4:	bf00      	nop
 80001d6:	3710      	adds	r7, #16
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	40010c00 	.word	0x40010c00

080001e0 <i2c_start>:

void i2c_start()
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	SetSCL;
 80001e4:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <i2c_start+0x30>)
 80001e6:	2240      	movs	r2, #64	; 0x40
 80001e8:	611a      	str	r2, [r3, #16]
	delay1us(i2cTime);
 80001ea:	2003      	movs	r0, #3
 80001ec:	f7ff ffae 	bl	800014c <delay1us>
	SetSDA;
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <i2c_start+0x30>)
 80001f2:	2280      	movs	r2, #128	; 0x80
 80001f4:	611a      	str	r2, [r3, #16]
	delay1us(i2cTime);
 80001f6:	2003      	movs	r0, #3
 80001f8:	f7ff ffa8 	bl	800014c <delay1us>
	ResSDA;
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <i2c_start+0x30>)
 80001fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000202:	611a      	str	r2, [r3, #16]
	delay1us(i2cTime);
 8000204:	2003      	movs	r0, #3
 8000206:	f7ff ffa1 	bl	800014c <delay1us>
}
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40010c00 	.word	0x40010c00

08000214 <i2c_stop>:

void i2c_stop()
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	ResSCL;
 8000218:	4b0d      	ldr	r3, [pc, #52]	; (8000250 <i2c_stop+0x3c>)
 800021a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800021e:	611a      	str	r2, [r3, #16]
	delay1us(i2cTime);
 8000220:	2003      	movs	r0, #3
 8000222:	f7ff ff93 	bl	800014c <delay1us>
	ResSDA;
 8000226:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <i2c_stop+0x3c>)
 8000228:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800022c:	611a      	str	r2, [r3, #16]
	delay1us(i2cTime);
 800022e:	2003      	movs	r0, #3
 8000230:	f7ff ff8c 	bl	800014c <delay1us>
	SetSCL;
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <i2c_stop+0x3c>)
 8000236:	2240      	movs	r2, #64	; 0x40
 8000238:	611a      	str	r2, [r3, #16]
	delay1us(i2cTime);
 800023a:	2003      	movs	r0, #3
 800023c:	f7ff ff86 	bl	800014c <delay1us>
	SetSDA;
 8000240:	4b03      	ldr	r3, [pc, #12]	; (8000250 <i2c_stop+0x3c>)
 8000242:	2280      	movs	r2, #128	; 0x80
 8000244:	611a      	str	r2, [r3, #16]
	delay1us(i2cTime);
 8000246:	2003      	movs	r0, #3
 8000248:	f7ff ff80 	bl	800014c <delay1us>
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	40010c00 	.word	0x40010c00

08000254 <i2c_write>:
	i2c_stop();
}


uint8_t i2c_write(uint8_t dat)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	uint8_t ack;
	GPIO_InitTypeDef GPIO_InitStruct;
	uint8_t i;

	for(i = 0; i < 8; i++)
 800025e:	2300      	movs	r3, #0
 8000260:	77bb      	strb	r3, [r7, #30]
 8000262:	e021      	b.n	80002a8 <i2c_write+0x54>
	{
		ResSCL;
 8000264:	4b32      	ldr	r3, [pc, #200]	; (8000330 <i2c_write+0xdc>)
 8000266:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800026a:	611a      	str	r2, [r3, #16]
		delay1us(i2cTime);
 800026c:	2003      	movs	r0, #3
 800026e:	f7ff ff6d 	bl	800014c <delay1us>

		if(dat & 0x80)
 8000272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000276:	2b00      	cmp	r3, #0
 8000278:	da03      	bge.n	8000282 <i2c_write+0x2e>
			SetSDA;
 800027a:	4b2d      	ldr	r3, [pc, #180]	; (8000330 <i2c_write+0xdc>)
 800027c:	2280      	movs	r2, #128	; 0x80
 800027e:	611a      	str	r2, [r3, #16]
 8000280:	e003      	b.n	800028a <i2c_write+0x36>
		else
			ResSDA;
 8000282:	4b2b      	ldr	r3, [pc, #172]	; (8000330 <i2c_write+0xdc>)
 8000284:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000288:	611a      	str	r2, [r3, #16]
		delay1us(i2cTime);
 800028a:	2003      	movs	r0, #3
 800028c:	f7ff ff5e 	bl	800014c <delay1us>

		dat <<=1;
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	71fb      	strb	r3, [r7, #7]

		SetSCL;
 8000296:	4b26      	ldr	r3, [pc, #152]	; (8000330 <i2c_write+0xdc>)
 8000298:	2240      	movs	r2, #64	; 0x40
 800029a:	611a      	str	r2, [r3, #16]
		delay1us(i2cTime);
 800029c:	2003      	movs	r0, #3
 800029e:	f7ff ff55 	bl	800014c <delay1us>
	for(i = 0; i < 8; i++)
 80002a2:	7fbb      	ldrb	r3, [r7, #30]
 80002a4:	3301      	adds	r3, #1
 80002a6:	77bb      	strb	r3, [r7, #30]
 80002a8:	7fbb      	ldrb	r3, [r7, #30]
 80002aa:	2b07      	cmp	r3, #7
 80002ac:	d9da      	bls.n	8000264 <i2c_write+0x10>
	}

	ResSCL;
 80002ae:	4b20      	ldr	r3, [pc, #128]	; (8000330 <i2c_write+0xdc>)
 80002b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80002b4:	611a      	str	r2, [r3, #16]
	delay1us(i2cTime);
 80002b6:	2003      	movs	r0, #3
 80002b8:	f7ff ff48 	bl	800014c <delay1us>
	SetSDA;
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <i2c_write+0xdc>)
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	611a      	str	r2, [r3, #16]
	delay1us(i2cTime);
 80002c2:	2003      	movs	r0, #3
 80002c4:	f7ff ff42 	bl	800014c <delay1us>
	SetSCL;
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <i2c_write+0xdc>)
 80002ca:	2240      	movs	r2, #64	; 0x40
 80002cc:	611a      	str	r2, [r3, #16]
	delay1us(i2cTime);
 80002ce:	2003      	movs	r0, #3
 80002d0:	f7ff ff3c 	bl	800014c <delay1us>

	GPIO_InitStruct.Pin = SDA_PIN;
 80002d4:	2380      	movs	r3, #128	; 0x80
 80002d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002d8:	2300      	movs	r3, #0
 80002da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e0:	2302      	movs	r3, #2
 80002e2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SDA_PORT, &GPIO_InitStruct);
 80002e4:	f107 030c 	add.w	r3, r7, #12
 80002e8:	4619      	mov	r1, r3
 80002ea:	4811      	ldr	r0, [pc, #68]	; (8000330 <i2c_write+0xdc>)
 80002ec:	f000 fdc0 	bl	8000e70 <HAL_GPIO_Init>

	if (GetSDA)
 80002f0:	2180      	movs	r1, #128	; 0x80
 80002f2:	480f      	ldr	r0, [pc, #60]	; (8000330 <i2c_write+0xdc>)
 80002f4:	f000 ff1a 	bl	800112c <HAL_GPIO_ReadPin>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d002      	beq.n	8000304 <i2c_write+0xb0>
	{
		ack = I2C_NOACK;
 80002fe:	2300      	movs	r3, #0
 8000300:	77fb      	strb	r3, [r7, #31]
 8000302:	e001      	b.n	8000308 <i2c_write+0xb4>
	}
	else
	{
		ack = I2C_ACK;
 8000304:	2301      	movs	r3, #1
 8000306:	77fb      	strb	r3, [r7, #31]
	}

	GPIO_InitStruct.Pin = SDA_PIN;
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800030c:	2311      	movs	r3, #17
 800030e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000310:	2300      	movs	r3, #0
 8000312:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000314:	2302      	movs	r3, #2
 8000316:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SDA_PORT, &GPIO_InitStruct);
 8000318:	f107 030c 	add.w	r3, r7, #12
 800031c:	4619      	mov	r1, r3
 800031e:	4804      	ldr	r0, [pc, #16]	; (8000330 <i2c_write+0xdc>)
 8000320:	f000 fda6 	bl	8000e70 <HAL_GPIO_Init>


	return ack;
 8000324:	7ffb      	ldrb	r3, [r7, #31]
}
 8000326:	4618      	mov	r0, r3
 8000328:	3720      	adds	r7, #32
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40010c00 	.word	0x40010c00

08000334 <i2c_read>:


uint8_t i2c_read(uint8_t done)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
	uint8_t i,dat=0;
 800033e:	2300      	movs	r3, #0
 8000340:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i < 8; i++)
 8000342:	2300      	movs	r3, #0
 8000344:	73fb      	strb	r3, [r7, #15]
 8000346:	e023      	b.n	8000390 <i2c_read+0x5c>
	{
		dat <<= 1;
 8000348:	7bbb      	ldrb	r3, [r7, #14]
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	73bb      	strb	r3, [r7, #14]
		ResSCL;
 800034e:	4b22      	ldr	r3, [pc, #136]	; (80003d8 <i2c_read+0xa4>)
 8000350:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000354:	611a      	str	r2, [r3, #16]
		delay1us(i2cTime);
 8000356:	2003      	movs	r0, #3
 8000358:	f7ff fef8 	bl	800014c <delay1us>
		SetSDA;
 800035c:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <i2c_read+0xa4>)
 800035e:	2280      	movs	r2, #128	; 0x80
 8000360:	611a      	str	r2, [r3, #16]
		delay1us(i2cTime);
 8000362:	2003      	movs	r0, #3
 8000364:	f7ff fef2 	bl	800014c <delay1us>
		SetSCL;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <i2c_read+0xa4>)
 800036a:	2240      	movs	r2, #64	; 0x40
 800036c:	611a      	str	r2, [r3, #16]
		delay1us(i2cTime);
 800036e:	2003      	movs	r0, #3
 8000370:	f7ff feec 	bl	800014c <delay1us>

		if(GetSDA)
 8000374:	2180      	movs	r1, #128	; 0x80
 8000376:	4818      	ldr	r0, [pc, #96]	; (80003d8 <i2c_read+0xa4>)
 8000378:	f000 fed8 	bl	800112c <HAL_GPIO_ReadPin>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d003      	beq.n	800038a <i2c_read+0x56>
			dat |= 0x01;
 8000382:	7bbb      	ldrb	r3, [r7, #14]
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	73bb      	strb	r3, [r7, #14]
	for(i = 0; i < 8; i++)
 800038a:	7bfb      	ldrb	r3, [r7, #15]
 800038c:	3301      	adds	r3, #1
 800038e:	73fb      	strb	r3, [r7, #15]
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	2b07      	cmp	r3, #7
 8000394:	d9d8      	bls.n	8000348 <i2c_read+0x14>
	}

	ResSCL;
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <i2c_read+0xa4>)
 8000398:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800039c:	611a      	str	r2, [r3, #16]
	delay1us(i2cTime);
 800039e:	2003      	movs	r0, #3
 80003a0:	f7ff fed4 	bl	800014c <delay1us>

	//ack
	if(done)
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d003      	beq.n	80003b2 <i2c_read+0x7e>
		SetSDA;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <i2c_read+0xa4>)
 80003ac:	2280      	movs	r2, #128	; 0x80
 80003ae:	611a      	str	r2, [r3, #16]
 80003b0:	e003      	b.n	80003ba <i2c_read+0x86>
	else
		ResSDA;
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <i2c_read+0xa4>)
 80003b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80003b8:	611a      	str	r2, [r3, #16]

	delay1us(i2cTime);
 80003ba:	2003      	movs	r0, #3
 80003bc:	f7ff fec6 	bl	800014c <delay1us>

	SetSCL;
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <i2c_read+0xa4>)
 80003c2:	2240      	movs	r2, #64	; 0x40
 80003c4:	611a      	str	r2, [r3, #16]
	delay1us(i2cTime);
 80003c6:	2003      	movs	r0, #3
 80003c8:	f7ff fec0 	bl	800014c <delay1us>

	return dat;
 80003cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40010c00 	.word	0x40010c00

080003dc <readI2C>:


uint8_t readI2C(uint8_t id,uint8_t reg, uint8_t *dat,uint16_t len)
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	603a      	str	r2, [r7, #0]
 80003e4:	461a      	mov	r2, r3
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
 80003ea:	460b      	mov	r3, r1
 80003ec:	71bb      	strb	r3, [r7, #6]
 80003ee:	4613      	mov	r3, r2
 80003f0:	80bb      	strh	r3, [r7, #4]
	int i;
	uint8_t retryCount = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	72fb      	strb	r3, [r7, #11]
	uint8_t ret=I2C_NOACK;
 80003f6:	2300      	movs	r3, #0
 80003f8:	72bb      	strb	r3, [r7, #10]
	do
	{
		retryCount++;
 80003fa:	7afb      	ldrb	r3, [r7, #11]
 80003fc:	3301      	adds	r3, #1
 80003fe:	72fb      	strb	r3, [r7, #11]

	// Stop
		i2c_stop();
 8000400:	f7ff ff08 	bl	8000214 <i2c_stop>
		delay1us(i2cTime);
 8000404:	2003      	movs	r0, #3
 8000406:	f7ff fea1 	bl	800014c <delay1us>

	// Start
		i2c_start();
 800040a:	f7ff fee9 	bl	80001e0 <i2c_start>

	// Slave ID
		if(i2c_write(id) == I2C_NOACK)
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff1f 	bl	8000254 <i2c_write>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d037      	beq.n	800048c <readI2C+0xb0>
		{
			continue;
		}

		// reg
		if(i2c_write(reg) == I2C_NOACK)
 800041c:	79bb      	ldrb	r3, [r7, #6]
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ff18 	bl	8000254 <i2c_write>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d032      	beq.n	8000490 <readI2C+0xb4>
		{
			continue;
		}

		i2c_stop();
 800042a:	f7ff fef3 	bl	8000214 <i2c_stop>
		delay1us(i2cTime);
 800042e:	2003      	movs	r0, #3
 8000430:	f7ff fe8c 	bl	800014c <delay1us>

		// Start
		i2c_start();
 8000434:	f7ff fed4 	bl	80001e0 <i2c_start>

		if (i2c_write(id | 0x01) == I2C_NOACK)
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff07 	bl	8000254 <i2c_write>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d023      	beq.n	8000494 <readI2C+0xb8>
		{
			continue;
		}

		// data
		for(i = 0; i < (len-1); i++)
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	e00a      	b.n	8000468 <readI2C+0x8c>
		{
			dat[i] = i2c_read(0);
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	683a      	ldr	r2, [r7, #0]
 8000456:	18d4      	adds	r4, r2, r3
 8000458:	2000      	movs	r0, #0
 800045a:	f7ff ff6b 	bl	8000334 <i2c_read>
 800045e:	4603      	mov	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < (len-1); i++)
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	3301      	adds	r3, #1
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	88bb      	ldrh	r3, [r7, #4]
 800046a:	1e5a      	subs	r2, r3, #1
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	429a      	cmp	r2, r3
 8000470:	dcef      	bgt.n	8000452 <readI2C+0x76>
		}

		dat[i] = i2c_read(1);
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	683a      	ldr	r2, [r7, #0]
 8000476:	18d4      	adds	r4, r2, r3
 8000478:	2001      	movs	r0, #1
 800047a:	f7ff ff5b 	bl	8000334 <i2c_read>
 800047e:	4603      	mov	r3, r0
 8000480:	7023      	strb	r3, [r4, #0]

		i2c_stop();
 8000482:	f7ff fec7 	bl	8000214 <i2c_stop>
		ret = I2C_ACK;
 8000486:	2301      	movs	r3, #1
 8000488:	72bb      	strb	r3, [r7, #10]
 800048a:	e004      	b.n	8000496 <readI2C+0xba>
			continue;
 800048c:	bf00      	nop
 800048e:	e002      	b.n	8000496 <readI2C+0xba>
			continue;
 8000490:	bf00      	nop
 8000492:	e000      	b.n	8000496 <readI2C+0xba>
			continue;
 8000494:	bf00      	nop
	} while((retryCount < 10) || (ret == I2C_NOACK));
 8000496:	7afb      	ldrb	r3, [r7, #11]
 8000498:	2b09      	cmp	r3, #9
 800049a:	d9ae      	bls.n	80003fa <readI2C+0x1e>
 800049c:	7abb      	ldrb	r3, [r7, #10]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0ab      	beq.n	80003fa <readI2C+0x1e>
	delay1us(i2cTime);
 80004a2:	2003      	movs	r0, #3
 80004a4:	f7ff fe52 	bl	800014c <delay1us>


	return ret;
 80004a8:	7abb      	ldrb	r3, [r7, #10]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd90      	pop	{r4, r7, pc}
	...

080004b4 <tpd_down>:
	uint8_t id;
};
struct multiTouchHid_t multiTouch;

void tpd_down(uint16_t x, uint16_t y, uint16_t p)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	80fb      	strh	r3, [r7, #6]
 80004be:	460b      	mov	r3, r1
 80004c0:	80bb      	strh	r3, [r7, #4]
 80004c2:	4613      	mov	r3, r2
 80004c4:	807b      	strh	r3, [r7, #2]
	multiTouch.touch[p].tip = 0x01;
 80004c6:	887b      	ldrh	r3, [r7, #2]
 80004c8:	4a19      	ldr	r2, [pc, #100]	; (8000530 <tpd_down+0x7c>)
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	4413      	add	r3, r2
 80004ce:	2201      	movs	r2, #1
 80004d0:	705a      	strb	r2, [r3, #1]
	multiTouch.touch[p].num = p;   //contact id
 80004d2:	887b      	ldrh	r3, [r7, #2]
 80004d4:	887a      	ldrh	r2, [r7, #2]
 80004d6:	b2d1      	uxtb	r1, r2
 80004d8:	4a15      	ldr	r2, [pc, #84]	; (8000530 <tpd_down+0x7c>)
 80004da:	00db      	lsls	r3, r3, #3
 80004dc:	4413      	add	r3, r2
 80004de:	460a      	mov	r2, r1
 80004e0:	709a      	strb	r2, [r3, #2]
	multiTouch.touch[p].x = x;
 80004e2:	887b      	ldrh	r3, [r7, #2]
 80004e4:	4a12      	ldr	r2, [pc, #72]	; (8000530 <tpd_down+0x7c>)
 80004e6:	00db      	lsls	r3, r3, #3
 80004e8:	4413      	add	r3, r2
 80004ea:	88fa      	ldrh	r2, [r7, #6]
 80004ec:	f8a3 2003 	strh.w	r2, [r3, #3]
	multiTouch.touch[p].y = y;
 80004f0:	887b      	ldrh	r3, [r7, #2]
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <tpd_down+0x7c>)
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	4413      	add	r3, r2
 80004f8:	88ba      	ldrh	r2, [r7, #4]
 80004fa:	f8a3 2005 	strh.w	r2, [r3, #5]
	multiTouch.touch[p].width = 0x30; //width of contact
 80004fe:	887b      	ldrh	r3, [r7, #2]
 8000500:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <tpd_down+0x7c>)
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	4413      	add	r3, r2
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	71da      	strb	r2, [r3, #7]
	multiTouch.touch[p].height = 0x30;
 800050a:	887b      	ldrh	r3, [r7, #2]
 800050c:	4a08      	ldr	r2, [pc, #32]	; (8000530 <tpd_down+0x7c>)
 800050e:	00db      	lsls	r3, r3, #3
 8000510:	4413      	add	r3, r2
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	721a      	strb	r2, [r3, #8]
	multiTouch.id++;
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <tpd_down+0x7c>)
 8000518:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800051c:	3301      	adds	r3, #1
 800051e:	b2da      	uxtb	r2, r3
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <tpd_down+0x7c>)
 8000522:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	2000034c 	.word	0x2000034c

08000534 <tpd_up>:
void tpd_up(uint16_t x, uint16_t y, uint16_t p)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	80fb      	strh	r3, [r7, #6]
 800053e:	460b      	mov	r3, r1
 8000540:	80bb      	strh	r3, [r7, #4]
 8000542:	4613      	mov	r3, r2
 8000544:	807b      	strh	r3, [r7, #2]
	multiTouch.touch[multiTouch.id].tip = 0x00;
 8000546:	4b21      	ldr	r3, [pc, #132]	; (80005cc <tpd_up+0x98>)
 8000548:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800054c:	4a1f      	ldr	r2, [pc, #124]	; (80005cc <tpd_up+0x98>)
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	4413      	add	r3, r2
 8000552:	2200      	movs	r2, #0
 8000554:	705a      	strb	r2, [r3, #1]
	multiTouch.touch[multiTouch.id].num = multiTouch.id;
 8000556:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <tpd_up+0x98>)
 8000558:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800055c:	4618      	mov	r0, r3
 800055e:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <tpd_up+0x98>)
 8000560:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8000564:	4a19      	ldr	r2, [pc, #100]	; (80005cc <tpd_up+0x98>)
 8000566:	00c3      	lsls	r3, r0, #3
 8000568:	4413      	add	r3, r2
 800056a:	460a      	mov	r2, r1
 800056c:	709a      	strb	r2, [r3, #2]
	multiTouch.touch[multiTouch.id].x = x;
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <tpd_up+0x98>)
 8000570:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000574:	4a15      	ldr	r2, [pc, #84]	; (80005cc <tpd_up+0x98>)
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	4413      	add	r3, r2
 800057a:	88fa      	ldrh	r2, [r7, #6]
 800057c:	f8a3 2003 	strh.w	r2, [r3, #3]
	multiTouch.touch[multiTouch.id].y = y;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <tpd_up+0x98>)
 8000582:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <tpd_up+0x98>)
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	4413      	add	r3, r2
 800058c:	88ba      	ldrh	r2, [r7, #4]
 800058e:	f8a3 2005 	strh.w	r2, [r3, #5]
	multiTouch.touch[multiTouch.id].width = 0x30;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <tpd_up+0x98>)
 8000594:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000598:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <tpd_up+0x98>)
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	4413      	add	r3, r2
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	71da      	strb	r2, [r3, #7]
	multiTouch.touch[multiTouch.id].height = 0x30;
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <tpd_up+0x98>)
 80005a4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80005a8:	4a08      	ldr	r2, [pc, #32]	; (80005cc <tpd_up+0x98>)
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	4413      	add	r3, r2
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	721a      	strb	r2, [r3, #8]
	multiTouch.id++;
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <tpd_up+0x98>)
 80005b4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80005b8:	3301      	adds	r3, #1
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <tpd_up+0x98>)
 80005be:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	2000034c 	.word	0x2000034c

080005d0 <input_sync>:

void input_sync()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	multiTouch.report = 0x01;
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <input_sync+0x60>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
	multiTouch.count++;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <input_sync+0x60>)
 80005de:	f8b3 3029 	ldrh.w	r3, [r3, #41]	; 0x29
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	3301      	adds	r3, #1
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <input_sync+0x60>)
 80005ea:	f8a3 2029 	strh.w	r2, [r3, #41]	; 0x29
	/*
	for(int i=0;i<multiTouch.id;i++)
	{
		printf("\n[%d:%d] x : %d, y : %d, %d\n",multiTouch.id, multiTouch.touch[i].tip, multiTouch.touch[i].x,multiTouch.touch[i].y, multiTouch.count);
	}*/
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&multiTouch, sizeof(struct multiTouchHid_t));
 80005ee:	222c      	movs	r2, #44	; 0x2c
 80005f0:	490f      	ldr	r1, [pc, #60]	; (8000630 <input_sync+0x60>)
 80005f2:	4810      	ldr	r0, [pc, #64]	; (8000634 <input_sync+0x64>)
 80005f4:	f004 f8c2 	bl	800477c <USBD_HID_SendReport>
	multiTouch.id=0;
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <input_sync+0x60>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	for(int i=0;i<max_point_num;i++)
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	e00c      	b.n	8000620 <input_sync+0x50>
	{
		memset(&multiTouch.touch[i], 0x00, sizeof(struct touchHid_t));
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	4a09      	ldr	r2, [pc, #36]	; (8000630 <input_sync+0x60>)
 800060c:	4413      	add	r3, r2
 800060e:	3301      	adds	r3, #1
 8000610:	2208      	movs	r2, #8
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f005 fea1 	bl	800635c <memset>
	for(int i=0;i<max_point_num;i++)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3301      	adds	r3, #1
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b04      	cmp	r3, #4
 8000624:	ddef      	ble.n	8000606 <input_sync+0x36>
	}
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000034c 	.word	0x2000034c
 8000634:	20000424 	.word	0x20000424

08000638 <getTouchPtr>:


uint8_t *getTouchPtr()
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	return (uint8_t*)&multiTouch;
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <getTouchPtr+0x10>)
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	2000034c 	.word	0x2000034c

0800064c <getTouchQualityKeyPtr>:


//for windows
uint8_t *getTouchQualityKeyPtr()
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
	return (uint8_t*)&touchQualityKey;
 8000650:	4b02      	ldr	r3, [pc, #8]	; (800065c <getTouchQualityKeyPtr+0x10>)
}
 8000652:	4618      	mov	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	08007370 	.word	0x08007370

08000660 <HAL_GPIO_EXTI_Callback>:

//interrupt Pen IRQ
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_9)
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000670:	d102      	bne.n	8000678 <HAL_GPIO_EXTI_Callback+0x18>
	{
		touchIrq = 1;
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_GPIO_EXTI_Callback+0x24>)
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
	}
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	2000030c 	.word	0x2000030c

08000688 <initTouch>:

void initTouch()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	//reset
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000694:	481c      	ldr	r0, [pc, #112]	; (8000708 <initTouch+0x80>)
 8000696:	f000 fd60 	bl	800115a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800069a:	200a      	movs	r0, #10
 800069c:	f000 fa1a 	bl	8000ad4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a6:	4818      	ldr	r0, [pc, #96]	; (8000708 <initTouch+0x80>)
 80006a8:	f000 fd57 	bl	800115a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f000 fa11 	bl	8000ad4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b8:	4813      	ldr	r0, [pc, #76]	; (8000708 <initTouch+0x80>)
 80006ba:	f000 fd4e 	bl	800115a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80006be:	200a      	movs	r0, #10
 80006c0:	f000 fa08 	bl	8000ad4 <HAL_Delay>


	multiTouch.count = 0;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <initTouch+0x84>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	multiTouch.id=0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <initTouch+0x84>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	for(int i=0;i<max_point_num;i++)
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	e00c      	b.n	80006fa <initTouch+0x72>
	{
		memset(&multiTouch.touch[i], 0x00, sizeof(struct touchHid_t));
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	4a09      	ldr	r2, [pc, #36]	; (800070c <initTouch+0x84>)
 80006e6:	4413      	add	r3, r2
 80006e8:	3301      	adds	r3, #1
 80006ea:	2208      	movs	r2, #8
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 fe34 	bl	800635c <memset>
	for(int i=0;i<max_point_num;i++)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3301      	adds	r3, #1
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	ddef      	ble.n	80006e0 <initTouch+0x58>
	}
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40010c00 	.word	0x40010c00
 800070c:	2000034c 	.word	0x2000034c

08000710 <toucuProc>:

void toucuProc()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b0a0      	sub	sp, #128	; 0x80
 8000714:	af00      	add	r7, sp, #0
	uint8_t point_num;
	uint8_t i;
	uint16_t x[max_point_num];
	uint16_t y[max_point_num];
	uint8_t dat[100];
	if(touchIrq)
 8000716:	4bb9      	ldr	r3, [pc, #740]	; (80009fc <toucuProc+0x2ec>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	f000 816a 	beq.w	80009f4 <toucuProc+0x2e4>
	{
		touchIrq=0;
 8000720:	4bb6      	ldr	r3, [pc, #728]	; (80009fc <toucuProc+0x2ec>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]

		readI2C(TOUCH_I2C_ID, 0x00, dat, 33);
 8000726:	1d3a      	adds	r2, r7, #4
 8000728:	2321      	movs	r3, #33	; 0x21
 800072a:	2100      	movs	r1, #0
 800072c:	2070      	movs	r0, #112	; 0x70
 800072e:	f7ff fe55 	bl	80003dc <readI2C>

		//device mode[6:4]
		//0 Work Mode
		//4 Factory Mode
		if((dat[0] & 0x70) != 0)
 8000732:	793b      	ldrb	r3, [r7, #4]
 8000734:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000738:	2b00      	cmp	r3, #0
 800073a:	f040 815a 	bne.w	80009f2 <toucuProc+0x2e2>
			return;

		//Number of Touch points
		point_num =  dat[2] & 0x0f;
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	f003 030f 	and.w	r3, r3, #15
 8000744:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		if(point_num > max_point_num)
 8000748:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800074c:	2b05      	cmp	r3, #5
 800074e:	d902      	bls.n	8000756 <toucuProc+0x46>
			point_num = max_point_num;
 8000750:	2305      	movs	r3, #5
 8000752:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		for(i = 0; i < point_num; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800075c:	e0b1      	b.n	80008c2 <toucuProc+0x1b2>
			//03H [3:0] MSB of Touch X Position in pixels [11:8]
			//04H [7:0] LSB of Touch X Position in pixels [7:0]
			//05H [3:0] MSB of Touch Y Position in pixels [11:8]
			//06H [7:0] LSB of Touch Y Position in pixels [7:0]

			x[i] = (((uint16_t)dat[3+6*i]&0x0F)<<8)|dat[3+6*i+1];
 800075e:	f897 107e 	ldrb.w	r1, [r7, #126]	; 0x7e
 8000762:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8000766:	4613      	mov	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	3303      	adds	r3, #3
 8000770:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000774:	4413      	add	r3, r2
 8000776:	f813 3c7c 	ldrb.w	r3, [r3, #-124]
 800077a:	021b      	lsls	r3, r3, #8
 800077c:	b21b      	sxth	r3, r3
 800077e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000782:	b218      	sxth	r0, r3
 8000784:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8000788:	4613      	mov	r3, r2
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	4413      	add	r3, r2
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	3304      	adds	r3, #4
 8000792:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000796:	4413      	add	r3, r2
 8000798:	f813 3c7c 	ldrb.w	r3, [r3, #-124]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4303      	orrs	r3, r0
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	004b      	lsls	r3, r1, #1
 80007a6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80007aa:	440b      	add	r3, r1
 80007ac:	f823 2c0c 	strh.w	r2, [r3, #-12]
			y[i] = (((uint16_t)dat[3+6*i+2]&0x0F)<<8)|dat[3+6*i+3];
 80007b0:	f897 107e 	ldrb.w	r1, [r7, #126]	; 0x7e
 80007b4:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80007b8:	4613      	mov	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4413      	add	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	3305      	adds	r3, #5
 80007c2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80007c6:	4413      	add	r3, r2
 80007c8:	f813 3c7c 	ldrb.w	r3, [r3, #-124]
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007d4:	b218      	sxth	r0, r3
 80007d6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	4613      	mov	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	4413      	add	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80007e8:	4413      	add	r3, r2
 80007ea:	f813 3c7c 	ldrb.w	r3, [r3, #-124]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4303      	orrs	r3, r0
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	004b      	lsls	r3, r1, #1
 80007f8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80007fc:	440b      	add	r3, r1
 80007fe:	f823 2c18 	strh.w	r2, [r3, #-24]
			if(x[i] > 1024)
 8000802:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800080c:	4413      	add	r3, r2
 800080e:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000816:	d909      	bls.n	800082c <toucuProc+0x11c>
				x[i] = 1024;
 8000818:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000822:	4413      	add	r3, r2
 8000824:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000828:	f823 2c0c 	strh.w	r2, [r3, #-12]
			if(y[i] > 600)
 800082c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000836:	4413      	add	r3, r2
 8000838:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800083c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000840:	d909      	bls.n	8000856 <toucuProc+0x146>
				y[i] = 600;
 8000842:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800084c:	4413      	add	r3, r2
 800084e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000852:	f823 2c18 	strh.w	r2, [r3, #-24]
			x[i] = (x[i]*2048)/1024;// touch range ( 0 ~ 1024 ) to USB HID range (0 ~  2048)
 8000856:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800085a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000864:	440b      	add	r3, r1
 8000866:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 800086a:	02db      	lsls	r3, r3, #11
 800086c:	2b00      	cmp	r3, #0
 800086e:	da01      	bge.n	8000874 <toucuProc+0x164>
 8000870:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000874:	129b      	asrs	r3, r3, #10
 8000876:	b299      	uxth	r1, r3
 8000878:	0053      	lsls	r3, r2, #1
 800087a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800087e:	4413      	add	r3, r2
 8000880:	460a      	mov	r2, r1
 8000882:	f823 2c0c 	strh.w	r2, [r3, #-12]
			y[i] = (y[i]*2048)/600; // touch range ( 0 ~ 1024 ) to USB HID range (0 ~  2048)
 8000886:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800088a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000894:	440b      	add	r3, r1
 8000896:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800089a:	02db      	lsls	r3, r3, #11
 800089c:	4958      	ldr	r1, [pc, #352]	; (8000a00 <toucuProc+0x2f0>)
 800089e:	fb81 0103 	smull	r0, r1, r1, r3
 80008a2:	1189      	asrs	r1, r1, #6
 80008a4:	17db      	asrs	r3, r3, #31
 80008a6:	1acb      	subs	r3, r1, r3
 80008a8:	b299      	uxth	r1, r3
 80008aa:	0053      	lsls	r3, r2, #1
 80008ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80008b0:	4413      	add	r3, r2
 80008b2:	460a      	mov	r2, r1
 80008b4:	f823 2c18 	strh.w	r2, [r3, #-24]
		for(i = 0; i < point_num; i++)
 80008b8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80008bc:	3301      	adds	r3, #1
 80008be:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80008c2:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80008c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008ca:	429a      	cmp	r2, r3
 80008cc:	f4ff af47 	bcc.w	800075e <toucuProc+0x4e>
		}

		if(point_num > 0)
 80008d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d064      	beq.n	80009a2 <toucuProc+0x292>
		{
			// pressed
			for(i=0;i<point_num;i++)
 80008d8:	2300      	movs	r3, #0
 80008da:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80008de:	e034      	b.n	800094a <toucuProc+0x23a>
			{
				tpd_down(x[i], y[i], i);
 80008e0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80008ea:	4413      	add	r3, r2
 80008ec:	f833 0c0c 	ldrh.w	r0, [r3, #-12]
 80008f0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80008fa:	4413      	add	r3, r2
 80008fc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000900:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8000904:	b292      	uxth	r2, r2
 8000906:	4619      	mov	r1, r3
 8000908:	f7ff fdd4 	bl	80004b4 <tpd_down>
				oldX[i] = x[i];
 800090c:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8000910:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800091a:	440b      	add	r3, r1
 800091c:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 8000920:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <toucuProc+0x2f4>)
 8000922:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				oldY[i] = y[i];
 8000926:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800092a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000934:	440b      	add	r3, r1
 8000936:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800093a:	4b33      	ldr	r3, [pc, #204]	; (8000a08 <toucuProc+0x2f8>)
 800093c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for(i=0;i<point_num;i++)
 8000940:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000944:	3301      	adds	r3, #1
 8000946:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800094a:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800094e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000952:	429a      	cmp	r2, r3
 8000954:	d3c4      	bcc.n	80008e0 <toucuProc+0x1d0>
			}
			//what was pressed in the previous state.
			if(p_point_num > point_num)
 8000956:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <toucuProc+0x2fc>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800095e:	429a      	cmp	r2, r3
 8000960:	d21c      	bcs.n	800099c <toucuProc+0x28c>
			{
				for(i=0;i<p_point_num;i++)
 8000962:	2300      	movs	r3, #0
 8000964:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8000968:	e012      	b.n	8000990 <toucuProc+0x280>
				{
					tpd_up(oldX[i], oldY[i], 0);
 800096a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800096e:	4a25      	ldr	r2, [pc, #148]	; (8000a04 <toucuProc+0x2f4>)
 8000970:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8000974:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000978:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <toucuProc+0x2f8>)
 800097a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097e:	2200      	movs	r2, #0
 8000980:	4619      	mov	r1, r3
 8000982:	f7ff fdd7 	bl	8000534 <tpd_up>
				for(i=0;i<p_point_num;i++)
 8000986:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800098a:	3301      	adds	r3, #1
 800098c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <toucuProc+0x2fc>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8000998:	429a      	cmp	r2, r3
 800099a:	d3e6      	bcc.n	800096a <toucuProc+0x25a>
				}
			}

			//send data
			input_sync();
 800099c:	f7ff fe18 	bl	80005d0 <input_sync>
 80009a0:	e022      	b.n	80009e8 <toucuProc+0x2d8>
		}
		else if(p_point_num>0)
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <toucuProc+0x2fc>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d01e      	beq.n	80009e8 <toucuProc+0x2d8>
		{
			//release
			for(i=0;i<p_point_num;i++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80009b0:	e012      	b.n	80009d8 <toucuProc+0x2c8>
			{
				tpd_up(oldX[i], oldY[i], 0);
 80009b2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80009b6:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <toucuProc+0x2f4>)
 80009b8:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80009bc:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80009c0:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <toucuProc+0x2f8>)
 80009c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c6:	2200      	movs	r2, #0
 80009c8:	4619      	mov	r1, r3
 80009ca:	f7ff fdb3 	bl	8000534 <tpd_up>
			for(i=0;i<p_point_num;i++)
 80009ce:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80009d2:	3301      	adds	r3, #1
 80009d4:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <toucuProc+0x2fc>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d3e6      	bcc.n	80009b2 <toucuProc+0x2a2>
			}

			//send data
			input_sync();
 80009e4:	f7ff fdf4 	bl	80005d0 <input_sync>
		}
		p_point_num = point_num;
 80009e8:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <toucuProc+0x2fc>)
 80009ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80009ee:	7013      	strb	r3, [r2, #0]
 80009f0:	e000      	b.n	80009f4 <toucuProc+0x2e4>
			return;
 80009f2:	bf00      	nop
	}
}
 80009f4:	3780      	adds	r7, #128	; 0x80
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000030c 	.word	0x2000030c
 8000a00:	1b4e81b5 	.word	0x1b4e81b5
 8000a04:	20000310 	.word	0x20000310
 8000a08:	2000031c 	.word	0x2000031c
 8000a0c:	20000326 	.word	0x20000326

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_Init+0x28>)
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_Init+0x28>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f043 0310 	orr.w	r3, r3, #16
 8000a1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f93f 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 f808 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2c:	f004 ff64 	bl	80058f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40022000 	.word	0x40022000

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x54>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x58>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f957 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00e      	b.n	8000a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d80a      	bhi.n	8000a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 f91f 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <HAL_InitTick+0x5c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000254 	.word	0x20000254
 8000a94:	20000004 	.word	0x20000004
 8000a98:	20000000 	.word	0x20000000

08000a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x1c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x20>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a03      	ldr	r2, [pc, #12]	; (8000abc <HAL_IncTick+0x20>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	20000004 	.word	0x20000004
 8000abc:	20000378 	.word	0x20000378

08000ac0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b02      	ldr	r3, [pc, #8]	; (8000ad0 <HAL_GetTick+0x10>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	20000378 	.word	0x20000378

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff fff0 	bl	8000ac0 <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aec:	d005      	beq.n	8000afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_Delay+0x40>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000afa:	bf00      	nop
 8000afc:	f7ff ffe0 	bl	8000ac0 <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1ad2      	subs	r2, r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d3f7      	bcc.n	8000afc <HAL_Delay+0x28>
  {
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000004 	.word	0x20000004

08000b18 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b86:	4908      	ldr	r1, [pc, #32]	; (8000ba8 <NVIC_EnableIRQ+0x2c>)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	095b      	lsrs	r3, r3, #5
 8000b8e:	79fa      	ldrb	r2, [r7, #7]
 8000b90:	f002 021f 	and.w	r2, r2, #31
 8000b94:	2001      	movs	r0, #1
 8000b96:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	da0b      	bge.n	8000bd8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <NVIC_SetPriority+0x4c>)
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 030f 	and.w	r3, r3, #15
 8000bc8:	3b04      	subs	r3, #4
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd6:	e009      	b.n	8000bec <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	4908      	ldr	r1, [pc, #32]	; (8000bfc <NVIC_SetPriority+0x50>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	2201      	movs	r2, #1
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	1e5a      	subs	r2, r3, #1
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	401a      	ands	r2, r3
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c46:	2101      	movs	r1, #1
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	1e59      	subs	r1, r3, #1
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff92 	bl	8000bac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff33 	bl	8000b18 <NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff48 	bl	8000b60 <NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff92 	bl	8000c00 <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff61 	bl	8000bac <NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff3b 	bl	8000b7c <NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa2 	bl	8000c60 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	d106      	bne.n	8000d44 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000d42:	e005      	b.n	8000d50 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d44:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f023 0304 	bic.w	r3, r3, #4
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d64:	f000 f802 	bl	8000d6c <HAL_SYSTICK_Callback>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d005      	beq.n	8000d9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2204      	movs	r2, #4
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e057      	b.n	8000e4a <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	6812      	ldr	r2, [r2, #0]
 8000da2:	6812      	ldr	r2, [r2, #0]
 8000da4:	f022 020e 	bic.w	r2, r2, #14
 8000da8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	6812      	ldr	r2, [r2, #0]
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	f022 0201 	bic.w	r2, r2, #1
 8000db8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dba:	4a26      	ldr	r2, [pc, #152]	; (8000e54 <HAL_DMA_Abort_IT+0xdc>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <HAL_DMA_Abort_IT+0xe0>)
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	d02e      	beq.n	8000e26 <HAL_DMA_Abort_IT+0xae>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <HAL_DMA_Abort_IT+0xe4>)
 8000dd0:	4299      	cmp	r1, r3
 8000dd2:	d026      	beq.n	8000e22 <HAL_DMA_Abort_IT+0xaa>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <HAL_DMA_Abort_IT+0xe8>)
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d01d      	beq.n	8000e1c <HAL_DMA_Abort_IT+0xa4>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <HAL_DMA_Abort_IT+0xec>)
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d014      	beq.n	8000e16 <HAL_DMA_Abort_IT+0x9e>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_DMA_Abort_IT+0xf0>)
 8000df4:	4299      	cmp	r1, r3
 8000df6:	d00b      	beq.n	8000e10 <HAL_DMA_Abort_IT+0x98>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <HAL_DMA_Abort_IT+0xf4>)
 8000e00:	4299      	cmp	r1, r3
 8000e02:	d102      	bne.n	8000e0a <HAL_DMA_Abort_IT+0x92>
 8000e04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e08:	e00e      	b.n	8000e28 <HAL_DMA_Abort_IT+0xb0>
 8000e0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e0e:	e00b      	b.n	8000e28 <HAL_DMA_Abort_IT+0xb0>
 8000e10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e14:	e008      	b.n	8000e28 <HAL_DMA_Abort_IT+0xb0>
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1a:	e005      	b.n	8000e28 <HAL_DMA_Abort_IT+0xb0>
 8000e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e20:	e002      	b.n	8000e28 <HAL_DMA_Abort_IT+0xb0>
 8000e22:	2310      	movs	r3, #16
 8000e24:	e000      	b.n	8000e28 <HAL_DMA_Abort_IT+0xb0>
 8000e26:	2301      	movs	r3, #1
 8000e28:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	4798      	blx	r3
    } 
  }
  return status;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020008 	.word	0x40020008
 8000e5c:	4002001c 	.word	0x4002001c
 8000e60:	40020030 	.word	0x40020030
 8000e64:	40020044 	.word	0x40020044
 8000e68:	40020058 	.word	0x40020058
 8000e6c:	4002006c 	.word	0x4002006c

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b08b      	sub	sp, #44	; 0x2c
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
 8000e92:	e127      	b.n	80010e4 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000e94:	2201      	movs	r2, #1
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f040 8116 	bne.w	80010de <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b12      	cmp	r3, #18
 8000eb8:	d034      	beq.n	8000f24 <HAL_GPIO_Init+0xb4>
 8000eba:	2b12      	cmp	r3, #18
 8000ebc:	d80d      	bhi.n	8000eda <HAL_GPIO_Init+0x6a>
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d02b      	beq.n	8000f1a <HAL_GPIO_Init+0xaa>
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d804      	bhi.n	8000ed0 <HAL_GPIO_Init+0x60>
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d031      	beq.n	8000f2e <HAL_GPIO_Init+0xbe>
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d01c      	beq.n	8000f08 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ece:	e048      	b.n	8000f62 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d043      	beq.n	8000f5c <HAL_GPIO_Init+0xec>
 8000ed4:	2b11      	cmp	r3, #17
 8000ed6:	d01b      	beq.n	8000f10 <HAL_GPIO_Init+0xa0>
          break;
 8000ed8:	e043      	b.n	8000f62 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000eda:	4a87      	ldr	r2, [pc, #540]	; (80010f8 <HAL_GPIO_Init+0x288>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d026      	beq.n	8000f2e <HAL_GPIO_Init+0xbe>
 8000ee0:	4a85      	ldr	r2, [pc, #532]	; (80010f8 <HAL_GPIO_Init+0x288>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d806      	bhi.n	8000ef4 <HAL_GPIO_Init+0x84>
 8000ee6:	4a85      	ldr	r2, [pc, #532]	; (80010fc <HAL_GPIO_Init+0x28c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d020      	beq.n	8000f2e <HAL_GPIO_Init+0xbe>
 8000eec:	4a84      	ldr	r2, [pc, #528]	; (8001100 <HAL_GPIO_Init+0x290>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d01d      	beq.n	8000f2e <HAL_GPIO_Init+0xbe>
          break;
 8000ef2:	e036      	b.n	8000f62 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000ef4:	4a83      	ldr	r2, [pc, #524]	; (8001104 <HAL_GPIO_Init+0x294>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d019      	beq.n	8000f2e <HAL_GPIO_Init+0xbe>
 8000efa:	4a83      	ldr	r2, [pc, #524]	; (8001108 <HAL_GPIO_Init+0x298>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d016      	beq.n	8000f2e <HAL_GPIO_Init+0xbe>
 8000f00:	4a82      	ldr	r2, [pc, #520]	; (800110c <HAL_GPIO_Init+0x29c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_GPIO_Init+0xbe>
          break;
 8000f06:	e02c      	b.n	8000f62 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	623b      	str	r3, [r7, #32]
          break;
 8000f0e:	e028      	b.n	8000f62 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	3304      	adds	r3, #4
 8000f16:	623b      	str	r3, [r7, #32]
          break;
 8000f18:	e023      	b.n	8000f62 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	3308      	adds	r3, #8
 8000f20:	623b      	str	r3, [r7, #32]
          break;
 8000f22:	e01e      	b.n	8000f62 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	330c      	adds	r3, #12
 8000f2a:	623b      	str	r3, [r7, #32]
          break;
 8000f2c:	e019      	b.n	8000f62 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d102      	bne.n	8000f3c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f36:	2304      	movs	r3, #4
 8000f38:	623b      	str	r3, [r7, #32]
          break;
 8000f3a:	e012      	b.n	8000f62 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d105      	bne.n	8000f50 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f44:	2308      	movs	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	611a      	str	r2, [r3, #16]
          break;
 8000f4e:	e008      	b.n	8000f62 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f50:	2308      	movs	r3, #8
 8000f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	615a      	str	r2, [r3, #20]
          break;
 8000f5a:	e002      	b.n	8000f62 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
          break;
 8000f60:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	2bff      	cmp	r3, #255	; 0xff
 8000f66:	d801      	bhi.n	8000f6c <HAL_GPIO_Init+0xfc>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	e001      	b.n	8000f70 <HAL_GPIO_Init+0x100>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3304      	adds	r3, #4
 8000f70:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	2bff      	cmp	r3, #255	; 0xff
 8000f76:	d802      	bhi.n	8000f7e <HAL_GPIO_Init+0x10e>
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_Init+0x114>
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	3b08      	subs	r3, #8
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	401a      	ands	r2, r3
 8000f96:	6a39      	ldr	r1, [r7, #32]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8096 	beq.w	80010de <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb2:	4a57      	ldr	r2, [pc, #348]	; (8001110 <HAL_GPIO_Init+0x2a0>)
 8000fb4:	4b56      	ldr	r3, [pc, #344]	; (8001110 <HAL_GPIO_Init+0x2a0>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6193      	str	r3, [r2, #24]
 8000fbe:	4b54      	ldr	r3, [pc, #336]	; (8001110 <HAL_GPIO_Init+0x2a0>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000fca:	4a52      	ldr	r2, [pc, #328]	; (8001114 <HAL_GPIO_Init+0x2a4>)
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd6:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	4013      	ands	r3, r2
 8000fec:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a49      	ldr	r2, [pc, #292]	; (8001118 <HAL_GPIO_Init+0x2a8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d013      	beq.n	800101e <HAL_GPIO_Init+0x1ae>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a48      	ldr	r2, [pc, #288]	; (800111c <HAL_GPIO_Init+0x2ac>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d00d      	beq.n	800101a <HAL_GPIO_Init+0x1aa>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a47      	ldr	r2, [pc, #284]	; (8001120 <HAL_GPIO_Init+0x2b0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d007      	beq.n	8001016 <HAL_GPIO_Init+0x1a6>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a46      	ldr	r2, [pc, #280]	; (8001124 <HAL_GPIO_Init+0x2b4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d101      	bne.n	8001012 <HAL_GPIO_Init+0x1a2>
 800100e:	2303      	movs	r3, #3
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x1b0>
 8001012:	2304      	movs	r3, #4
 8001014:	e004      	b.n	8001020 <HAL_GPIO_Init+0x1b0>
 8001016:	2302      	movs	r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x1b0>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x1b0>
 800101e:	2300      	movs	r3, #0
 8001020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001022:	f002 0203 	and.w	r2, r2, #3
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	4093      	lsls	r3, r2
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	4313      	orrs	r3, r2
 800102e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001030:	4938      	ldr	r1, [pc, #224]	; (8001114 <HAL_GPIO_Init+0x2a4>)
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800104a:	4937      	ldr	r1, [pc, #220]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 800104c:	4b36      	ldr	r3, [pc, #216]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
 8001056:	e006      	b.n	8001066 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001058:	4933      	ldr	r1, [pc, #204]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	4013      	ands	r3, r2
 8001064:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d006      	beq.n	8001080 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001072:	492d      	ldr	r1, [pc, #180]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	604b      	str	r3, [r1, #4]
 800107e:	e006      	b.n	800108e <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001080:	4929      	ldr	r1, [pc, #164]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 8001082:	4b29      	ldr	r3, [pc, #164]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	43db      	mvns	r3, r3
 800108a:	4013      	ands	r3, r2
 800108c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800109a:	4923      	ldr	r1, [pc, #140]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	608b      	str	r3, [r1, #8]
 80010a6:	e006      	b.n	80010b6 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010a8:	491f      	ldr	r1, [pc, #124]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4013      	ands	r3, r2
 80010b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d006      	beq.n	80010d0 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010c2:	4919      	ldr	r1, [pc, #100]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	60cb      	str	r3, [r1, #12]
 80010ce:	e006      	b.n	80010de <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010d0:	4915      	ldr	r1, [pc, #84]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	43db      	mvns	r3, r3
 80010da:	4013      	ands	r3, r2
 80010dc:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	3301      	adds	r3, #1
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	2b0f      	cmp	r3, #15
 80010e8:	f67f aed4 	bls.w	8000e94 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80010ec:	bf00      	nop
 80010ee:	372c      	adds	r7, #44	; 0x2c
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	10210000 	.word	0x10210000
 80010fc:	10110000 	.word	0x10110000
 8001100:	10120000 	.word	0x10120000
 8001104:	10310000 	.word	0x10310000
 8001108:	10320000 	.word	0x10320000
 800110c:	10220000 	.word	0x10220000
 8001110:	40021000 	.word	0x40021000
 8001114:	40010000 	.word	0x40010000
 8001118:	40010800 	.word	0x40010800
 800111c:	40010c00 	.word	0x40010c00
 8001120:	40011000 	.word	0x40011000
 8001124:	40011400 	.word	0x40011400
 8001128:	40010400 	.word	0x40010400

0800112c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	887b      	ldrh	r3, [r7, #2]
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e001      	b.n	800114e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	460b      	mov	r3, r1
 8001164:	807b      	strh	r3, [r7, #2]
 8001166:	4613      	mov	r3, r2
 8001168:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800116a:	787b      	ldrb	r3, [r7, #1]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001170:	887a      	ldrh	r2, [r7, #2]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001176:	e003      	b.n	8001180 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	041a      	lsls	r2, r3, #16
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	611a      	str	r2, [r3, #16]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
	...

0800118c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fa58 	bl	8000660 <HAL_GPIO_EXTI_Callback>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40010400 	.word	0x40010400

080011bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011be:	b08b      	sub	sp, #44	; 0x2c
 80011c0:	af06      	add	r7, sp, #24
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e0ca      	b.n	8001368 <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d106      	bne.n	80011ec <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f004 fcac 	bl	8005b44 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2203      	movs	r2, #3
 80011f0:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 f8cf 	bl	800339c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	687e      	ldr	r6, [r7, #4]
 8001206:	466d      	mov	r5, sp
 8001208:	f106 0410 	add.w	r4, r6, #16
 800120c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	602b      	str	r3, [r5, #0]
 8001214:	1d33      	adds	r3, r6, #4
 8001216:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001218:	6838      	ldr	r0, [r7, #0]
 800121a:	f002 f895 	bl	8003348 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f002 f8d5 	bl	80033d4 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	e037      	b.n	80012a0 <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	015b      	lsls	r3, r3, #5
 8001236:	4413      	add	r3, r2
 8001238:	3329      	adds	r3, #41	; 0x29
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	b2d9      	uxtb	r1, r3
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	015b      	lsls	r3, r3, #5
 8001248:	4413      	add	r3, r2
 800124a:	3328      	adds	r3, #40	; 0x28
 800124c:	460a      	mov	r2, r1
 800124e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	b299      	uxth	r1, r3
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	015b      	lsls	r3, r3, #5
 800125a:	4413      	add	r3, r2
 800125c:	3334      	adds	r3, #52	; 0x34
 800125e:	460a      	mov	r2, r1
 8001260:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	015b      	lsls	r3, r3, #5
 8001268:	4413      	add	r3, r2
 800126a:	332b      	adds	r3, #43	; 0x2b
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	015b      	lsls	r3, r3, #5
 8001276:	4413      	add	r3, r2
 8001278:	3338      	adds	r3, #56	; 0x38
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	015b      	lsls	r3, r3, #5
 8001284:	4413      	add	r3, r2
 8001286:	333c      	adds	r3, #60	; 0x3c
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3302      	adds	r3, #2
 8001292:	015b      	lsls	r3, r3, #5
 8001294:	4413      	add	r3, r2
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3301      	adds	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b0e      	cmp	r3, #14
 80012a4:	d9c4      	bls.n	8001230 <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	e03c      	b.n	8001326 <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	015b      	lsls	r3, r3, #5
 80012b2:	4413      	add	r3, r2
 80012b4:	f203 2329 	addw	r3, r3, #553	; 0x229
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	b2d9      	uxtb	r1, r3
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	015b      	lsls	r3, r3, #5
 80012c6:	4413      	add	r3, r2
 80012c8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80012cc:	460a      	mov	r2, r1
 80012ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	b299      	uxth	r1, r3
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	015b      	lsls	r3, r3, #5
 80012da:	4413      	add	r3, r2
 80012dc:	3334      	adds	r3, #52	; 0x34
 80012de:	460a      	mov	r2, r1
 80012e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	015b      	lsls	r3, r3, #5
 80012e8:	4413      	add	r3, r2
 80012ea:	f203 232b 	addw	r3, r3, #555	; 0x22b
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	015b      	lsls	r3, r3, #5
 80012f8:	4413      	add	r3, r2
 80012fa:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	015b      	lsls	r3, r3, #5
 8001308:	4413      	add	r3, r2
 800130a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3312      	adds	r3, #18
 8001318:	015b      	lsls	r3, r3, #5
 800131a:	4413      	add	r3, r2
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3301      	adds	r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2b0e      	cmp	r3, #14
 800132a:	d9bf      	bls.n	80012ac <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	687e      	ldr	r6, [r7, #4]
 8001334:	466d      	mov	r5, sp
 8001336:	f106 0410 	add.w	r4, r6, #16
 800133a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	602b      	str	r3, [r5, #0]
 8001342:	1d33      	adds	r3, r6, #4
 8001344:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001346:	6838      	ldr	r0, [r7, #0]
 8001348:	f002 f850 	bl	80033ec <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f003 f83a 	bl	80043da <USB_DevDisconnect>
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001370 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800137e:	2b01      	cmp	r3, #1
 8001380:	d101      	bne.n	8001386 <HAL_PCD_Start+0x16>
 8001382:	2302      	movs	r3, #2
 8001384:	e016      	b.n	80013b4 <HAL_PCD_Start+0x44>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800138e:	2101      	movs	r1, #1
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f004 fede 	bl	8006152 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f003 f813 	bl	80043c6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 ffdf 	bl	8003368 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 f810 	bl	80043ee <USB_ReadInterrupts>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013d8:	d102      	bne.n	80013e0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fac4 	bl	8001968 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 f802 	bl	80043ee <USB_ReadInterrupts>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f4:	d112      	bne.n	800141c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001402:	b292      	uxth	r2, r2
 8001404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001408:	b292      	uxth	r2, r2
 800140a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f004 fc0d 	bl	8005c2e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001414:	2100      	movs	r1, #0
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f8d2 	bl	80015c0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f002 ffe4 	bl	80043ee <USB_ReadInterrupts>
 8001426:	4603      	mov	r3, r0
 8001428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001430:	d10b      	bne.n	800144a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800143e:	b292      	uxth	r2, r2
 8001440:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001444:	b292      	uxth	r2, r2
 8001446:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f002 ffcd 	bl	80043ee <USB_ReadInterrupts>
 8001454:	4603      	mov	r3, r0
 8001456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800145a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800145e:	d10b      	bne.n	8001478 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800146c:	b292      	uxth	r2, r2
 800146e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001472:	b292      	uxth	r2, r2
 8001474:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f002 ffb6 	bl	80043ee <USB_ReadInterrupts>
 8001482:	4603      	mov	r3, r0
 8001484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800148c:	d126      	bne.n	80014dc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800149a:	b292      	uxth	r2, r2
 800149c:	f022 0204 	bic.w	r2, r2, #4
 80014a0:	b292      	uxth	r2, r2
 80014a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80014b2:	b292      	uxth	r2, r2
 80014b4:	f022 0208 	bic.w	r2, r2, #8
 80014b8:	b292      	uxth	r2, r2
 80014ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f004 fbf2 	bl	8005ca8 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80014d0:	b292      	uxth	r2, r2
 80014d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014d6:	b292      	uxth	r2, r2
 80014d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 ff84 	bl	80043ee <USB_ReadInterrupts>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014f0:	d131      	bne.n	8001556 <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80014fe:	b292      	uxth	r2, r2
 8001500:	f042 0208 	orr.w	r2, r2, #8
 8001504:	b292      	uxth	r2, r2
 8001506:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001516:	b292      	uxth	r2, r2
 8001518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800151c:	b292      	uxth	r2, r2
 800151e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800152e:	b292      	uxth	r2, r2
 8001530:	f042 0204 	orr.w	r2, r2, #4
 8001534:	b292      	uxth	r2, r2
 8001536:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f002 ff55 	bl	80043ee <USB_ReadInterrupts>
 8001544:	4603      	mov	r3, r0
 8001546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800154e:	d002      	beq.n	8001556 <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f004 fb8f 	bl	8005c74 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f002 ff47 	bl	80043ee <USB_ReadInterrupts>
 8001560:	4603      	mov	r3, r0
 8001562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800156a:	d10e      	bne.n	800158a <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001578:	b292      	uxth	r2, r2
 800157a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800157e:	b292      	uxth	r2, r2
 8001580:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f004 fb44 	bl	8005c12 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f002 ff2d 	bl	80043ee <USB_ReadInterrupts>
 8001594:	4603      	mov	r3, r0
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800159e:	d10b      	bne.n	80015b8 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80015ac:	b292      	uxth	r2, r2
 80015ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015b2:	b292      	uxth	r2, r2
 80015b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_PCD_SetAddress+0x1a>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e013      	b.n	8001602 <HAL_PCD_SetAddress+0x42>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 fed4 	bl	80043a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	4608      	mov	r0, r1
 8001614:	4611      	mov	r1, r2
 8001616:	461a      	mov	r2, r3
 8001618:	4603      	mov	r3, r0
 800161a:	70fb      	strb	r3, [r7, #3]
 800161c:	460b      	mov	r3, r1
 800161e:	803b      	strh	r3, [r7, #0]
 8001620:	4613      	mov	r3, r2
 8001622:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 800162c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001630:	2b00      	cmp	r3, #0
 8001632:	da08      	bge.n	8001646 <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800163a:	015b      	lsls	r3, r3, #5
 800163c:	3328      	adds	r3, #40	; 0x28
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e008      	b.n	8001658 <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800164c:	015b      	lsls	r3, r3, #5
 800164e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800165e:	b2da      	uxtb	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	09db      	lsrs	r3, r3, #7
 800166c:	b2db      	uxtb	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8001674:	883a      	ldrh	r2, [r7, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	78ba      	ldrb	r2, [r7, #2]
 800167e:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_PCD_EP_Open+0x84>
 800168a:	2302      	movs	r3, #2
 800168c:	e00e      	b.n	80016ac <HAL_PCD_EP_Open+0xa2>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68f9      	ldr	r1, [r7, #12]
 800169c:	4618      	mov	r0, r3
 800169e:	f001 fec9 	bl	8003434 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 80016aa:	7afb      	ldrb	r3, [r7, #11]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 80016c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	da08      	bge.n	80016de <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016d2:	015b      	lsls	r3, r3, #5
 80016d4:	3328      	adds	r3, #40	; 0x28
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	e008      	b.n	80016f0 <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016e4:	015b      	lsls	r3, r3, #5
 80016e6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80016fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	09db      	lsrs	r3, r3, #7
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_PCD_EP_Close+0x66>
 8001716:	2302      	movs	r3, #2
 8001718:	e00e      	b.n	8001738 <HAL_PCD_EP_Close+0x84>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68f9      	ldr	r1, [r7, #12]
 8001728:	4618      	mov	r0, r3
 800172a:	f002 f945 	bl	80039b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	460b      	mov	r3, r1
 800174e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001754:	7afb      	ldrb	r3, [r7, #11]
 8001756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800175a:	015b      	lsls	r3, r3, #5
 800175c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2200      	movs	r2, #0
 8001776:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	2200      	movs	r2, #0
 800177c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 800177e:	7afb      	ldrb	r3, [r7, #11]
 8001780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001784:	b2da      	uxtb	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 800178a:	7afb      	ldrb	r3, [r7, #11]
 800178c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001790:	2b00      	cmp	r3, #0
 8001792:	d106      	bne.n	80017a2 <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6979      	ldr	r1, [r7, #20]
 800179a:	4618      	mov	r0, r3
 800179c:	f002 fa94 	bl	8003cc8 <USB_EPStartXfer>
 80017a0:	e005      	b.n	80017ae <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6979      	ldr	r1, [r7, #20]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 fa8d 	bl	8003cc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	460b      	mov	r3, r1
 80017c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80017cc:	7afb      	ldrb	r3, [r7, #11]
 80017ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017d2:	015b      	lsls	r3, r3, #5
 80017d4:	3328      	adds	r3, #40	; 0x28
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4413      	add	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2201      	movs	r2, #1
 80017f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 80017f4:	7afb      	ldrb	r3, [r7, #11]
 80017f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8001800:	7afb      	ldrb	r3, [r7, #11]
 8001802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6979      	ldr	r1, [r7, #20]
 8001810:	4618      	mov	r0, r3
 8001812:	f002 fa59 	bl	8003cc8 <USB_EPStartXfer>
 8001816:	e005      	b.n	8001824 <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6979      	ldr	r1, [r7, #20]
 800181e:	4618      	mov	r0, r3
 8001820:	f002 fa52 	bl	8003cc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 800183e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001842:	2b00      	cmp	r3, #0
 8001844:	da08      	bge.n	8001858 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800184c:	015b      	lsls	r3, r3, #5
 800184e:	3328      	adds	r3, #40	; 0x28
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	e006      	b.n	8001866 <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	015b      	lsls	r3, r3, #5
 800185c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2201      	movs	r2, #1
 800186a:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001872:	b2da      	uxtb	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	09db      	lsrs	r3, r3, #7
 8001880:	b2db      	uxtb	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_PCD_EP_SetStall+0x68>
 8001892:	2302      	movs	r3, #2
 8001894:	e01c      	b.n	80018d0 <HAL_PCD_EP_SetStall+0xa2>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68f9      	ldr	r1, [r7, #12]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 fc91 	bl	80041cc <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d108      	bne.n	80018c6 <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f002 fda5 	bl	8004410 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 80018e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	da08      	bge.n	8001902 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018f6:	015b      	lsls	r3, r3, #5
 80018f8:	3328      	adds	r3, #40	; 0x28
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	e006      	b.n	8001910 <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800191c:	b2da      	uxtb	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	09db      	lsrs	r3, r3, #7
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_PCD_EP_ClrStall+0x68>
 800193c:	2302      	movs	r3, #2
 800193e:	e00e      	b.n	800195e <HAL_PCD_EP_ClrStall+0x86>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68f9      	ldr	r1, [r7, #12]
 800194e:	4618      	mov	r0, r3
 8001950:	f002 fc9c 	bl	800428c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61bb      	str	r3, [r7, #24]
  uint16_t count = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	83fb      	strh	r3, [r7, #30]
  uint8_t epindex = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	75fb      	strb	r3, [r7, #23]
  __IO uint16_t wIstr = 0;  
 800197c:	2300      	movs	r3, #0
 800197e:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001984:	e308      	b.n	8001f98 <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001986:	89fb      	ldrh	r3, [r7, #14]
 8001988:	b29b      	uxth	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	75fb      	strb	r3, [r7, #23]
    
    if (epindex == 0)
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	2b00      	cmp	r3, #0
 8001996:	f040 812a 	bne.w	8001bee <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800199a:	89fb      	ldrh	r3, [r7, #14]
 800199c:	b29b      	uxth	r3, r3
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d14d      	bne.n	8001a42 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3328      	adds	r3, #40	; 0x28
 80019c2:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4413      	add	r3, r2
 80019d8:	3302      	adds	r3, #2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	441a      	add	r2, r3
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a00:	2100      	movs	r1, #0
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f004 f8ee 	bl	8005be4 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 82c1 	beq.w	8001f98 <PCD_EP_ISR_Handler+0x630>
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 82bc 	bne.w	8001f98 <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	b292      	uxth	r2, r2
 8001a34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a40:	e2aa      	b.n	8001f98 <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001a48:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a54:	89bb      	ldrh	r3, [r7, #12]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d031      	beq.n	8001ac4 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4413      	add	r3, r2
 8001a74:	3306      	adds	r3, #6
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	889a      	ldrh	r2, [r3, #4]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	f002 fd06 	bl	80044b2 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	b299      	uxth	r1, r3
 8001ab2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f004 f867 	bl	8005b90 <HAL_PCD_SetupStageCallback>
 8001ac2:	e269      	b.n	8001f98 <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ac4:	89bb      	ldrh	r3, [r7, #12]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f280 8264 	bge.w	8001f98 <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b299      	uxth	r1, r3
 8001adc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4413      	add	r3, r2
 8001afa:	3306      	adds	r3, #6
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d011      	beq.n	8001b40 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6959      	ldr	r1, [r3, #20]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	889a      	ldrh	r2, [r3, #4]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	f002 fcc0 	bl	80044b2 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	441a      	add	r2, r3
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b40:	2100      	movs	r1, #0
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f004 f836 	bl	8005bb4 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3306      	adds	r3, #6
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2b3e      	cmp	r3, #62	; 0x3e
 8001b68:	d918      	bls.n	8001b9c <PCD_EP_ISR_Handler+0x234>
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	83bb      	strh	r3, [r7, #28]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <PCD_EP_ISR_Handler+0x21c>
 8001b7e:	8bbb      	ldrh	r3, [r7, #28]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	83bb      	strh	r3, [r7, #28]
 8001b84:	8bbb      	ldrh	r3, [r7, #28]
 8001b86:	029b      	lsls	r3, r3, #10
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e012      	b.n	8001bc2 <PCD_EP_ISR_Handler+0x25a>
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	085b      	lsrs	r3, r3, #1
 8001ba2:	83bb      	strh	r3, [r7, #28]
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <PCD_EP_ISR_Handler+0x24e>
 8001bb0:	8bbb      	ldrh	r3, [r7, #28]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	83bb      	strh	r3, [r7, #28]
 8001bb6:	8bbb      	ldrh	r3, [r7, #28]
 8001bb8:	029b      	lsls	r3, r3, #10
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bd2:	b29c      	uxth	r4, r3
 8001bd4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001bd8:	b29c      	uxth	r4, r3
 8001bda:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001bde:	b29c      	uxth	r4, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b98      	ldr	r3, [pc, #608]	; (8001e48 <PCD_EP_ISR_Handler+0x4e0>)
 8001be6:	4323      	orrs	r3, r4
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	8013      	strh	r3, [r2, #0]
 8001bec:	e1d4      	b.n	8001f98 <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c00:	89bb      	ldrh	r3, [r7, #12]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f280 80d0 	bge.w	8001dac <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	7dfb      	ldrb	r3, [r7, #23]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	441a      	add	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	b299      	uxth	r1, r3
 8001c28:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c2c:	400b      	ands	r3, r1
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	015b      	lsls	r3, r3, #5
 8001c36:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	7a9b      	ldrb	r3, [r3, #10]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d122      	bne.n	8001c8e <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3306      	adds	r3, #6
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c72:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001c74:	8bfb      	ldrh	r3, [r7, #30]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d073      	beq.n	8001d62 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	6959      	ldr	r1, [r3, #20]
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	889a      	ldrh	r2, [r3, #4]
 8001c86:	8bfb      	ldrh	r3, [r7, #30]
 8001c88:	f002 fc13 	bl	80044b2 <USB_ReadPMA>
 8001c8c:	e069      	b.n	8001d62 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d022      	beq.n	8001cee <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cd2:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001cd4:	8bfb      	ldrh	r3, [r7, #30]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d02b      	beq.n	8001d32 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	6959      	ldr	r1, [r3, #20]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	88da      	ldrh	r2, [r3, #6]
 8001ce6:	8bfb      	ldrh	r3, [r7, #30]
 8001ce8:	f002 fbe3 	bl	80044b2 <USB_ReadPMA>
 8001cec:	e021      	b.n	8001d32 <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	3306      	adds	r3, #6
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d18:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001d1a:	8bfb      	ldrh	r3, [r7, #30]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6959      	ldr	r1, [r3, #20]
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	891a      	ldrh	r2, [r3, #8]
 8001d2c:	8bfb      	ldrh	r3, [r7, #30]
 8001d2e:	f002 fbc0 	bl	80044b2 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	441a      	add	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b299      	uxth	r1, r3
 8001d52:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001d56:	400b      	ands	r3, r1
 8001d58:	b299      	uxth	r1, r3
 8001d5a:	4b3c      	ldr	r3, [pc, #240]	; (8001e4c <PCD_EP_ISR_Handler+0x4e4>)
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	69da      	ldr	r2, [r3, #28]
 8001d66:	8bfb      	ldrh	r3, [r7, #30]
 8001d68:	441a      	add	r2, r3
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	8bfb      	ldrh	r3, [r7, #30]
 8001d74:	441a      	add	r2, r3
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <PCD_EP_ISR_Handler+0x424>
 8001d82:	8bfa      	ldrh	r2, [r7, #30]
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d206      	bcs.n	8001d9a <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f003 ff0e 	bl	8005bb4 <HAL_PCD_DataOutStageCallback>
 8001d98:	e008      	b.n	8001dac <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	7819      	ldrb	r1, [r3, #0]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fcca 	bl	8001740 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001dac:	89bb      	ldrh	r3, [r7, #12]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80ef 	beq.w	8001f98 <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	015b      	lsls	r3, r3, #5
 8001dbe:	3328      	adds	r3, #40	; 0x28
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	441a      	add	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	7a9b      	ldrb	r3, [r3, #10]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d12c      	bne.n	8001e50 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8083 	beq.w	8001f34 <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	6959      	ldr	r1, [r3, #20]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	889a      	ldrh	r2, [r3, #4]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f002 faf1 	bl	8004426 <USB_WritePMA>
 8001e44:	e076      	b.n	8001f34 <PCD_EP_ISR_Handler+0x5cc>
 8001e46:	bf00      	nop
 8001e48:	ffff8080 	.word	0xffff8080
 8001e4c:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d026      	beq.n	8001eb8 <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d031      	beq.n	8001f04 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6959      	ldr	r1, [r3, #20]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	88da      	ldrh	r2, [r3, #6]
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	f002 fab8 	bl	8004426 <USB_WritePMA>
 8001eb6:	e025      	b.n	8001f04 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	3306      	adds	r3, #6
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	6959      	ldr	r1, [r3, #20]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	891a      	ldrh	r2, [r3, #8]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	f002 fa91 	bl	8004426 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	441a      	add	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4619      	mov	r1, r3
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	b299      	uxth	r1, r3
 8001f24:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001f28:	400b      	ands	r3, r1
 8001f2a:	b299      	uxth	r1, r3
 8001f2c:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <PCD_EP_ISR_Handler+0x650>)
 8001f2e:	430b      	orrs	r3, r1
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	461a      	mov	r2, r3
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4413      	add	r3, r2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	441a      	add	r2, r3
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d106      	bne.n	8001f86 <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f003 fe30 	bl	8005be4 <HAL_PCD_DataInStageCallback>
 8001f84:	e008      	b.n	8001f98 <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	7819      	ldrb	r1, [r3, #0]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fc10 	bl	80017b8 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	81fa      	strh	r2, [r7, #14]
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f6ff acec 	blt.w	8001986 <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3724      	adds	r7, #36	; 0x24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	ffffc080 	.word	0xffffc080

08001fbc <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	817b      	strh	r3, [r7, #10]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001fd2:	897b      	ldrh	r3, [r7, #10]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001fdc:	897b      	ldrh	r3, [r7, #10]
 8001fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fe2:	015b      	lsls	r3, r3, #5
 8001fe4:	3328      	adds	r3, #40	; 0x28
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4413      	add	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	e006      	b.n	8001ffc <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fee:	897b      	ldrh	r3, [r7, #10]
 8001ff0:	015b      	lsls	r3, r3, #5
 8001ff2:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001ffc:	893b      	ldrh	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d107      	bne.n	8002012 <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2200      	movs	r2, #0
 8002006:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	b29a      	uxth	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	809a      	strh	r2, [r3, #4]
 8002010:	e00b      	b.n	800202a <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2201      	movs	r2, #1
 8002016:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	b29a      	uxth	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	0c1b      	lsrs	r3, r3, #16
 8002024:	b29a      	uxth	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
	...

08002038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 8087 	beq.w	8002160 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002052:	4b92      	ldr	r3, [pc, #584]	; (800229c <HAL_RCC_OscConfig+0x264>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b04      	cmp	r3, #4
 800205c:	d00c      	beq.n	8002078 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800205e:	4b8f      	ldr	r3, [pc, #572]	; (800229c <HAL_RCC_OscConfig+0x264>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b08      	cmp	r3, #8
 8002068:	d112      	bne.n	8002090 <HAL_RCC_OscConfig+0x58>
 800206a:	4b8c      	ldr	r3, [pc, #560]	; (800229c <HAL_RCC_OscConfig+0x264>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002076:	d10b      	bne.n	8002090 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	4b88      	ldr	r3, [pc, #544]	; (800229c <HAL_RCC_OscConfig+0x264>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d06c      	beq.n	800215e <HAL_RCC_OscConfig+0x126>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d168      	bne.n	800215e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e22d      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002098:	d106      	bne.n	80020a8 <HAL_RCC_OscConfig+0x70>
 800209a:	4a80      	ldr	r2, [pc, #512]	; (800229c <HAL_RCC_OscConfig+0x264>)
 800209c:	4b7f      	ldr	r3, [pc, #508]	; (800229c <HAL_RCC_OscConfig+0x264>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e02e      	b.n	8002106 <HAL_RCC_OscConfig+0xce>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10c      	bne.n	80020ca <HAL_RCC_OscConfig+0x92>
 80020b0:	4a7a      	ldr	r2, [pc, #488]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80020b2:	4b7a      	ldr	r3, [pc, #488]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4a77      	ldr	r2, [pc, #476]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80020be:	4b77      	ldr	r3, [pc, #476]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	e01d      	b.n	8002106 <HAL_RCC_OscConfig+0xce>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d2:	d10c      	bne.n	80020ee <HAL_RCC_OscConfig+0xb6>
 80020d4:	4a71      	ldr	r2, [pc, #452]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80020d6:	4b71      	ldr	r3, [pc, #452]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4a6e      	ldr	r2, [pc, #440]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80020e2:	4b6e      	ldr	r3, [pc, #440]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	e00b      	b.n	8002106 <HAL_RCC_OscConfig+0xce>
 80020ee:	4a6b      	ldr	r2, [pc, #428]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80020f0:	4b6a      	ldr	r3, [pc, #424]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4a68      	ldr	r2, [pc, #416]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80020fc:	4b67      	ldr	r3, [pc, #412]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002104:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d013      	beq.n	8002136 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe fcd7 	bl	8000ac0 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002116:	f7fe fcd3 	bl	8000ac0 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b64      	cmp	r3, #100	; 0x64
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e1e1      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002128:	4b5c      	ldr	r3, [pc, #368]	; (800229c <HAL_RCC_OscConfig+0x264>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0xde>
 8002134:	e014      	b.n	8002160 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7fe fcc3 	bl	8000ac0 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800213e:	f7fe fcbf 	bl	8000ac0 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	; 0x64
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e1cd      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002150:	4b52      	ldr	r3, [pc, #328]	; (800229c <HAL_RCC_OscConfig+0x264>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f0      	bne.n	800213e <HAL_RCC_OscConfig+0x106>
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d063      	beq.n	8002234 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800216c:	4b4b      	ldr	r3, [pc, #300]	; (800229c <HAL_RCC_OscConfig+0x264>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00b      	beq.n	8002190 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002178:	4b48      	ldr	r3, [pc, #288]	; (800229c <HAL_RCC_OscConfig+0x264>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b08      	cmp	r3, #8
 8002182:	d11c      	bne.n	80021be <HAL_RCC_OscConfig+0x186>
 8002184:	4b45      	ldr	r3, [pc, #276]	; (800229c <HAL_RCC_OscConfig+0x264>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d116      	bne.n	80021be <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002190:	4b42      	ldr	r3, [pc, #264]	; (800229c <HAL_RCC_OscConfig+0x264>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_OscConfig+0x170>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e1a1      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	493c      	ldr	r1, [pc, #240]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80021aa:	4b3c      	ldr	r3, [pc, #240]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021bc:	e03a      	b.n	8002234 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d020      	beq.n	8002208 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c6:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <HAL_RCC_OscConfig+0x268>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe fc78 	bl	8000ac0 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d4:	f7fe fc74 	bl	8000ac0 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e182      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f2:	492a      	ldr	r1, [pc, #168]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <HAL_RCC_OscConfig+0x264>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
 8002206:	e015      	b.n	8002234 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <HAL_RCC_OscConfig+0x268>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7fe fc57 	bl	8000ac0 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002216:	f7fe fc53 	bl	8000ac0 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e161      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002228:	4b1c      	ldr	r3, [pc, #112]	; (800229c <HAL_RCC_OscConfig+0x264>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d039      	beq.n	80022b4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d019      	beq.n	800227c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002248:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224e:	f7fe fc37 	bl	8000ac0 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002256:	f7fe fc33 	bl	8000ac0 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e141      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_RCC_OscConfig+0x264>)
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002274:	2001      	movs	r0, #1
 8002276:	f000 facb 	bl	8002810 <RCC_Delay>
 800227a:	e01b      	b.n	80022b4 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7fe fc1d 	bl	8000ac0 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002288:	e00e      	b.n	80022a8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228a:	f7fe fc19 	bl	8000ac0 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d907      	bls.n	80022a8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e127      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
 800229c:	40021000 	.word	0x40021000
 80022a0:	42420000 	.word	0x42420000
 80022a4:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a8:	4b92      	ldr	r3, [pc, #584]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1ea      	bne.n	800228a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80a6 	beq.w	800240e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c6:	4b8b      	ldr	r3, [pc, #556]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10d      	bne.n	80022ee <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	4a88      	ldr	r2, [pc, #544]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 80022d4:	4b87      	ldr	r3, [pc, #540]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	61d3      	str	r3, [r2, #28]
 80022de:	4b85      	ldr	r3, [pc, #532]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022ea:	2301      	movs	r3, #1
 80022ec:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	4b82      	ldr	r3, [pc, #520]	; (80024f8 <HAL_RCC_OscConfig+0x4c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d118      	bne.n	800232c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fa:	4a7f      	ldr	r2, [pc, #508]	; (80024f8 <HAL_RCC_OscConfig+0x4c0>)
 80022fc:	4b7e      	ldr	r3, [pc, #504]	; (80024f8 <HAL_RCC_OscConfig+0x4c0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002304:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002306:	f7fe fbdb 	bl	8000ac0 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7fe fbd7 	bl	8000ac0 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b64      	cmp	r3, #100	; 0x64
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0e5      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	4b75      	ldr	r3, [pc, #468]	; (80024f8 <HAL_RCC_OscConfig+0x4c0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x30a>
 8002334:	4a6f      	ldr	r2, [pc, #444]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 8002336:	4b6f      	ldr	r3, [pc, #444]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6213      	str	r3, [r2, #32]
 8002340:	e02d      	b.n	800239e <HAL_RCC_OscConfig+0x366>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x32c>
 800234a:	4a6a      	ldr	r2, [pc, #424]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 800234c:	4b69      	ldr	r3, [pc, #420]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	6213      	str	r3, [r2, #32]
 8002356:	4a67      	ldr	r2, [pc, #412]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 8002358:	4b66      	ldr	r3, [pc, #408]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	6213      	str	r3, [r2, #32]
 8002362:	e01c      	b.n	800239e <HAL_RCC_OscConfig+0x366>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b05      	cmp	r3, #5
 800236a:	d10c      	bne.n	8002386 <HAL_RCC_OscConfig+0x34e>
 800236c:	4a61      	ldr	r2, [pc, #388]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 800236e:	4b61      	ldr	r3, [pc, #388]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f043 0304 	orr.w	r3, r3, #4
 8002376:	6213      	str	r3, [r2, #32]
 8002378:	4a5e      	ldr	r2, [pc, #376]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 800237a:	4b5e      	ldr	r3, [pc, #376]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6213      	str	r3, [r2, #32]
 8002384:	e00b      	b.n	800239e <HAL_RCC_OscConfig+0x366>
 8002386:	4a5b      	ldr	r2, [pc, #364]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 8002388:	4b5a      	ldr	r3, [pc, #360]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 8002394:	4b57      	ldr	r3, [pc, #348]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d015      	beq.n	80023d2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7fe fb8b 	bl	8000ac0 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7fe fb87 	bl	8000ac0 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e093      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c4:	4b4b      	ldr	r3, [pc, #300]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ee      	beq.n	80023ae <HAL_RCC_OscConfig+0x376>
 80023d0:	e014      	b.n	80023fc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7fe fb75 	bl	8000ac0 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe fb71 	bl	8000ac0 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e07d      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f0:	4b40      	ldr	r3, [pc, #256]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1ee      	bne.n	80023da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d105      	bne.n	800240e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002402:	4a3c      	ldr	r2, [pc, #240]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 8002404:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d069      	beq.n	80024ea <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002416:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b08      	cmp	r3, #8
 8002420:	d061      	beq.n	80024e6 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d146      	bne.n	80024b8 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242a:	4b34      	ldr	r3, [pc, #208]	; (80024fc <HAL_RCC_OscConfig+0x4c4>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7fe fb46 	bl	8000ac0 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe fb42 	bl	8000ac0 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e050      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244a:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245e:	d108      	bne.n	8002472 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002460:	4924      	ldr	r1, [pc, #144]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002472:	4820      	ldr	r0, [pc, #128]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 8002474:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a19      	ldr	r1, [r3, #32]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	430b      	orrs	r3, r1
 8002486:	4313      	orrs	r3, r2
 8002488:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <HAL_RCC_OscConfig+0x4c4>)
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7fe fb16 	bl	8000ac0 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002498:	f7fe fb12 	bl	8000ac0 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e020      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x460>
 80024b6:	e018      	b.n	80024ea <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b8:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7fe faff 	bl	8000ac0 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c6:	f7fe fafb 	bl	8000ac0 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e009      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_RCC_OscConfig+0x4bc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x48e>
 80024e4:	e001      	b.n	80024ea <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40007000 	.word	0x40007000
 80024fc:	42420060 	.word	0x42420060

08002500 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800250e:	4b72      	ldr	r3, [pc, #456]	; (80026d8 <HAL_RCC_ClockConfig+0x1d8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0207 	and.w	r2, r3, #7
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d210      	bcs.n	800253e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251c:	496e      	ldr	r1, [pc, #440]	; (80026d8 <HAL_RCC_ClockConfig+0x1d8>)
 800251e:	4b6e      	ldr	r3, [pc, #440]	; (80026d8 <HAL_RCC_ClockConfig+0x1d8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0207 	bic.w	r2, r3, #7
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800252c:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <HAL_RCC_ClockConfig+0x1d8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0207 	and.w	r2, r3, #7
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d001      	beq.n	800253e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0c8      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d008      	beq.n	800255c <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254a:	4964      	ldr	r1, [pc, #400]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 800254c:	4b63      	ldr	r3, [pc, #396]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d06a      	beq.n	800263e <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002570:	4b5a      	ldr	r3, [pc, #360]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d115      	bne.n	80025a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0a7      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d107      	bne.n	8002598 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002588:	4b54      	ldr	r3, [pc, #336]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e09b      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	4b50      	ldr	r3, [pc, #320]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e093      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a8:	494c      	ldr	r1, [pc, #304]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 80025aa:	4b4c      	ldr	r3, [pc, #304]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f023 0203 	bic.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ba:	f7fe fa81 	bl	8000ac0 <HAL_GetTick>
 80025be:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d112      	bne.n	80025ee <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ca:	f7fe fa79 	bl	8000ac0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e077      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e0:	4b3e      	ldr	r3, [pc, #248]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d1ee      	bne.n	80025ca <HAL_RCC_ClockConfig+0xca>
 80025ec:	e027      	b.n	800263e <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d11d      	bne.n	8002632 <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f6:	e00a      	b.n	800260e <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f8:	f7fe fa62 	bl	8000ac0 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	; 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e060      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b08      	cmp	r3, #8
 8002618:	d1ee      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xf8>
 800261a:	e010      	b.n	800263e <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261c:	f7fe fa50 	bl	8000ac0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e04e      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002632:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ee      	bne.n	800261c <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800263e:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <HAL_RCC_ClockConfig+0x1d8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0207 	and.w	r2, r3, #7
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d910      	bls.n	800266e <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264c:	4922      	ldr	r1, [pc, #136]	; (80026d8 <HAL_RCC_ClockConfig+0x1d8>)
 800264e:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <HAL_RCC_ClockConfig+0x1d8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 0207 	bic.w	r2, r3, #7
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800265c:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <HAL_RCC_ClockConfig+0x1d8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0207 	and.w	r2, r3, #7
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d001      	beq.n	800266e <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e030      	b.n	80026d0 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d008      	beq.n	800268c <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800267a:	4918      	ldr	r1, [pc, #96]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 800267c:	4b17      	ldr	r3, [pc, #92]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d009      	beq.n	80026ac <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002698:	4910      	ldr	r1, [pc, #64]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ac:	f000 f81c 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 80026b0:	4601      	mov	r1, r0
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_RCC_ClockConfig+0x1dc>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	4a08      	ldr	r2, [pc, #32]	; (80026e0 <HAL_RCC_ClockConfig+0x1e0>)
 80026be:	5cd3      	ldrb	r3, [r2, r3]
 80026c0:	fa21 f303 	lsr.w	r3, r1, r3
 80026c4:	4a07      	ldr	r2, [pc, #28]	; (80026e4 <HAL_RCC_ClockConfig+0x1e4>)
 80026c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7fe f9b7 	bl	8000a3c <HAL_InitTick>
  
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40022000 	.word	0x40022000
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08007474 	.word	0x08007474
 80026e4:	20000254 	.word	0x20000254

080026e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e8:	b490      	push	{r4, r7}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026ee:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026f0:	1d3c      	adds	r4, r7, #4
 80026f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026f8:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_RCC_GetSysClockFreq+0xb4>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002712:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b04      	cmp	r3, #4
 8002720:	d002      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x40>
 8002722:	2b08      	cmp	r3, #8
 8002724:	d003      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x46>
 8002726:	e02d      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002728:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800272a:	623b      	str	r3, [r7, #32]
      break;
 800272c:	e02d      	b.n	800278a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	0c9b      	lsrs	r3, r3, #18
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800273a:	4413      	add	r3, r2
 800273c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002740:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d013      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0c5b      	lsrs	r3, r3, #17
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800275a:	4413      	add	r3, r2
 800275c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002760:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002766:	fb02 f203 	mul.w	r2, r2, r3
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
 8002772:	e004      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	4a0c      	ldr	r2, [pc, #48]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002778:	fb02 f303 	mul.w	r3, r2, r3
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	623b      	str	r3, [r7, #32]
      break;
 8002782:	e002      	b.n	800278a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002784:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002786:	623b      	str	r3, [r7, #32]
      break;
 8002788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800278a:	6a3b      	ldr	r3, [r7, #32]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3728      	adds	r7, #40	; 0x28
 8002790:	46bd      	mov	sp, r7
 8002792:	bc90      	pop	{r4, r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	080072c0 	.word	0x080072c0
 800279c:	080072d0 	.word	0x080072d0
 80027a0:	40021000 	.word	0x40021000
 80027a4:	007a1200 	.word	0x007a1200
 80027a8:	003d0900 	.word	0x003d0900

080027ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b0:	4b02      	ldr	r3, [pc, #8]	; (80027bc <HAL_RCC_GetHCLKFreq+0x10>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	20000254 	.word	0x20000254

080027c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027c4:	f7ff fff2 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027c8:	4601      	mov	r1, r0
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	0a1b      	lsrs	r3, r3, #8
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4a03      	ldr	r2, [pc, #12]	; (80027e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d6:	5cd3      	ldrb	r3, [r2, r3]
 80027d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027dc:	4618      	mov	r0, r3
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08007484 	.word	0x08007484

080027e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027ec:	f7ff ffde 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027f0:	4601      	mov	r1, r0
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	0adb      	lsrs	r3, r3, #11
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4a03      	ldr	r2, [pc, #12]	; (800280c <HAL_RCC_GetPCLK2Freq+0x24>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	08007484 	.word	0x08007484

08002810 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <RCC_Delay+0x34>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <RCC_Delay+0x38>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	0a5b      	lsrs	r3, r3, #9
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	fb02 f303 	mul.w	r3, r2, r3
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1e5a      	subs	r2, r3, #1
 8002832:	60fa      	str	r2, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f9      	bne.n	800282c <RCC_Delay+0x1c>
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000254 	.word	0x20000254
 8002848:	10624dd3 	.word	0x10624dd3

0800284c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d07d      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002868:	2300      	movs	r3, #0
 800286a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286c:	4b4f      	ldr	r3, [pc, #316]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10d      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002878:	4a4c      	ldr	r2, [pc, #304]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287a:	4b4c      	ldr	r3, [pc, #304]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002882:	61d3      	str	r3, [r2, #28]
 8002884:	4b49      	ldr	r3, [pc, #292]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002890:	2301      	movs	r3, #1
 8002892:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	4b46      	ldr	r3, [pc, #280]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d118      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a0:	4a43      	ldr	r2, [pc, #268]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028a2:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ac:	f7fe f908 	bl	8000ac0 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b2:	e008      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b4:	f7fe f904 	bl	8000ac0 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e06d      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c6:	4b3a      	ldr	r3, [pc, #232]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028d2:	4b36      	ldr	r3, [pc, #216]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028da:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d02e      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d027      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028f0:	4b2e      	ldr	r3, [pc, #184]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002900:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002906:	4a29      	ldr	r2, [pc, #164]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d014      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7fe f8d3 	bl	8000ac0 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	e00a      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7fe f8cf 	bl	8000ac0 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e036      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ee      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002940:	491a      	ldr	r1, [pc, #104]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4313      	orrs	r3, r2
 8002950:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d105      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002962:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002970:	490e      	ldr	r1, [pc, #56]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800298e:	4907      	ldr	r1, [pc, #28]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40007000 	.word	0x40007000
 80029b4:	42420440 	.word	0x42420440

080029b8 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e03f      	b.n	8002a4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f002 ffdc 	bl	800599c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2224      	movs	r2, #36	; 0x24
 80029e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	68d2      	ldr	r2, [r2, #12]
 80029f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029fa:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fb8b 	bl	8003118 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	6912      	ldr	r2, [r2, #16]
 8002a0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	6952      	ldr	r2, [r2, #20]
 8002a1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a20:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	68d2      	ldr	r2, [r2, #12]
 8002a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a30:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b088      	sub	sp, #32
 8002a56:	af02      	add	r7, sp, #8
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	f040 8082 	bne.w	8002b78 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL) || (Size == 0U))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_UART_Transmit+0x2e>
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e07a      	b.n	8002b7a <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_UART_Transmit+0x40>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e073      	b.n	8002b7a <HAL_UART_Transmit+0x128>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2221      	movs	r2, #33	; 0x21
 8002aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002aa8:	f7fe f80a 	bl	8000ac0 <HAL_GetTick>
 8002aac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	88fa      	ldrh	r2, [r7, #6]
 8002ab2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	88fa      	ldrh	r2, [r7, #6]
 8002ab8:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002aba:	e041      	b.n	8002b40 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad2:	d121      	bne.n	8002b18 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f9b2 	bl	8002e48 <UART_WaitOnFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e045      	b.n	8002b7a <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	8812      	ldrh	r2, [r2, #0]
 8002afa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002afe:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d103      	bne.n	8002b10 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	e017      	b.n	8002b40 <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData +=1U;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	3301      	adds	r3, #1
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	e013      	b.n	8002b40 <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f990 	bl	8002e48 <UART_WaitOnFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e023      	b.n	8002b7a <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1c59      	adds	r1, r3, #1
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1b8      	bne.n	8002abc <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2200      	movs	r2, #0
 8002b52:	2140      	movs	r1, #64	; 0x40
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f977 	bl	8002e48 <UART_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e00a      	b.n	8002b7a <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e000      	b.n	8002b7a <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8002b78:	2302      	movs	r3, #2
  }
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d140      	bne.n	8002c1e <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <HAL_UART_Receive_IT+0x26>
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e039      	b.n	8002c20 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Receive_IT+0x38>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e032      	b.n	8002c20 <HAL_UART_Receive_IT+0x9e>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	88fa      	ldrh	r2, [r7, #6]
 8002bcc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2222      	movs	r2, #34	; 0x22
 8002bde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	68d2      	ldr	r2, [r2, #12]
 8002bf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	6952      	ldr	r2, [r2, #20]
 8002c04:	f042 0201 	orr.w	r2, r2, #1
 8002c08:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	68d2      	ldr	r2, [r2, #12]
 8002c14:	f042 0220 	orr.w	r2, r2, #32
 8002c18:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
  }
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_UART_IRQHandler+0x52>
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f9cd 	bl	8003016 <UART_Receive_IT>
      return;
 8002c7c:	e0cc      	b.n	8002e18 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80ab 	beq.w	8002ddc <HAL_UART_IRQHandler+0x1b0>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_UART_IRQHandler+0x70>
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80a0 	beq.w	8002ddc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_UART_IRQHandler+0x90>
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb4:	f043 0201 	orr.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_UART_IRQHandler+0xb0>
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	f043 0202 	orr.w	r2, r3, #2
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_UART_IRQHandler+0xd0>
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf4:	f043 0204 	orr.w	r2, r3, #4
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_UART_IRQHandler+0xf0>
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	f043 0208 	orr.w	r2, r3, #8
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d078      	beq.n	8002e16 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d007      	beq.n	8002d3e <HAL_UART_IRQHandler+0x112>
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f96c 	bl	8003016 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf14      	ite	ne
 8002d4c:	2301      	movne	r3, #1
 8002d4e:	2300      	moveq	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <HAL_UART_IRQHandler+0x13a>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d031      	beq.n	8002dca <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f8b8 	bl	8002edc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d023      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	6952      	ldr	r2, [r2, #20]
 8002d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d88:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d013      	beq.n	8002dba <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d96:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <HAL_UART_IRQHandler+0x1f4>)
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd ffea 	bl	8000d78 <HAL_DMA_Abort_IT>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d016      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002db4:	4610      	mov	r0, r2
 8002db6:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db8:	e00e      	b.n	8002dd8 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f83b 	bl	8002e36 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	e00a      	b.n	8002dd8 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f837 	bl	8002e36 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc8:	e006      	b.n	8002dd8 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f833 	bl	8002e36 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002dd6:	e01e      	b.n	8002e16 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	bf00      	nop
    return;
 8002dda:	e01c      	b.n	8002e16 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_UART_IRQHandler+0x1cc>
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f8a4 	bl	8002f3e <UART_Transmit_IT>
    return;
 8002df6:	e00f      	b.n	8002e18 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_UART_IRQHandler+0x1ec>
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f8ea 	bl	8002fe6 <UART_EndTransmit_IT>
    return;
 8002e12:	bf00      	nop
 8002e14:	e000      	b.n	8002e18 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002e16:	bf00      	nop
  }
}
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	08002f17 	.word	0x08002f17

08002e24 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr

08002e36 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr

08002e48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	4613      	mov	r3, r2
 8002e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002e58:	e02c      	b.n	8002eb4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d028      	beq.n	8002eb4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e68:	f7fd fe2a 	bl	8000ac0 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	1ad2      	subs	r2, r2, r3
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d91d      	bls.n	8002eb4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	68d2      	ldr	r2, [r2, #12]
 8002e82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	6952      	ldr	r2, [r2, #20]
 8002e92:	f022 0201 	bic.w	r2, r2, #1
 8002e96:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e00f      	b.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	401a      	ands	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d0c3      	beq.n	8002e5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	68d2      	ldr	r2, [r2, #12]
 8002eee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ef2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	6952      	ldr	r2, [r2, #20]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7ff ff80 	bl	8002e36 <HAL_UART_ErrorCallback>
}
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b21      	cmp	r3, #33	; 0x21
 8002f50:	d143      	bne.n	8002fda <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	d119      	bne.n	8002f90 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	8812      	ldrh	r2, [r2, #0]
 8002f6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f6e:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	1c9a      	adds	r2, r3, #2
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	621a      	str	r2, [r3, #32]
 8002f82:	e00e      	b.n	8002fa2 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	621a      	str	r2, [r3, #32]
 8002f8e:	e008      	b.n	8002fa2 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	1c58      	adds	r0, r3, #1
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	6208      	str	r0, [r1, #32]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10f      	bne.n	8002fd6 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	68d2      	ldr	r2, [r2, #12]
 8002fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	68d2      	ldr	r2, [r2, #12]
 8002fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e000      	b.n	8002fdc <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002fda:	2302      	movs	r3, #2
  }
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	68d2      	ldr	r2, [r2, #12]
 8002ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffc:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ff0c 	bl	8002e24 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b22      	cmp	r3, #34	; 0x22
 8003028:	d171      	bne.n	800310e <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003032:	d123      	bne.n	800307c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10e      	bne.n	8003060 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	b29b      	uxth	r3, r3
 800304a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	1c9a      	adds	r2, r3, #2
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	629a      	str	r2, [r3, #40]	; 0x28
 800305e:	e029      	b.n	80030b4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	b29b      	uxth	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
 800307a:	e01b      	b.n	80030b4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	1c59      	adds	r1, r3, #1
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6291      	str	r1, [r2, #40]	; 0x28
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	6852      	ldr	r2, [r2, #4]
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e00c      	b.n	80030b4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	1c59      	adds	r1, r3, #1
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6291      	str	r1, [r2, #40]	; 0x28
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	6852      	ldr	r2, [r2, #4]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29b      	uxth	r3, r3
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4619      	mov	r1, r3
 80030c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d120      	bne.n	800310a <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	68d2      	ldr	r2, [r2, #12]
 80030d2:	f022 0220 	bic.w	r2, r2, #32
 80030d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	68d2      	ldr	r2, [r2, #12]
 80030e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030e6:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	6952      	ldr	r2, [r2, #20]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f002 fbc1 	bl	8005888 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e002      	b.n	8003110 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	e000      	b.n	8003110 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800310e:	2302      	movs	r3, #2
  }
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	6912      	ldr	r2, [r2, #16]
 800312e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68d2      	ldr	r2, [r2, #12]
 8003136:	430a      	orrs	r2, r1
 8003138:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800315e:	f023 030c 	bic.w	r3, r3, #12
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	430b      	orrs	r3, r1
 8003166:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	6952      	ldr	r2, [r2, #20]
 8003172:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6992      	ldr	r2, [r2, #24]
 800317a:	430a      	orrs	r2, r1
 800317c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a6f      	ldr	r2, [pc, #444]	; (8003340 <UART_SetConfig+0x228>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d16b      	bne.n	8003260 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681c      	ldr	r4, [r3, #0]
 800318c:	f7ff fb2c 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 8003190:	4602      	mov	r2, r0
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	009a      	lsls	r2, r3, #2
 800319a:	441a      	add	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a6:	4a67      	ldr	r2, [pc, #412]	; (8003344 <UART_SetConfig+0x22c>)
 80031a8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	011d      	lsls	r5, r3, #4
 80031b0:	f7ff fb1a 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	009a      	lsls	r2, r3, #2
 80031be:	441a      	add	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80031ca:	f7ff fb0d 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 80031ce:	4602      	mov	r2, r0
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009a      	lsls	r2, r3, #2
 80031d8:	441a      	add	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	4a57      	ldr	r2, [pc, #348]	; (8003344 <UART_SetConfig+0x22c>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2264      	movs	r2, #100	; 0x64
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	1af3      	subs	r3, r6, r3
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	3332      	adds	r3, #50	; 0x32
 80031f8:	4a52      	ldr	r2, [pc, #328]	; (8003344 <UART_SetConfig+0x22c>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003204:	441d      	add	r5, r3
 8003206:	f7ff faef 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 800320a:	4602      	mov	r2, r0
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009a      	lsls	r2, r3, #2
 8003214:	441a      	add	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003220:	f7ff fae2 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 8003224:	4602      	mov	r2, r0
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	009a      	lsls	r2, r3, #2
 800322e:	441a      	add	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	fbb2 f3f3 	udiv	r3, r2, r3
 800323a:	4a42      	ldr	r2, [pc, #264]	; (8003344 <UART_SetConfig+0x22c>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	2264      	movs	r2, #100	; 0x64
 8003244:	fb02 f303 	mul.w	r3, r2, r3
 8003248:	1af3      	subs	r3, r6, r3
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	3332      	adds	r3, #50	; 0x32
 800324e:	4a3d      	ldr	r2, [pc, #244]	; (8003344 <UART_SetConfig+0x22c>)
 8003250:	fba2 2303 	umull	r2, r3, r2, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	442b      	add	r3, r5
 800325c:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800325e:	e06a      	b.n	8003336 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681c      	ldr	r4, [r3, #0]
 8003264:	f7ff faac 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8003268:	4602      	mov	r2, r0
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	009a      	lsls	r2, r3, #2
 8003272:	441a      	add	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	fbb2 f3f3 	udiv	r3, r2, r3
 800327e:	4a31      	ldr	r2, [pc, #196]	; (8003344 <UART_SetConfig+0x22c>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	011d      	lsls	r5, r3, #4
 8003288:	f7ff fa9a 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 800328c:	4602      	mov	r2, r0
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	009a      	lsls	r2, r3, #2
 8003296:	441a      	add	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	fbb2 f6f3 	udiv	r6, r2, r3
 80032a2:	f7ff fa8d 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 80032a6:	4602      	mov	r2, r0
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009a      	lsls	r2, r3, #2
 80032b0:	441a      	add	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032bc:	4a21      	ldr	r2, [pc, #132]	; (8003344 <UART_SetConfig+0x22c>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	2264      	movs	r2, #100	; 0x64
 80032c6:	fb02 f303 	mul.w	r3, r2, r3
 80032ca:	1af3      	subs	r3, r6, r3
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	3332      	adds	r3, #50	; 0x32
 80032d0:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <UART_SetConfig+0x22c>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032dc:	441d      	add	r5, r3
 80032de:	f7ff fa6f 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 80032e2:	4602      	mov	r2, r0
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009a      	lsls	r2, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80032f8:	f7ff fa62 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009a      	lsls	r2, r3, #2
 8003306:	441a      	add	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	4a0c      	ldr	r2, [pc, #48]	; (8003344 <UART_SetConfig+0x22c>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	2264      	movs	r2, #100	; 0x64
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	1af3      	subs	r3, r6, r3
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	3332      	adds	r3, #50	; 0x32
 8003326:	4a07      	ldr	r2, [pc, #28]	; (8003344 <UART_SetConfig+0x22c>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	442b      	add	r3, r5
 8003334:	60a3      	str	r3, [r4, #8]
}
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333e:	bf00      	nop
 8003340:	40013800 	.word	0x40013800
 8003344:	51eb851f 	.word	0x51eb851f

08003348 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003348:	b084      	sub	sp, #16
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	f107 0014 	add.w	r0, r7, #20
 8003356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	b004      	add	sp, #16
 8003366:	4770      	bx	lr

08003368 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8003374:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003378:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	b29b      	uxth	r3, r3
 8003386:	4313      	orrs	r3, r2
 8003388:	b29a      	uxth	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 80033a8:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 80033ac:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	b29b      	uxth	r3, r3
 80033be:	4013      	ands	r3, r2
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80033ec:	b084      	sub	sp, #16
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	f107 0014 	add.w	r0, r7, #20
 80033fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ffa2 	bl	8003368 <USB_EnableGlobalInt>
    
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003430:	b004      	add	sp, #16
 8003432:	4770      	bx	lr

08003434 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003434:	b490      	push	{r4, r7}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	78db      	ldrb	r3, [r3, #3]
 8003442:	2b03      	cmp	r3, #3
 8003444:	d85f      	bhi.n	8003506 <USB_ActivateEndpoint+0xd2>
 8003446:	a201      	add	r2, pc, #4	; (adr r2, 800344c <USB_ActivateEndpoint+0x18>)
 8003448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344c:	0800345d 	.word	0x0800345d
 8003450:	080034db 	.word	0x080034db
 8003454:	08003489 	.word	0x08003489
 8003458:	080034af 	.word	0x080034af
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	441a      	add	r2, r3
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347c:	b29b      	uxth	r3, r3
 800347e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003482:	b29b      	uxth	r3, r3
 8003484:	8013      	strh	r3, [r2, #0]
    break;
 8003486:	e03f      	b.n	8003508 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	441a      	add	r2, r3
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80034a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	8013      	strh	r3, [r2, #0]
    break;
 80034ac:	e02c      	b.n	8003508 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	441a      	add	r2, r3
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	8013      	strh	r3, [r2, #0]
    break;
 80034d8:	e016      	b.n	8003508 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	441a      	add	r2, r3
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80034f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003500:	b29b      	uxth	r3, r3
 8003502:	8013      	strh	r3, [r2, #0]
    break;
 8003504:	e000      	b.n	8003508 <USB_ActivateEndpoint+0xd4>
  default:
      break;
 8003506:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b299      	uxth	r1, r3
 8003520:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003524:	400b      	ands	r3, r1
 8003526:	b299      	uxth	r1, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	b29b      	uxth	r3, r3
 800352e:	430b      	orrs	r3, r1
 8003530:	b299      	uxth	r1, r3
 8003532:	4b75      	ldr	r3, [pc, #468]	; (8003708 <USB_ActivateEndpoint+0x2d4>)
 8003534:	430b      	orrs	r3, r1
 8003536:	b29b      	uxth	r3, r3
 8003538:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	7a9b      	ldrb	r3, [r3, #10]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f040 80e8 	bne.w	8003714 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	785b      	ldrb	r3, [r3, #1]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d04c      	beq.n	80035e6 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003552:	b29b      	uxth	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	005a      	lsls	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003568:	461a      	mov	r2, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	889b      	ldrh	r3, [r3, #4]
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	b29b      	uxth	r3, r3
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d013      	beq.n	80035b4 <USB_ActivateEndpoint+0x180>
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	441a      	add	r2, r3
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b299      	uxth	r1, r3
 80035a4:	f640 730f 	movw	r3, #3855	; 0xf0f
 80035a8:	400b      	ands	r3, r1
 80035aa:	b299      	uxth	r1, r3
 80035ac:	4b57      	ldr	r3, [pc, #348]	; (800370c <USB_ActivateEndpoint+0x2d8>)
 80035ae:	430b      	orrs	r3, r1
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ca:	b29c      	uxth	r4, r3
 80035cc:	f084 0320 	eor.w	r3, r4, #32
 80035d0:	b29c      	uxth	r4, r3
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	441a      	add	r2, r3
 80035dc:	4b4a      	ldr	r3, [pc, #296]	; (8003708 <USB_ActivateEndpoint+0x2d4>)
 80035de:	4323      	orrs	r3, r4
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	8013      	strh	r3, [r2, #0]
 80035e4:	e1d9      	b.n	800399a <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	3304      	adds	r3, #4
 80035fa:	005a      	lsls	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003604:	461a      	mov	r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	889b      	ldrh	r3, [r3, #4]
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	b29b      	uxth	r3, r3
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	6013      	str	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003618:	b29b      	uxth	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	3306      	adds	r3, #6
 8003626:	005a      	lsls	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b3e      	cmp	r3, #62	; 0x3e
 8003638:	d918      	bls.n	800366c <USB_ActivateEndpoint+0x238>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	81fb      	strh	r3, [r7, #14]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <USB_ActivateEndpoint+0x220>
 800364e:	89fb      	ldrh	r3, [r7, #14]
 8003650:	3b01      	subs	r3, #1
 8003652:	81fb      	strh	r3, [r7, #14]
 8003654:	89fb      	ldrh	r3, [r7, #14]
 8003656:	029b      	lsls	r3, r3, #10
 8003658:	b29b      	uxth	r3, r3
 800365a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003662:	b29b      	uxth	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e012      	b.n	8003692 <USB_ActivateEndpoint+0x25e>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	81fb      	strh	r3, [r7, #14]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <USB_ActivateEndpoint+0x252>
 8003680:	89fb      	ldrh	r3, [r7, #14]
 8003682:	3301      	adds	r3, #1
 8003684:	81fb      	strh	r3, [r7, #14]
 8003686:	89fb      	ldrh	r3, [r7, #14]
 8003688:	029b      	lsls	r3, r3, #10
 800368a:	b29b      	uxth	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d013      	beq.n	80036d0 <USB_ActivateEndpoint+0x29c>
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	441a      	add	r2, r3
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	b299      	uxth	r1, r3
 80036c0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80036c4:	400b      	ands	r3, r1
 80036c6:	b299      	uxth	r1, r3
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <USB_ActivateEndpoint+0x2dc>)
 80036ca:	430b      	orrs	r3, r1
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	b29c      	uxth	r4, r3
 80036e8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80036ec:	b29c      	uxth	r4, r3
 80036ee:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80036f2:	b29c      	uxth	r4, r3
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	441a      	add	r2, r3
 80036fe:	4b02      	ldr	r3, [pc, #8]	; (8003708 <USB_ActivateEndpoint+0x2d4>)
 8003700:	4323      	orrs	r3, r4
 8003702:	b29b      	uxth	r3, r3
 8003704:	8013      	strh	r3, [r2, #0]
 8003706:	e148      	b.n	800399a <USB_ActivateEndpoint+0x566>
 8003708:	ffff8080 	.word	0xffff8080
 800370c:	ffff80c0 	.word	0xffff80c0
 8003710:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	441a      	add	r2, r3
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	b299      	uxth	r1, r3
 800372c:	f640 630f 	movw	r3, #3599	; 0xe0f
 8003730:	400b      	ands	r3, r1
 8003732:	b299      	uxth	r1, r3
 8003734:	4b9c      	ldr	r3, [pc, #624]	; (80039a8 <USB_ActivateEndpoint+0x574>)
 8003736:	430b      	orrs	r3, r1
 8003738:	b29b      	uxth	r3, r3
 800373a:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003742:	b29b      	uxth	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	005a      	lsls	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003758:	461a      	mov	r2, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	88db      	ldrh	r3, [r3, #6]
 800375e:	085b      	lsrs	r3, r3, #1
 8003760:	b29b      	uxth	r3, r3
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800376c:	b29b      	uxth	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	3304      	adds	r3, #4
 800377a:	005a      	lsls	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003784:	461a      	mov	r2, r3
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	891b      	ldrh	r3, [r3, #8]
 800378a:	085b      	lsrs	r3, r3, #1
 800378c:	b29b      	uxth	r3, r3
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	6013      	str	r3, [r2, #0]
    
    if (ep->is_in==0)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	785b      	ldrb	r3, [r3, #1]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 8083 	bne.w	80038a2 <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d013      	beq.n	80037da <USB_ActivateEndpoint+0x3a6>
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	441a      	add	r2, r3
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b299      	uxth	r1, r3
 80037ca:	f640 730f 	movw	r3, #3855	; 0xf0f
 80037ce:	400b      	ands	r3, r1
 80037d0:	b299      	uxth	r1, r3
 80037d2:	4b76      	ldr	r3, [pc, #472]	; (80039ac <USB_ActivateEndpoint+0x578>)
 80037d4:	430b      	orrs	r3, r1
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d013      	beq.n	8003818 <USB_ActivateEndpoint+0x3e4>
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	b299      	uxth	r1, r3
 8003808:	f640 730f 	movw	r3, #3855	; 0xf0f
 800380c:	400b      	ands	r3, r1
 800380e:	b299      	uxth	r1, r3
 8003810:	4b67      	ldr	r3, [pc, #412]	; (80039b0 <USB_ActivateEndpoint+0x57c>)
 8003812:	430b      	orrs	r3, r1
 8003814:	b29b      	uxth	r3, r3
 8003816:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	441a      	add	r2, r3
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b299      	uxth	r1, r3
 8003830:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003834:	400b      	ands	r3, r1
 8003836:	b299      	uxth	r1, r3
 8003838:	4b5d      	ldr	r3, [pc, #372]	; (80039b0 <USB_ActivateEndpoint+0x57c>)
 800383a:	430b      	orrs	r3, r1
 800383c:	b29b      	uxth	r3, r3
 800383e:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003856:	b29c      	uxth	r4, r3
 8003858:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800385c:	b29c      	uxth	r4, r3
 800385e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003862:	b29c      	uxth	r4, r3
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	441a      	add	r2, r3
 800386e:	4b51      	ldr	r3, [pc, #324]	; (80039b4 <USB_ActivateEndpoint+0x580>)
 8003870:	4323      	orrs	r3, r4
 8003872:	b29b      	uxth	r3, r3
 8003874:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	b29b      	uxth	r3, r3
 8003884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800388c:	b29c      	uxth	r4, r3
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	441a      	add	r2, r3
 8003898:	4b46      	ldr	r3, [pc, #280]	; (80039b4 <USB_ActivateEndpoint+0x580>)
 800389a:	4323      	orrs	r3, r4
 800389c:	b29b      	uxth	r3, r3
 800389e:	8013      	strh	r3, [r2, #0]
 80038a0:	e07b      	b.n	800399a <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d013      	beq.n	80038e0 <USB_ActivateEndpoint+0x4ac>
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	441a      	add	r2, r3
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	b299      	uxth	r1, r3
 80038d0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80038d4:	400b      	ands	r3, r1
 80038d6:	b299      	uxth	r1, r3
 80038d8:	4b34      	ldr	r3, [pc, #208]	; (80039ac <USB_ActivateEndpoint+0x578>)
 80038da:	430b      	orrs	r3, r1
 80038dc:	b29b      	uxth	r3, r3
 80038de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d013      	beq.n	800391e <USB_ActivateEndpoint+0x4ea>
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	441a      	add	r2, r3
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	b299      	uxth	r1, r3
 800390e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003912:	400b      	ands	r3, r1
 8003914:	b299      	uxth	r1, r3
 8003916:	4b26      	ldr	r3, [pc, #152]	; (80039b0 <USB_ActivateEndpoint+0x57c>)
 8003918:	430b      	orrs	r3, r1
 800391a:	b29b      	uxth	r3, r3
 800391c:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	441a      	add	r2, r3
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b299      	uxth	r1, r3
 8003936:	f640 730f 	movw	r3, #3855	; 0xf0f
 800393a:	400b      	ands	r3, r1
 800393c:	b299      	uxth	r1, r3
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <USB_ActivateEndpoint+0x578>)
 8003940:	430b      	orrs	r3, r1
 8003942:	b29b      	uxth	r3, r3
 8003944:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800395c:	b29c      	uxth	r4, r3
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	441a      	add	r2, r3
 8003968:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <USB_ActivateEndpoint+0x580>)
 800396a:	4323      	orrs	r3, r4
 800396c:	b29b      	uxth	r3, r3
 800396e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	b29c      	uxth	r4, r3
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	441a      	add	r2, r3
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <USB_ActivateEndpoint+0x580>)
 8003994:	4323      	orrs	r3, r4
 8003996:	b29b      	uxth	r3, r3
 8003998:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc90      	pop	{r4, r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	ffff8180 	.word	0xffff8180
 80039ac:	ffffc080 	.word	0xffffc080
 80039b0:	ffff80c0 	.word	0xffff80c0
 80039b4:	ffff8080 	.word	0xffff8080

080039b8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039b8:	b490      	push	{r4, r7}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	7a9b      	ldrb	r3, [r3, #10]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d16d      	bne.n	8003aa6 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	785b      	ldrb	r3, [r3, #1]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d034      	beq.n	8003a3c <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <USB_DeactivateEndpoint+0x58>
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	b299      	uxth	r1, r3
 8003a00:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003a04:	400b      	ands	r3, r1
 8003a06:	b299      	uxth	r1, r3
 8003a08:	4b68      	ldr	r3, [pc, #416]	; (8003bac <USB_DeactivateEndpoint+0x1f4>)
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a26:	b29c      	uxth	r4, r3
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	441a      	add	r2, r3
 8003a32:	4b5f      	ldr	r3, [pc, #380]	; (8003bb0 <USB_DeactivateEndpoint+0x1f8>)
 8003a34:	4323      	orrs	r3, r4
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	8013      	strh	r3, [r2, #0]
 8003a3a:	e139      	b.n	8003cb0 <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d013      	beq.n	8003a7a <USB_DeactivateEndpoint+0xc2>
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	441a      	add	r2, r3
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b299      	uxth	r1, r3
 8003a6a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003a6e:	400b      	ands	r3, r1
 8003a70:	b299      	uxth	r1, r3
 8003a72:	4b50      	ldr	r3, [pc, #320]	; (8003bb4 <USB_DeactivateEndpoint+0x1fc>)
 8003a74:	430b      	orrs	r3, r1
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a90:	b29c      	uxth	r4, r3
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	441a      	add	r2, r3
 8003a9c:	4b44      	ldr	r3, [pc, #272]	; (8003bb0 <USB_DeactivateEndpoint+0x1f8>)
 8003a9e:	4323      	orrs	r3, r4
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	8013      	strh	r3, [r2, #0]
 8003aa4:	e104      	b.n	8003cb0 <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f040 8084 	bne.w	8003bb8 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d013      	beq.n	8003aee <USB_DeactivateEndpoint+0x136>
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	441a      	add	r2, r3
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	b299      	uxth	r1, r3
 8003ade:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003ae2:	400b      	ands	r3, r1
 8003ae4:	b299      	uxth	r1, r3
 8003ae6:	4b33      	ldr	r3, [pc, #204]	; (8003bb4 <USB_DeactivateEndpoint+0x1fc>)
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d013      	beq.n	8003b2c <USB_DeactivateEndpoint+0x174>
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	441a      	add	r2, r3
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	b299      	uxth	r1, r3
 8003b1c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003b20:	400b      	ands	r3, r1
 8003b22:	b299      	uxth	r1, r3
 8003b24:	4b21      	ldr	r3, [pc, #132]	; (8003bac <USB_DeactivateEndpoint+0x1f4>)
 8003b26:	430b      	orrs	r3, r1
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	441a      	add	r2, r3
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	b299      	uxth	r1, r3
 8003b44:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003b48:	400b      	ands	r3, r1
 8003b4a:	b299      	uxth	r1, r3
 8003b4c:	4b17      	ldr	r3, [pc, #92]	; (8003bac <USB_DeactivateEndpoint+0x1f4>)
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6a:	b29c      	uxth	r4, r3
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	441a      	add	r2, r3
 8003b76:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <USB_DeactivateEndpoint+0x1f8>)
 8003b78:	4323      	orrs	r3, r4
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b94:	b29c      	uxth	r4, r3
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	441a      	add	r2, r3
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <USB_DeactivateEndpoint+0x1f8>)
 8003ba2:	4323      	orrs	r3, r4
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	8013      	strh	r3, [r2, #0]
 8003ba8:	e082      	b.n	8003cb0 <USB_DeactivateEndpoint+0x2f8>
 8003baa:	bf00      	nop
 8003bac:	ffff80c0 	.word	0xffff80c0
 8003bb0:	ffff8080 	.word	0xffff8080
 8003bb4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d013      	beq.n	8003bf6 <USB_DeactivateEndpoint+0x23e>
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b299      	uxth	r1, r3
 8003be6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003bea:	400b      	ands	r3, r1
 8003bec:	b299      	uxth	r1, r3
 8003bee:	4b33      	ldr	r3, [pc, #204]	; (8003cbc <USB_DeactivateEndpoint+0x304>)
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d013      	beq.n	8003c34 <USB_DeactivateEndpoint+0x27c>
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	441a      	add	r2, r3
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	b299      	uxth	r1, r3
 8003c24:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003c28:	400b      	ands	r3, r1
 8003c2a:	b299      	uxth	r1, r3
 8003c2c:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <USB_DeactivateEndpoint+0x308>)
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b299      	uxth	r1, r3
 8003c4c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003c50:	400b      	ands	r3, r1
 8003c52:	b299      	uxth	r1, r3
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <USB_DeactivateEndpoint+0x304>)
 8003c56:	430b      	orrs	r3, r1
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c72:	b29c      	uxth	r4, r3
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	441a      	add	r2, r3
 8003c7e:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <USB_DeactivateEndpoint+0x30c>)
 8003c80:	4323      	orrs	r3, r4
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9c:	b29c      	uxth	r4, r3
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	441a      	add	r2, r3
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <USB_DeactivateEndpoint+0x30c>)
 8003caa:	4323      	orrs	r3, r4
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc90      	pop	{r4, r7}
 8003cba:	4770      	bx	lr
 8003cbc:	ffffc080 	.word	0xffffc080
 8003cc0:	ffff80c0 	.word	0xffff80c0
 8003cc4:	ffff8080 	.word	0xffff8080

08003cc8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8003cc8:	b590      	push	{r4, r7, lr}
 8003cca:	b08d      	sub	sp, #52	; 0x34
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	785b      	ldrb	r3, [r3, #1]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	f040 8149 	bne.w	8003f78 <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d909      	bls.n	8003d06 <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	699a      	ldr	r2, [r3, #24]
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	1ad2      	subs	r2, r2, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	619a      	str	r2, [r3, #24]
 8003d04:	e005      	b.n	8003d12 <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	7a9b      	ldrb	r3, [r3, #10]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d11b      	bne.n	8003d52 <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6959      	ldr	r1, [r3, #20]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	889a      	ldrh	r2, [r3, #4]
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fb7d 	bl	8004426 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3302      	adds	r3, #2
 8003d40:	005a      	lsls	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	e0f6      	b.n	8003f40 <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d059      	beq.n	8003e1c <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	785b      	ldrb	r3, [r3, #1]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d13b      	bne.n	8003de8 <USB_EPStartXfer+0x120>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	3306      	adds	r3, #6
 8003d84:	005a      	lsls	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d92:	2b3e      	cmp	r3, #62	; 0x3e
 8003d94:	d916      	bls.n	8003dc4 <USB_EPStartXfer+0xfc>
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	f003 031f 	and.w	r3, r3, #31
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <USB_EPStartXfer+0xe4>
 8003da6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003da8:	3b01      	subs	r3, #1
 8003daa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003dac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003dae:	029b      	lsls	r3, r3, #10
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	e027      	b.n	8003e14 <USB_EPStartXfer+0x14c>
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <USB_EPStartXfer+0x112>
 8003dd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003dda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ddc:	029b      	lsls	r3, r3, #10
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e015      	b.n	8003e14 <USB_EPStartXfer+0x14c>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	785b      	ldrb	r3, [r3, #1]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d111      	bne.n	8003e14 <USB_EPStartXfer+0x14c>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	3302      	adds	r3, #2
 8003e04:	005a      	lsls	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	891b      	ldrh	r3, [r3, #8]
 8003e18:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003e1a:	e058      	b.n	8003ece <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	785b      	ldrb	r3, [r3, #1]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d13b      	bne.n	8003e9c <USB_EPStartXfer+0x1d4>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	3302      	adds	r3, #2
 8003e38:	005a      	lsls	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	2b3e      	cmp	r3, #62	; 0x3e
 8003e48:	d916      	bls.n	8003e78 <USB_EPStartXfer+0x1b0>
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <USB_EPStartXfer+0x198>
 8003e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e62:	029b      	lsls	r3, r3, #10
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e027      	b.n	8003ec8 <USB_EPStartXfer+0x200>
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <USB_EPStartXfer+0x1c6>
 8003e88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e90:	029b      	lsls	r3, r3, #10
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e015      	b.n	8003ec8 <USB_EPStartXfer+0x200>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	785b      	ldrb	r3, [r3, #1]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d111      	bne.n	8003ec8 <USB_EPStartXfer+0x200>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	005a      	lsls	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	88db      	ldrh	r3, [r3, #6]
 8003ecc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6959      	ldr	r1, [r3, #20]
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 faa4 	bl	8004426 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	785b      	ldrb	r3, [r3, #1]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d114      	bne.n	8003f10 <USB_EPStartXfer+0x248>
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	441a      	add	r2, r3
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b299      	uxth	r1, r3
 8003efe:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003f02:	400b      	ands	r3, r1
 8003f04:	b299      	uxth	r1, r3
 8003f06:	4b92      	ldr	r3, [pc, #584]	; (8004150 <USB_EPStartXfer+0x488>)
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	8013      	strh	r3, [r2, #0]
 8003f0e:	e017      	b.n	8003f40 <USB_EPStartXfer+0x278>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	785b      	ldrb	r3, [r3, #1]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d113      	bne.n	8003f40 <USB_EPStartXfer+0x278>
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	441a      	add	r2, r3
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b299      	uxth	r1, r3
 8003f30:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003f34:	400b      	ands	r3, r1
 8003f36:	b299      	uxth	r1, r3
 8003f38:	4b86      	ldr	r3, [pc, #536]	; (8004154 <USB_EPStartXfer+0x48c>)
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f56:	b29c      	uxth	r4, r3
 8003f58:	f084 0310 	eor.w	r3, r4, #16
 8003f5c:	b29c      	uxth	r4, r3
 8003f5e:	f084 0320 	eor.w	r3, r4, #32
 8003f62:	b29c      	uxth	r4, r3
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	441a      	add	r2, r3
 8003f6e:	4b7a      	ldr	r3, [pc, #488]	; (8004158 <USB_EPStartXfer+0x490>)
 8003f70:	4323      	orrs	r3, r4
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	8013      	strh	r3, [r2, #0]
 8003f76:	e122      	b.n	80041be <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d909      	bls.n	8003f98 <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	1ad2      	subs	r2, r2, r3
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	619a      	str	r2, [r3, #24]
 8003f96:	e005      	b.n	8003fa4 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	7a9b      	ldrb	r3, [r3, #10]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d13b      	bne.n	8004024 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3306      	adds	r3, #6
 8003fc0:	005a      	lsls	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	2b3e      	cmp	r3, #62	; 0x3e
 8003fd0:	d916      	bls.n	8004000 <USB_EPStartXfer+0x338>
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	847b      	strh	r3, [r7, #34]	; 0x22
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d102      	bne.n	8003fe8 <USB_EPStartXfer+0x320>
 8003fe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	847b      	strh	r3, [r7, #34]	; 0x22
 8003fe8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fea:	029b      	lsls	r3, r3, #10
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e0c3      	b.n	8004188 <USB_EPStartXfer+0x4c0>
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	847b      	strh	r3, [r7, #34]	; 0x22
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <USB_EPStartXfer+0x34e>
 8004010:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004012:	3301      	adds	r3, #1
 8004014:	847b      	strh	r3, [r7, #34]	; 0x22
 8004016:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004018:	029b      	lsls	r3, r3, #10
 800401a:	b29b      	uxth	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e0b1      	b.n	8004188 <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d13b      	bne.n	80040a4 <USB_EPStartXfer+0x3dc>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004032:	b29b      	uxth	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	3302      	adds	r3, #2
 8004040:	005a      	lsls	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	2b3e      	cmp	r3, #62	; 0x3e
 8004050:	d916      	bls.n	8004080 <USB_EPStartXfer+0x3b8>
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	843b      	strh	r3, [r7, #32]
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <USB_EPStartXfer+0x3a0>
 8004062:	8c3b      	ldrh	r3, [r7, #32]
 8004064:	3b01      	subs	r3, #1
 8004066:	843b      	strh	r3, [r7, #32]
 8004068:	8c3b      	ldrh	r3, [r7, #32]
 800406a:	029b      	lsls	r3, r3, #10
 800406c:	b29b      	uxth	r3, r3
 800406e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004076:	b29b      	uxth	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e027      	b.n	80040d0 <USB_EPStartXfer+0x408>
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	843b      	strh	r3, [r7, #32]
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <USB_EPStartXfer+0x3ce>
 8004090:	8c3b      	ldrh	r3, [r7, #32]
 8004092:	3301      	adds	r3, #1
 8004094:	843b      	strh	r3, [r7, #32]
 8004096:	8c3b      	ldrh	r3, [r7, #32]
 8004098:	029b      	lsls	r3, r3, #10
 800409a:	b29b      	uxth	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e015      	b.n	80040d0 <USB_EPStartXfer+0x408>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	785b      	ldrb	r3, [r3, #1]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d111      	bne.n	80040d0 <USB_EPStartXfer+0x408>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	3302      	adds	r3, #2
 80040c0:	005a      	lsls	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ca:	461a      	mov	r2, r3
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	785b      	ldrb	r3, [r3, #1]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d141      	bne.n	800415c <USB_EPStartXfer+0x494>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040de:	b29b      	uxth	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4413      	add	r3, r2
 80040ea:	3306      	adds	r3, #6
 80040ec:	005a      	lsls	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040f6:	60bb      	str	r3, [r7, #8]
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	2b3e      	cmp	r3, #62	; 0x3e
 80040fc:	d916      	bls.n	800412c <USB_EPStartXfer+0x464>
 80040fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	83fb      	strh	r3, [r7, #30]
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	2b00      	cmp	r3, #0
 800410c:	d102      	bne.n	8004114 <USB_EPStartXfer+0x44c>
 800410e:	8bfb      	ldrh	r3, [r7, #30]
 8004110:	3b01      	subs	r3, #1
 8004112:	83fb      	strh	r3, [r7, #30]
 8004114:	8bfb      	ldrh	r3, [r7, #30]
 8004116:	029b      	lsls	r3, r3, #10
 8004118:	b29b      	uxth	r3, r3
 800411a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800411e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004122:	b29b      	uxth	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e02d      	b.n	8004188 <USB_EPStartXfer+0x4c0>
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	085b      	lsrs	r3, r3, #1
 8004130:	83fb      	strh	r3, [r7, #30]
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <USB_EPStartXfer+0x47a>
 800413c:	8bfb      	ldrh	r3, [r7, #30]
 800413e:	3301      	adds	r3, #1
 8004140:	83fb      	strh	r3, [r7, #30]
 8004142:	8bfb      	ldrh	r3, [r7, #30]
 8004144:	029b      	lsls	r3, r3, #10
 8004146:	b29b      	uxth	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e01b      	b.n	8004188 <USB_EPStartXfer+0x4c0>
 8004150:	ffff80c0 	.word	0xffff80c0
 8004154:	ffffc080 	.word	0xffffc080
 8004158:	ffff8080 	.word	0xffff8080
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d111      	bne.n	8004188 <USB_EPStartXfer+0x4c0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800416a:	b29b      	uxth	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4413      	add	r3, r2
 8004176:	3302      	adds	r3, #2
 8004178:	005a      	lsls	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004182:	461a      	mov	r2, r3
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800419a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419e:	b29c      	uxth	r4, r3
 80041a0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80041a4:	b29c      	uxth	r4, r3
 80041a6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80041aa:	b29c      	uxth	r4, r3
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	441a      	add	r2, r3
 80041b6:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <USB_EPStartXfer+0x500>)
 80041b8:	4323      	orrs	r3, r4
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3734      	adds	r7, #52	; 0x34
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd90      	pop	{r4, r7, pc}
 80041c8:	ffff8080 	.word	0xffff8080

080041cc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 80041cc:	b490      	push	{r4, r7}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d118      	bne.n	8004210 <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 80041f0:	401c      	ands	r4, r3
 80041f2:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 80041f6:	f084 0410 	eor.w	r4, r4, #16
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	441a      	add	r2, r3
 8004204:	b2a1      	uxth	r1, r4
 8004206:	4b20      	ldr	r3, [pc, #128]	; (8004288 <USB_EPSetStall+0xbc>)
 8004208:	430b      	orrs	r3, r1
 800420a:	b29b      	uxth	r3, r3
 800420c:	8013      	strh	r3, [r2, #0]
 800420e:	e034      	b.n	800427a <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	785b      	ldrb	r3, [r3, #1]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d018      	beq.n	800424a <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422e:	b29c      	uxth	r4, r3
 8004230:	f084 0310 	eor.w	r3, r4, #16
 8004234:	b29c      	uxth	r4, r3
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	441a      	add	r2, r3
 8004240:	4b11      	ldr	r3, [pc, #68]	; (8004288 <USB_EPSetStall+0xbc>)
 8004242:	4323      	orrs	r3, r4
 8004244:	b29b      	uxth	r3, r3
 8004246:	8013      	strh	r3, [r2, #0]
 8004248:	e017      	b.n	800427a <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	b29b      	uxth	r3, r3
 8004258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800425c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004260:	b29c      	uxth	r4, r3
 8004262:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004266:	b29c      	uxth	r4, r3
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	441a      	add	r2, r3
 8004272:	4b05      	ldr	r3, [pc, #20]	; (8004288 <USB_EPSetStall+0xbc>)
 8004274:	4323      	orrs	r3, r4
 8004276:	b29b      	uxth	r3, r3
 8004278:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bc90      	pop	{r4, r7}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	ffff8080 	.word	0xffff8080

0800428c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800428c:	b490      	push	{r4, r7}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	785b      	ldrb	r3, [r3, #1]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d03a      	beq.n	8004314 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <USB_EPClearStall+0x50>
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	441a      	add	r2, r3
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b299      	uxth	r1, r3
 80042cc:	f640 730f 	movw	r3, #3855	; 0xf0f
 80042d0:	400b      	ands	r3, r1
 80042d2:	b299      	uxth	r1, r3
 80042d4:	4b2f      	ldr	r3, [pc, #188]	; (8004394 <USB_EPClearStall+0x108>)
 80042d6:	430b      	orrs	r3, r1
 80042d8:	b29b      	uxth	r3, r3
 80042da:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042f2:	b29c      	uxth	r4, r3
 80042f4:	f084 0310 	eor.w	r3, r4, #16
 80042f8:	b29c      	uxth	r4, r3
 80042fa:	f084 0320 	eor.w	r3, r4, #32
 80042fe:	b29c      	uxth	r4, r3
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	4b23      	ldr	r3, [pc, #140]	; (8004398 <USB_EPClearStall+0x10c>)
 800430c:	4323      	orrs	r3, r4
 800430e:	b29b      	uxth	r3, r3
 8004310:	8013      	strh	r3, [r2, #0]
 8004312:	e039      	b.n	8004388 <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d013      	beq.n	8004352 <USB_EPClearStall+0xc6>
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	441a      	add	r2, r3
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b299      	uxth	r1, r3
 8004342:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004346:	400b      	ands	r3, r1
 8004348:	b299      	uxth	r1, r3
 800434a:	4b14      	ldr	r3, [pc, #80]	; (800439c <USB_EPClearStall+0x110>)
 800434c:	430b      	orrs	r3, r1
 800434e:	b29b      	uxth	r3, r3
 8004350:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004368:	b29c      	uxth	r4, r3
 800436a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800436e:	b29c      	uxth	r4, r3
 8004370:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004374:	b29c      	uxth	r4, r3
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	441a      	add	r2, r3
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <USB_EPClearStall+0x10c>)
 8004382:	4323      	orrs	r3, r4
 8004384:	b29b      	uxth	r3, r3
 8004386:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bc90      	pop	{r4, r7}
 8004392:	4770      	bx	lr
 8004394:	ffff80c0 	.word	0xffff80c0
 8004398:	ffff8080 	.word	0xffff8080
 800439c:	ffffc080 	.word	0xffffc080

080043a0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2280      	movs	r2, #128	; 0x80
 80043b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr

080043ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004400:	b29b      	uxth	r3, r3
 8004402:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004404:	68fb      	ldr	r3, [r7, #12]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr

08004426 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004426:	b480      	push	{r7}
 8004428:	b08b      	sub	sp, #44	; 0x2c
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	4611      	mov	r1, r2
 8004432:	461a      	mov	r2, r3
 8004434:	460b      	mov	r3, r1
 8004436:	80fb      	strh	r3, [r7, #6]
 8004438:	4613      	mov	r3, r2
 800443a:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800443c:	88bb      	ldrh	r3, [r7, #4]
 800443e:	3301      	adds	r3, #1
 8004440:	105b      	asrs	r3, r3, #1
 8004442:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
 8004448:	2300      	movs	r3, #0
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 8004450:	2300      	movs	r3, #0
 8004452:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	461a      	mov	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004462:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	e01b      	b.n	80044a2 <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	3301      	adds	r3, #1
 8004474:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	461a      	mov	r2, r3
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	1c9a      	adds	r2, r3, #2
 8004488:	623a      	str	r2, [r7, #32]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	b292      	uxth	r2, r2
 800448e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	3302      	adds	r3, #2
 8004494:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	3301      	adds	r3, #1
 800449a:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	3b01      	subs	r3, #1
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e0      	bne.n	800446a <USB_WritePMA+0x44>
  }
}
 80044a8:	bf00      	nop
 80044aa:	372c      	adds	r7, #44	; 0x2c
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr

080044b2 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b089      	sub	sp, #36	; 0x24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	4611      	mov	r1, r2
 80044be:	461a      	mov	r2, r3
 80044c0:	460b      	mov	r3, r1
 80044c2:	80fb      	strh	r3, [r7, #6]
 80044c4:	4613      	mov	r3, r2
 80044c6:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80044c8:	88bb      	ldrh	r3, [r7, #4]
 80044ca:	3301      	adds	r3, #1
 80044cc:	105b      	asrs	r3, r3, #1
 80044ce:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	461a      	mov	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044e6:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	61fb      	str	r3, [r7, #28]
 80044ec:	e00e      	b.n	800450c <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	60ba      	str	r2, [r7, #8]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	1d11      	adds	r1, r2, #4
 80044f8:	61b9      	str	r1, [r7, #24]
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	b292      	uxth	r2, r2
 80044fe:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	3301      	adds	r3, #1
 8004504:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	3b01      	subs	r3, #1
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1ed      	bne.n	80044ee <USB_ReadPMA+0x3c>
  }
}
 8004512:	bf00      	nop
 8004514:	3724      	adds	r7, #36	; 0x24
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <USBD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 800452c:	2340      	movs	r3, #64	; 0x40
 800452e:	2203      	movs	r2, #3
 8004530:	2181      	movs	r1, #129	; 0x81
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f001 fc48 	bl	8005dc8 <USBD_LL_OpenEP>
                 HID_EPIN_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EPIN_SIZE);  
  
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8004538:	2010      	movs	r0, #16
 800453a:	f001 fdf5 	bl	8006128 <USBD_static_malloc>
 800453e:	4602      	mov	r2, r0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <USBD_HID_Init+0x3a>
  {
    ret = 1; 
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
 8004554:	e004      	b.n	8004560 <USBD_HID_Init+0x44>
  }
  else
  {
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800455c:	2200      	movs	r2, #0
 800455e:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 8004560:	7bfb      	ldrb	r3, [r7, #15]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev,
 8004576:	2181      	movs	r1, #129	; 0x81
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f001 fc63 	bl	8005e44 <USBD_LL_CloseEP>
                  HID_EPIN_ADDR);
  
  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004584:	2b00      	cmp	r3, #0
 8004586:	d009      	beq.n	800459c <USBD_HID_DeInit+0x32>
  {
    USBD_free(pdev->pClassData);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800458e:	4618      	mov	r0, r3
 8004590:	f001 fdd6 	bl	8006140 <USBD_static_free>
    pdev->pClassData = NULL;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  } 
  
  return USBD_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
  uint8_t pkgData[2];
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80045c0:	60fb      	str	r3, [r7, #12]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 808b 	beq.w	80046e6 <USBD_HID_Setup+0x13e>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	f040 80c5 	bne.w	8004760 <USBD_HID_Setup+0x1b8>
  {
  case USB_REQ_TYPE_CLASS :  
    switch (req->bRequest)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	785b      	ldrb	r3, [r3, #1]
 80045da:	3b01      	subs	r3, #1
 80045dc:	2b0a      	cmp	r3, #10
 80045de:	d87b      	bhi.n	80046d8 <USBD_HID_Setup+0x130>
 80045e0:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <USBD_HID_Setup+0x40>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	08004615 	.word	0x08004615
 80045ec:	080046c9 	.word	0x080046c9
 80045f0:	080046a9 	.word	0x080046a9
 80045f4:	080046d9 	.word	0x080046d9
 80045f8:	080046d9 	.word	0x080046d9
 80045fc:	080046d9 	.word	0x080046d9
 8004600:	080046d9 	.word	0x080046d9
 8004604:	080046d9 	.word	0x080046d9
 8004608:	08004693 	.word	0x08004693
 800460c:	080046b7 	.word	0x080046b7
 8004610:	0800469b 	.word	0x0800469b
    {

    case HID_REQ_GET_REPORT:
    	//0x200 OUTPUT
    	//0x300 FEATURE
    	if(req->wValue == (0x0300 + VALID_CONTACTS_FEATURE_REPORT_ID))
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	885b      	ldrh	r3, [r3, #2]
 8004618:	f240 3202 	movw	r2, #770	; 0x302
 800461c:	4293      	cmp	r3, r2
 800461e:	d10b      	bne.n	8004638 <USBD_HID_Setup+0x90>
		{
		//VALID_CONTACTS_FEATURE_REPORT_ID
			pkgData[0] = VALID_CONTACTS_FEATURE_REPORT_ID;
 8004620:	2302      	movs	r3, #2
 8004622:	723b      	strb	r3, [r7, #8]
			pkgData[1] = 5;
 8004624:	2305      	movs	r3, #5
 8004626:	727b      	strb	r3, [r7, #9]
			  USBD_CtlSendData (pdev,
 8004628:	f107 0308 	add.w	r3, r7, #8
 800462c:	2202      	movs	r2, #2
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 ff8f 	bl	8005554 <USBD_CtlSendData>
 8004636:	e022      	b.n	800467e <USBD_HID_Setup+0xd6>
					  pkgData, 2);

		}
    	else if(req->wValue == (0x0300 + BLOB_REPORT_ID))
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	885b      	ldrh	r3, [r3, #2]
 800463c:	f240 3205 	movw	r2, #773	; 0x305
 8004640:	4293      	cmp	r3, r2
 8004642:	d10a      	bne.n	800465a <USBD_HID_Setup+0xb2>
    	{
    		pbuf = getTouchQualityKeyPtr();
 8004644:	f7fc f802 	bl	800064c <getTouchQualityKeyPtr>
 8004648:	6138      	str	r0, [r7, #16]
    		USBD_CtlSendData (pdev,
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	88db      	ldrh	r3, [r3, #6]
 800464e:	461a      	mov	r2, r3
 8004650:	6939      	ldr	r1, [r7, #16]
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 ff7e 	bl	8005554 <USBD_CtlSendData>
 8004658:	e011      	b.n	800467e <USBD_HID_Setup+0xd6>
				  pbuf, req->wLength);
    	}
    	//0x100 INPUT
    	else if(req->wValue == (0x0100 + TOUCH_REPORT_ID))
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	885b      	ldrh	r3, [r3, #2]
 800465e:	f240 1201 	movw	r2, #257	; 0x101
 8004662:	4293      	cmp	r3, r2
 8004664:	d10b      	bne.n	800467e <USBD_HID_Setup+0xd6>
		{
			input_sync();
 8004666:	f7fb ffb3 	bl	80005d0 <input_sync>
			pbuf = getTouchPtr();
 800466a:	f7fb ffe5 	bl	8000638 <getTouchPtr>
 800466e:	6138      	str	r0, [r7, #16]
			  USBD_CtlSendData (pdev,
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	88db      	ldrh	r3, [r3, #6]
 8004674:	461a      	mov	r2, r3
 8004676:	6939      	ldr	r1, [r7, #16]
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 ff6b 	bl	8005554 <USBD_CtlSendData>
					  pbuf, req->wLength);
		}
    	printf("get repot : %X, %d\n", req->wValue, req->wLength);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	885b      	ldrh	r3, [r3, #2]
 8004682:	4619      	mov	r1, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	88db      	ldrh	r3, [r3, #6]
 8004688:	461a      	mov	r2, r3
 800468a:	4838      	ldr	r0, [pc, #224]	; (800476c <USBD_HID_Setup+0x1c4>)
 800468c:	f001 fe6e 	bl	800636c <iprintf>

    	break;
 8004690:	e028      	b.n	80046e4 <USBD_HID_Setup+0x13c>
    case HID_REQ_SET_REPORT:
    	printf("setrepot\n");
 8004692:	4837      	ldr	r0, [pc, #220]	; (8004770 <USBD_HID_Setup+0x1c8>)
 8004694:	f001 fede 	bl	8006454 <puts>
    	break;
 8004698:	e024      	b.n	80046e4 <USBD_HID_Setup+0x13c>
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	885b      	ldrh	r3, [r3, #2]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	601a      	str	r2, [r3, #0]
      break;
 80046a6:	e01d      	b.n	80046e4 <USBD_HID_Setup+0x13c>
      
    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&hhid->Protocol,
 80046a8:	68fb      	ldr	r3, [r7, #12]
      USBD_CtlSendData (pdev, 
 80046aa:	2201      	movs	r2, #1
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 ff50 	bl	8005554 <USBD_CtlSendData>
                        1);    
      break;
 80046b4:	e016      	b.n	80046e4 <USBD_HID_Setup+0x13c>
      
    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	885b      	ldrh	r3, [r3, #2]
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	b29b      	uxth	r3, r3
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	605a      	str	r2, [r3, #4]
      break;
 80046c6:	e00d      	b.n	80046e4 <USBD_HID_Setup+0x13c>
      
    case HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&hhid->IdleState,
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80046cc:	2201      	movs	r2, #1
 80046ce:	4619      	mov	r1, r3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 ff3f 	bl	8005554 <USBD_CtlSendData>
                        1);        
      break;      
 80046d6:	e005      	b.n	80046e4 <USBD_HID_Setup+0x13c>
      
    default:
      USBD_CtlError (pdev, req);
 80046d8:	6839      	ldr	r1, [r7, #0]
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fecf 	bl	800547e <USBD_CtlError>
      return USBD_FAIL; 
 80046e0:	2302      	movs	r3, #2
 80046e2:	e03e      	b.n	8004762 <USBD_HID_Setup+0x1ba>
    }
    break;
 80046e4:	e03c      	b.n	8004760 <USBD_HID_Setup+0x1b8>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	785b      	ldrb	r3, [r3, #1]
 80046ea:	2b0a      	cmp	r3, #10
 80046ec:	d029      	beq.n	8004742 <USBD_HID_Setup+0x19a>
 80046ee:	2b0b      	cmp	r3, #11
 80046f0:	d02f      	beq.n	8004752 <USBD_HID_Setup+0x1aa>
 80046f2:	2b06      	cmp	r3, #6
 80046f4:	d134      	bne.n	8004760 <USBD_HID_Setup+0x1b8>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == HID_REPORT_DESC)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	885b      	ldrh	r3, [r3, #2]
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b22      	cmp	r3, #34	; 0x22
 8004700:	d10a      	bne.n	8004718 <USBD_HID_Setup+0x170>
      {
        len = MIN(HID_MULTI_TOUCH_REPORT_DESC_SIZE , req->wLength);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	88db      	ldrh	r3, [r3, #6]
 8004706:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 800470a:	bf28      	it	cs
 800470c:	f44f 73eb 	movcs.w	r3, #470	; 0x1d6
 8004710:	82fb      	strh	r3, [r7, #22]
        pbuf = HID_MULTI_TOUCH_ReportDesc;
 8004712:	4b18      	ldr	r3, [pc, #96]	; (8004774 <USBD_HID_Setup+0x1cc>)
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	e00d      	b.n	8004734 <USBD_HID_Setup+0x18c>
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	885b      	ldrh	r3, [r3, #2]
 800471c:	0a1b      	lsrs	r3, r3, #8
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b21      	cmp	r3, #33	; 0x21
 8004722:	d107      	bne.n	8004734 <USBD_HID_Setup+0x18c>
      {
        pbuf = USBD_HID_Desc;   
 8004724:	4b14      	ldr	r3, [pc, #80]	; (8004778 <USBD_HID_Setup+0x1d0>)
 8004726:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	88db      	ldrh	r3, [r3, #6]
 800472c:	2b09      	cmp	r3, #9
 800472e:	bf28      	it	cs
 8004730:	2309      	movcs	r3, #9
 8004732:	82fb      	strh	r3, [r7, #22]
      }
      
      USBD_CtlSendData (pdev, 
 8004734:	8afb      	ldrh	r3, [r7, #22]
 8004736:	461a      	mov	r2, r3
 8004738:	6939      	ldr	r1, [r7, #16]
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 ff0a 	bl	8005554 <USBD_CtlSendData>
                        pbuf,
                        len);
      
      break;
 8004740:	e00e      	b.n	8004760 <USBD_HID_Setup+0x1b8>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->AltSetting,
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev,
 8004746:	2201      	movs	r2, #1
 8004748:	4619      	mov	r1, r3
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 ff02 	bl	8005554 <USBD_CtlSendData>
                        1);
      break;
 8004750:	e006      	b.n	8004760 <USBD_HID_Setup+0x1b8>
      
    case USB_REQ_SET_INTERFACE :
      hhid->AltSetting = (uint8_t)(req->wValue);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	885b      	ldrh	r3, [r3, #2]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	609a      	str	r2, [r3, #8]
      break;
 800475e:	bf00      	nop
    }
  }
  return USBD_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	080072d4 	.word	0x080072d4
 8004770:	080072e8 	.word	0x080072e8
 8004774:	2000007c 	.word	0x2000007c
 8004778:	20000064 	.word	0x20000064

0800477c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev, 
                                 uint8_t *report,
                                 uint16_t len)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004790:	617b      	str	r3, [r7, #20]
  
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004798:	2b03      	cmp	r3, #3
 800479a:	d10c      	bne.n	80047b6 <USBD_HID_SendReport+0x3a>
  {
    if(hhid->state == HID_IDLE)
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	7b1b      	ldrb	r3, [r3, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d108      	bne.n	80047b6 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2201      	movs	r2, #1
 80047a8:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit (pdev, 
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	2181      	movs	r1, #129	; 0x81
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f001 fc45 	bl	8006040 <USBD_LL_Transmit>
                        HID_EPIN_ADDR,                                      
                        report,
                        len);
    }
  }
  return USBD_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <USBD_HID_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgDesc);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2222      	movs	r2, #34	; 0x22
 80047cc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80047ce:	4b03      	ldr	r3, [pc, #12]	; (80047dc <USBD_HID_GetCfgDesc+0x1c>)
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000040 	.word	0x20000040

080047e0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	70fb      	strb	r3, [r7, #3]
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80047f2:	2200      	movs	r2, #0
 80047f4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
	...

08004804 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	220a      	movs	r2, #10
 8004810:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8004812:	4b03      	ldr	r3, [pc, #12]	; (8004820 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	20000070 	.word	0x20000070

08004824 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	4613      	mov	r3, r2
 8004830:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8004838:	2302      	movs	r3, #2
 800483a:	e01a      	b.n	8004872 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	79fa      	ldrb	r2, [r7, #7]
 8004868:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f001 fa2a 	bl	8005cc4 <USBD_LL_Init>
  
  return USBD_OK; 
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d006      	beq.n	800489c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	73fb      	strb	r3, [r7, #15]
 800489a:	e001      	b.n	80048a0 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800489c:	2302      	movs	r3, #2
 800489e:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr

080048ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f001 fa55 	bl	8005d64 <USBD_LL_Start>
  
  return USBD_OK;  
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80048e4:	2302      	movs	r3, #2
 80048e6:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00c      	beq.n	800490c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	78fa      	ldrb	r2, [r7, #3]
 80048fc:	4611      	mov	r1, r2
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	4798      	blx	r3
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 800490c:	7bfb      	ldrb	r3, [r7, #15]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	460b      	mov	r3, r1
 8004920:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	78fa      	ldrb	r2, [r7, #3]
 800492c:	4611      	mov	r1, r2
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	4798      	blx	r3
  return USBD_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800494c:	6839      	ldr	r1, [r7, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fd59 	bl	8005406 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004962:	461a      	mov	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	2b01      	cmp	r3, #1
 8004976:	d00b      	beq.n	8004990 <USBD_LL_SetupStage+0x54>
 8004978:	2b02      	cmp	r3, #2
 800497a:	d011      	beq.n	80049a0 <USBD_LL_SetupStage+0x64>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d117      	bne.n	80049b0 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004986:	4619      	mov	r1, r3
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f987 	bl	8004c9c <USBD_StdDevReq>
    break;
 800498e:	e01a      	b.n	80049c6 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004996:	4619      	mov	r1, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f9cf 	bl	8004d3c <USBD_StdItfReq>
    break;
 800499e:	e012      	b.n	80049c6 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f9fa 	bl	8004da2 <USBD_StdEPReq>
    break;
 80049ae:	e00a      	b.n	80049c6 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80049b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	4619      	mov	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f001 fa76 	bl	8005eb0 <USBD_LL_StallEP>
    break;
 80049c4:	bf00      	nop
  }  
  return USBD_OK;  
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	460b      	mov	r3, r1
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80049de:	7afb      	ldrb	r3, [r7, #11]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d138      	bne.n	8004a56 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80049ea:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d142      	bne.n	8004a7c <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d914      	bls.n	8004a2c <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	bf28      	it	cs
 8004a1c:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 fdc3 	bl	80055b0 <USBD_CtlContinueRx>
 8004a2a:	e027      	b.n	8004a7c <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d105      	bne.n	8004a4e <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fdc0 	bl	80055d4 <USBD_CtlSendStatus>
 8004a54:	e012      	b.n	8004a7c <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00c      	beq.n	8004a7c <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d107      	bne.n	8004a7c <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	7afa      	ldrb	r2, [r7, #11]
 8004a76:	4611      	mov	r1, r2
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	4798      	blx	r3
  }  
  return USBD_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004a94:	7afb      	ldrb	r3, [r7, #11]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d16c      	bne.n	8004b74 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d157      	bne.n	8004b5a <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d915      	bls.n	8004ae2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	1ad2      	subs	r2, r2, r3
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fd5c 	bl	800558c <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2100      	movs	r1, #0
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f001 faea 	bl	80060b4 <USBD_LL_PrepareReceive>
 8004ae0:	e03b      	b.n	8004b5a <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	68d2      	ldr	r2, [r2, #12]
 8004aea:	fbb3 f1f2 	udiv	r1, r3, r2
 8004aee:	fb02 f201 	mul.w	r2, r2, r1
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d11c      	bne.n	8004b32 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d316      	bcc.n	8004b32 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d20f      	bcs.n	8004b32 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004b12:	2200      	movs	r2, #0
 8004b14:	2100      	movs	r1, #0
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fd38 	bl	800558c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004b24:	2300      	movs	r3, #0
 8004b26:	2200      	movs	r2, #0
 8004b28:	2100      	movs	r1, #0
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f001 fac2 	bl	80060b4 <USBD_LL_PrepareReceive>
 8004b30:	e013      	b.n	8004b5a <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d105      	bne.n	8004b54 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 fd50 	bl	80055fa <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d11a      	bne.n	8004b9a <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f7ff fead 	bl	80048c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8004b72:	e012      	b.n	8004b9a <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00c      	beq.n	8004b9a <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d107      	bne.n	8004b9a <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	7afa      	ldrb	r2, [r7, #11]
 8004b94:	4611      	mov	r1, r2
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	4798      	blx	r3
  }  
  return USBD_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004bac:	2340      	movs	r3, #64	; 0x40
 8004bae:	2200      	movs	r2, #0
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f001 f908 	bl	8005dc8 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2240      	movs	r2, #64	; 0x40
 8004bbc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004bc0:	2340      	movs	r3, #64	; 0x40
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2180      	movs	r1, #128	; 0x80
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f001 f8fe 	bl	8005dc8 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2240      	movs	r2, #64	; 0x40
 8004bd0:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d009      	beq.n	8004bf8 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6852      	ldr	r2, [r2, #4]
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	4798      	blx	r3
 
  
  return USBD_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	78fa      	ldrb	r2, [r7, #3]
 8004c12:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2204      	movs	r2, #4
 8004c38:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr

08004c48 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d10b      	bne.n	8004c92 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	785b      	ldrb	r3, [r3, #1]
 8004cae:	2b09      	cmp	r3, #9
 8004cb0:	d839      	bhi.n	8004d26 <USBD_StdDevReq+0x8a>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <USBD_StdDevReq+0x1c>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004d09 	.word	0x08004d09
 8004cbc:	08004d1d 	.word	0x08004d1d
 8004cc0:	08004d27 	.word	0x08004d27
 8004cc4:	08004d13 	.word	0x08004d13
 8004cc8:	08004d27 	.word	0x08004d27
 8004ccc:	08004ceb 	.word	0x08004ceb
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004d27 	.word	0x08004d27
 8004cd8:	08004cff 	.word	0x08004cff
 8004cdc:	08004cf5 	.word	0x08004cf5
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8004ce0:	6839      	ldr	r1, [r7, #0]
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f936 	bl	8004f54 <USBD_GetDescriptor>
    break;
 8004ce8:	e022      	b.n	8004d30 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8004cea:	6839      	ldr	r1, [r7, #0]
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fa25 	bl	800513c <USBD_SetAddress>
    break;
 8004cf2:	e01d      	b.n	8004d30 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8004cf4:	6839      	ldr	r1, [r7, #0]
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fa5e 	bl	80051b8 <USBD_SetConfig>
    break;
 8004cfc:	e018      	b.n	8004d30 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8004cfe:	6839      	ldr	r1, [r7, #0]
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fae1 	bl	80052c8 <USBD_GetConfig>
    break;
 8004d06:	e013      	b.n	8004d30 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8004d08:	6839      	ldr	r1, [r7, #0]
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fb0e 	bl	800532c <USBD_GetStatus>
    break;
 8004d10:	e00e      	b.n	8004d30 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8004d12:	6839      	ldr	r1, [r7, #0]
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fb33 	bl	8005380 <USBD_SetFeature>
    break;
 8004d1a:	e009      	b.n	8004d30 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8004d1c:	6839      	ldr	r1, [r7, #0]
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fb49 	bl	80053b6 <USBD_ClrFeature>
    break;
 8004d24:	e004      	b.n	8004d30 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8004d26:	6839      	ldr	r1, [r7, #0]
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fba8 	bl	800547e <USBD_CtlError>
    break;
 8004d2e:	bf00      	nop
  }
  
  return ret;
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop

08004d3c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8004d46:	2300      	movs	r3, #0
 8004d48:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d11b      	bne.n	8004d8c <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	889b      	ldrh	r3, [r3, #4]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d811      	bhi.n	8004d82 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	88db      	ldrh	r3, [r3, #6]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d110      	bne.n	8004d96 <USBD_StdItfReq+0x5a>
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10d      	bne.n	8004d96 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fc2a 	bl	80055d4 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8004d80:	e009      	b.n	8004d96 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8004d82:	6839      	ldr	r1, [r7, #0]
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fb7a 	bl	800547e <USBD_CtlError>
    break;
 8004d8a:	e004      	b.n	8004d96 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fb75 	bl	800547e <USBD_CtlError>
    break;
 8004d94:	e000      	b.n	8004d98 <USBD_StdItfReq+0x5c>
    break;
 8004d96:	bf00      	nop
  }
  return USBD_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	889b      	ldrh	r3, [r3, #4]
 8004db4:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d108      	bne.n	8004dd4 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	6839      	ldr	r1, [r7, #0]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4798      	blx	r3
    
    return USBD_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e0ba      	b.n	8004f4a <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	785b      	ldrb	r3, [r3, #1]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d039      	beq.n	8004e50 <USBD_StdEPReq+0xae>
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d002      	beq.n	8004de6 <USBD_StdEPReq+0x44>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d06b      	beq.n	8004ebc <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8004de4:	e0b0      	b.n	8004f48 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d002      	beq.n	8004df6 <USBD_StdEPReq+0x54>
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d00c      	beq.n	8004e0e <USBD_StdEPReq+0x6c>
 8004df4:	e025      	b.n	8004e42 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004df6:	7bbb      	ldrb	r3, [r7, #14]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d027      	beq.n	8004e4c <USBD_StdEPReq+0xaa>
 8004dfc:	7bbb      	ldrb	r3, [r7, #14]
 8004dfe:	2b80      	cmp	r3, #128	; 0x80
 8004e00:	d024      	beq.n	8004e4c <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8004e02:	7bbb      	ldrb	r3, [r7, #14]
 8004e04:	4619      	mov	r1, r3
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f001 f852 	bl	8005eb0 <USBD_LL_StallEP>
      break;	
 8004e0c:	e01e      	b.n	8004e4c <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	885b      	ldrh	r3, [r3, #2]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004e16:	7bbb      	ldrb	r3, [r7, #14]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <USBD_StdEPReq+0x8a>
 8004e1c:	7bbb      	ldrb	r3, [r7, #14]
 8004e1e:	2b80      	cmp	r3, #128	; 0x80
 8004e20:	d004      	beq.n	8004e2c <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8004e22:	7bbb      	ldrb	r3, [r7, #14]
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f001 f842 	bl	8005eb0 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	6839      	ldr	r1, [r7, #0]
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fbca 	bl	80055d4 <USBD_CtlSendStatus>
      break;
 8004e40:	e005      	b.n	8004e4e <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fb1a 	bl	800547e <USBD_CtlError>
      break;    
 8004e4a:	e000      	b.n	8004e4e <USBD_StdEPReq+0xac>
      break;	
 8004e4c:	bf00      	nop
    break;
 8004e4e:	e07b      	b.n	8004f48 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d002      	beq.n	8004e60 <USBD_StdEPReq+0xbe>
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d00c      	beq.n	8004e78 <USBD_StdEPReq+0xd6>
 8004e5e:	e024      	b.n	8004eaa <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004e60:	7bbb      	ldrb	r3, [r7, #14]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d026      	beq.n	8004eb4 <USBD_StdEPReq+0x112>
 8004e66:	7bbb      	ldrb	r3, [r7, #14]
 8004e68:	2b80      	cmp	r3, #128	; 0x80
 8004e6a:	d023      	beq.n	8004eb4 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8004e6c:	7bbb      	ldrb	r3, [r7, #14]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f001 f81d 	bl	8005eb0 <USBD_LL_StallEP>
      break;	
 8004e76:	e01d      	b.n	8004eb4 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	885b      	ldrh	r3, [r3, #2]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d11b      	bne.n	8004eb8 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8004e80:	7bbb      	ldrb	r3, [r7, #14]
 8004e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004e8a:	7bbb      	ldrb	r3, [r7, #14]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f001 f844 	bl	8005f1c <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	6839      	ldr	r1, [r7, #0]
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fb96 	bl	80055d4 <USBD_CtlSendStatus>
      break;
 8004ea8:	e006      	b.n	8004eb8 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8004eaa:	6839      	ldr	r1, [r7, #0]
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fae6 	bl	800547e <USBD_CtlError>
      break;    
 8004eb2:	e002      	b.n	8004eba <USBD_StdEPReq+0x118>
      break;	
 8004eb4:	bf00      	nop
 8004eb6:	e047      	b.n	8004f48 <USBD_StdEPReq+0x1a6>
      break;
 8004eb8:	bf00      	nop
    break;
 8004eba:	e045      	b.n	8004f48 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d002      	beq.n	8004ecc <USBD_StdEPReq+0x12a>
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d00b      	beq.n	8004ee2 <USBD_StdEPReq+0x140>
 8004eca:	e036      	b.n	8004f3a <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8004ecc:	7bbb      	ldrb	r3, [r7, #14]
 8004ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d036      	beq.n	8004f44 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8004ed6:	7bbb      	ldrb	r3, [r7, #14]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 ffe8 	bl	8005eb0 <USBD_LL_StallEP>
      break;	
 8004ee0:	e030      	b.n	8004f44 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004ee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	da08      	bge.n	8004efc <USBD_StdEPReq+0x15a>
 8004eea:	7bbb      	ldrb	r3, [r7, #14]
 8004eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3304      	adds	r3, #4
 8004efa:	e007      	b.n	8004f0c <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8004efc:	7bbb      	ldrb	r3, [r7, #14]
 8004efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004f02:	3310      	adds	r3, #16
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	4413      	add	r3, r2
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004f0e:	7bbb      	ldrb	r3, [r7, #14]
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f001 f838 	bl	8005f88 <USBD_LL_IsStallEP>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2201      	movs	r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	e002      	b.n	8004f2c <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8004f2c:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8004f2e:	2202      	movs	r2, #2
 8004f30:	4619      	mov	r1, r3
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fb0e 	bl	8005554 <USBD_CtlSendData>
      break;
 8004f38:	e005      	b.n	8004f46 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8004f3a:	6839      	ldr	r1, [r7, #0]
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fa9e 	bl	800547e <USBD_CtlError>
      break;
 8004f42:	e000      	b.n	8004f46 <USBD_StdEPReq+0x1a4>
      break;	
 8004f44:	bf00      	nop
    break;
 8004f46:	bf00      	nop
  }
  return ret;
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	885b      	ldrh	r3, [r3, #2]
 8004f62:	0a1b      	lsrs	r3, r3, #8
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b01      	subs	r3, #1
 8004f68:	2b06      	cmp	r3, #6
 8004f6a:	f200 80c9 	bhi.w	8005100 <USBD_GetDescriptor+0x1ac>
 8004f6e:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <USBD_GetDescriptor+0x20>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	08004fa9 	.word	0x08004fa9
 8004f7c:	08004fe9 	.word	0x08004fe9
 8004f80:	08005101 	.word	0x08005101
 8004f84:	08005101 	.word	0x08005101
 8004f88:	080050ad 	.word	0x080050ad
 8004f8c:	080050d3 	.word	0x080050d3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	7c12      	ldrb	r2, [r2, #16]
 8004f9c:	f107 010a 	add.w	r1, r7, #10
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	4798      	blx	r3
 8004fa4:	60f8      	str	r0, [r7, #12]
    break;
 8004fa6:	e0b0      	b.n	800510a <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	7c1b      	ldrb	r3, [r3, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10d      	bne.n	8004fcc <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	f107 020a 	add.w	r2, r7, #10
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4798      	blx	r3
 8004fc0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004fca:	e09e      	b.n	800510a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	f107 020a 	add.w	r2, r7, #10
 8004fd8:	4610      	mov	r0, r2
 8004fda:	4798      	blx	r3
 8004fdc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	701a      	strb	r2, [r3, #0]
    break;
 8004fe6:	e090      	b.n	800510a <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	885b      	ldrh	r3, [r3, #2]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b05      	cmp	r3, #5
 8004ff0:	d856      	bhi.n	80050a0 <USBD_GetDescriptor+0x14c>
 8004ff2:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <USBD_GetDescriptor+0xa4>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	08005011 	.word	0x08005011
 8004ffc:	08005029 	.word	0x08005029
 8005000:	08005041 	.word	0x08005041
 8005004:	08005059 	.word	0x08005059
 8005008:	08005071 	.word	0x08005071
 800500c:	08005089 	.word	0x08005089
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	7c12      	ldrb	r2, [r2, #16]
 800501c:	f107 010a 	add.w	r1, r7, #10
 8005020:	4610      	mov	r0, r2
 8005022:	4798      	blx	r3
 8005024:	60f8      	str	r0, [r7, #12]
      break;
 8005026:	e040      	b.n	80050aa <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	7c12      	ldrb	r2, [r2, #16]
 8005034:	f107 010a 	add.w	r1, r7, #10
 8005038:	4610      	mov	r0, r2
 800503a:	4798      	blx	r3
 800503c:	60f8      	str	r0, [r7, #12]
      break;
 800503e:	e034      	b.n	80050aa <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	7c12      	ldrb	r2, [r2, #16]
 800504c:	f107 010a 	add.w	r1, r7, #10
 8005050:	4610      	mov	r0, r2
 8005052:	4798      	blx	r3
 8005054:	60f8      	str	r0, [r7, #12]
      break;
 8005056:	e028      	b.n	80050aa <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	7c12      	ldrb	r2, [r2, #16]
 8005064:	f107 010a 	add.w	r1, r7, #10
 8005068:	4610      	mov	r0, r2
 800506a:	4798      	blx	r3
 800506c:	60f8      	str	r0, [r7, #12]
      break;
 800506e:	e01c      	b.n	80050aa <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	7c12      	ldrb	r2, [r2, #16]
 800507c:	f107 010a 	add.w	r1, r7, #10
 8005080:	4610      	mov	r0, r2
 8005082:	4798      	blx	r3
 8005084:	60f8      	str	r0, [r7, #12]
      break;
 8005086:	e010      	b.n	80050aa <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	7c12      	ldrb	r2, [r2, #16]
 8005094:	f107 010a 	add.w	r1, r7, #10
 8005098:	4610      	mov	r0, r2
 800509a:	4798      	blx	r3
 800509c:	60f8      	str	r0, [r7, #12]
      break;
 800509e:	e004      	b.n	80050aa <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80050a0:	6839      	ldr	r1, [r7, #0]
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f9eb 	bl	800547e <USBD_CtlError>
      return;
 80050a8:	e044      	b.n	8005134 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 80050aa:	e02e      	b.n	800510a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	7c1b      	ldrb	r3, [r3, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d109      	bne.n	80050c8 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050bc:	f107 020a 	add.w	r2, r7, #10
 80050c0:	4610      	mov	r0, r2
 80050c2:	4798      	blx	r3
 80050c4:	60f8      	str	r0, [r7, #12]
      break;
 80050c6:	e020      	b.n	800510a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80050c8:	6839      	ldr	r1, [r7, #0]
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f9d7 	bl	800547e <USBD_CtlError>
      return;
 80050d0:	e030      	b.n	8005134 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	7c1b      	ldrb	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10d      	bne.n	80050f6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f107 020a 	add.w	r2, r7, #10
 80050e6:	4610      	mov	r0, r2
 80050e8:	4798      	blx	r3
 80050ea:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3301      	adds	r3, #1
 80050f0:	2207      	movs	r2, #7
 80050f2:	701a      	strb	r2, [r3, #0]
      break; 
 80050f4:	e009      	b.n	800510a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80050f6:	6839      	ldr	r1, [r7, #0]
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f9c0 	bl	800547e <USBD_CtlError>
      return;
 80050fe:	e019      	b.n	8005134 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8005100:	6839      	ldr	r1, [r7, #0]
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9bb 	bl	800547e <USBD_CtlError>
    return;
 8005108:	e014      	b.n	8005134 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800510a:	897b      	ldrh	r3, [r7, #10]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d011      	beq.n	8005134 <USBD_GetDescriptor+0x1e0>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	88db      	ldrh	r3, [r3, #6]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00d      	beq.n	8005134 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	88da      	ldrh	r2, [r3, #6]
 800511c:	897b      	ldrh	r3, [r7, #10]
 800511e:	4293      	cmp	r3, r2
 8005120:	bf28      	it	cs
 8005122:	4613      	movcs	r3, r2
 8005124:	b29b      	uxth	r3, r3
 8005126:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8005128:	897b      	ldrh	r3, [r7, #10]
 800512a:	461a      	mov	r2, r3
 800512c:	68f9      	ldr	r1, [r7, #12]
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fa10 	bl	8005554 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop

0800513c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	889b      	ldrh	r3, [r3, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d12c      	bne.n	80051a8 <USBD_SetAddress+0x6c>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	88db      	ldrh	r3, [r3, #6]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d128      	bne.n	80051a8 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	885b      	ldrh	r3, [r3, #2]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005160:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005168:	2b03      	cmp	r3, #3
 800516a:	d104      	bne.n	8005176 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800516c:	6839      	ldr	r1, [r7, #0]
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f985 	bl	800547e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005174:	e01c      	b.n	80051b0 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	7bfa      	ldrb	r2, [r7, #15]
 800517a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 ff26 	bl	8005fd4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fa23 	bl	80055d4 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d004      	beq.n	800519e <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800519c:	e008      	b.n	80051b0 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80051a6:	e003      	b.n	80051b0 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80051a8:	6839      	ldr	r1, [r7, #0]
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f967 	bl	800547e <USBD_CtlError>
  } 
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	885b      	ldrh	r3, [r3, #2]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	4b3e      	ldr	r3, [pc, #248]	; (80052c4 <USBD_SetConfig+0x10c>)
 80051ca:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80051cc:	4b3d      	ldr	r3, [pc, #244]	; (80052c4 <USBD_SetConfig+0x10c>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d904      	bls.n	80051de <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f951 	bl	800547e <USBD_CtlError>
 80051dc:	e06f      	b.n	80052be <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d002      	beq.n	80051ee <USBD_SetConfig+0x36>
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d023      	beq.n	8005234 <USBD_SetConfig+0x7c>
 80051ec:	e062      	b.n	80052b4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80051ee:	4b35      	ldr	r3, [pc, #212]	; (80052c4 <USBD_SetConfig+0x10c>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01a      	beq.n	800522c <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80051f6:	4b33      	ldr	r3, [pc, #204]	; (80052c4 <USBD_SetConfig+0x10c>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2203      	movs	r2, #3
 8005204:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005208:	4b2e      	ldr	r3, [pc, #184]	; (80052c4 <USBD_SetConfig+0x10c>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff fb62 	bl	80048d8 <USBD_SetClassConfig>
 8005214:	4603      	mov	r3, r0
 8005216:	2b02      	cmp	r3, #2
 8005218:	d104      	bne.n	8005224 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f92e 	bl	800547e <USBD_CtlError>
          return;
 8005222:	e04c      	b.n	80052be <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f9d5 	bl	80055d4 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800522a:	e048      	b.n	80052be <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f9d1 	bl	80055d4 <USBD_CtlSendStatus>
      break;
 8005232:	e044      	b.n	80052be <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8005234:	4b23      	ldr	r3, [pc, #140]	; (80052c4 <USBD_SetConfig+0x10c>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d112      	bne.n	8005262 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8005244:	4b1f      	ldr	r3, [pc, #124]	; (80052c4 <USBD_SetConfig+0x10c>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800524e:	4b1d      	ldr	r3, [pc, #116]	; (80052c4 <USBD_SetConfig+0x10c>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fb5e 	bl	8004916 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f9ba 	bl	80055d4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005260:	e02d      	b.n	80052be <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8005262:	4b18      	ldr	r3, [pc, #96]	; (80052c4 <USBD_SetConfig+0x10c>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	429a      	cmp	r2, r3
 800526e:	d01d      	beq.n	80052ac <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff fb4c 	bl	8004916 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800527e:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <USBD_SetConfig+0x10c>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005288:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <USBD_SetConfig+0x10c>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	4619      	mov	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff fb22 	bl	80048d8 <USBD_SetClassConfig>
 8005294:	4603      	mov	r3, r0
 8005296:	2b02      	cmp	r3, #2
 8005298:	d104      	bne.n	80052a4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800529a:	6839      	ldr	r1, [r7, #0]
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f8ee 	bl	800547e <USBD_CtlError>
          return;
 80052a2:	e00c      	b.n	80052be <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f995 	bl	80055d4 <USBD_CtlSendStatus>
      break;
 80052aa:	e008      	b.n	80052be <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f991 	bl	80055d4 <USBD_CtlSendStatus>
      break;
 80052b2:	e004      	b.n	80052be <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f8e1 	bl	800547e <USBD_CtlError>
      break;
 80052bc:	bf00      	nop
    }
  }
}
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20000327 	.word	0x20000327

080052c8 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	88db      	ldrh	r3, [r3, #6]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d004      	beq.n	80052e4 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80052da:	6839      	ldr	r1, [r7, #0]
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f8ce 	bl	800547e <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80052e2:	e01f      	b.n	8005324 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d002      	beq.n	80052f4 <USBD_GetConfig+0x2c>
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d00b      	beq.n	800530a <USBD_GetConfig+0x42>
 80052f2:	e012      	b.n	800531a <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 80052fe:	2201      	movs	r2, #1
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f926 	bl	8005554 <USBD_CtlSendData>
      break;
 8005308:	e00c      	b.n	8005324 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 800530e:	2201      	movs	r2, #1
 8005310:	4619      	mov	r1, r3
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f91e 	bl	8005554 <USBD_CtlSendData>
      break;
 8005318:	e004      	b.n	8005324 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800531a:	6839      	ldr	r1, [r7, #0]
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f8ae 	bl	800547e <USBD_CtlError>
      break;
 8005322:	bf00      	nop
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800533c:	3b02      	subs	r3, #2
 800533e:	2b01      	cmp	r3, #1
 8005340:	d815      	bhi.n	800536e <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f043 0202 	orr.w	r2, r3, #2
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8005362:	2202      	movs	r2, #2
 8005364:	4619      	mov	r1, r3
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f8f4 	bl	8005554 <USBD_CtlSendData>
                      2);
    break;
 800536c:	e004      	b.n	8005378 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800536e:	6839      	ldr	r1, [r7, #0]
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f884 	bl	800547e <USBD_CtlError>
    break;
 8005376:	bf00      	nop
  }
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	885b      	ldrh	r3, [r3, #2]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d10d      	bne.n	80053ae <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	6839      	ldr	r1, [r7, #0]
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f913 	bl	80055d4 <USBD_CtlSendStatus>
  }

}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80053c6:	3b02      	subs	r3, #2
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d812      	bhi.n	80053f2 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	885b      	ldrh	r3, [r3, #2]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d113      	bne.n	80053fc <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f8f2 	bl	80055d4 <USBD_CtlSendStatus>
    }
    break;
 80053f0:	e004      	b.n	80053fc <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80053f2:	6839      	ldr	r1, [r7, #0]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f842 	bl	800547e <USBD_CtlError>
    break;
 80053fa:	e000      	b.n	80053fe <USBD_ClrFeature+0x48>
    break;
 80053fc:	bf00      	nop
  }
}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781a      	ldrb	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	785a      	ldrb	r2, [r3, #1]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	3302      	adds	r3, #2
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	b29a      	uxth	r2, r3
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	3303      	adds	r3, #3
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	b29b      	uxth	r3, r3
 8005434:	4413      	add	r3, r2
 8005436:	b29a      	uxth	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	3304      	adds	r3, #4
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	b29a      	uxth	r2, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	3305      	adds	r3, #5
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	b29b      	uxth	r3, r3
 8005450:	4413      	add	r3, r2
 8005452:	b29a      	uxth	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	3306      	adds	r3, #6
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	b29a      	uxth	r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	3307      	adds	r3, #7
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	b29b      	uxth	r3, r3
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	b29b      	uxth	r3, r3
 800546c:	4413      	add	r3, r2
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	80da      	strh	r2, [r3, #6]

}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr

0800547e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8005488:	2180      	movs	r1, #128	; 0x80
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fd10 	bl	8005eb0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8005490:	2100      	movs	r1, #0
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fd0c 	bl	8005eb0 <USBD_LL_StallEP>
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d033      	beq.n	800551e <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f835 	bl	8005526 <USBD_GetLen>
 80054bc:	4603      	mov	r3, r0
 80054be:	3301      	adds	r3, #1
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80054ca:	7dfb      	ldrb	r3, [r7, #23]
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	75fa      	strb	r2, [r7, #23]
 80054d0:	461a      	mov	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4413      	add	r3, r2
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	8812      	ldrh	r2, [r2, #0]
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80054de:	7dfb      	ldrb	r3, [r7, #23]
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	75fa      	strb	r2, [r7, #23]
 80054e4:	461a      	mov	r2, r3
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	4413      	add	r3, r2
 80054ea:	2203      	movs	r2, #3
 80054ec:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80054ee:	e012      	b.n	8005516 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	75fa      	strb	r2, [r7, #23]
 80054f6:	461a      	mov	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	441a      	add	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	1c59      	adds	r1, r3, #1
 8005500:	60f9      	str	r1, [r7, #12]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	75fa      	strb	r2, [r7, #23]
 800550c:	461a      	mov	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4413      	add	r3, r2
 8005512:	2200      	movs	r2, #0
 8005514:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e8      	bne.n	80054f0 <USBD_GetString+0x50>
    }
  } 
}
 800551e:	bf00      	nop
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8005532:	e005      	b.n	8005540 <USBD_GetLen+0x1a>
    {
        len++;
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	3301      	adds	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
        buf++;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3301      	adds	r3, #1
 800553e:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1f5      	bne.n	8005534 <USBD_GetLen+0xe>
    }

    return len;
 8005548:	7bfb      	ldrb	r3, [r7, #15]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2202      	movs	r2, #2
 8005566:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800556a:	88fa      	ldrh	r2, [r7, #6]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8005570:	88fa      	ldrh	r2, [r7, #6]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	2100      	movs	r1, #0
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 fd5f 	bl	8006040 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	2100      	movs	r1, #0
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 fd4d 	bl	8006040 <USBD_LL_Transmit>
  
  return USBD_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	4613      	mov	r3, r2
 80055bc:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	2100      	movs	r1, #0
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fd75 	bl	80060b4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2204      	movs	r2, #4
 80055e0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80055e4:	2300      	movs	r3, #0
 80055e6:	2200      	movs	r2, #0
 80055e8:	2100      	movs	r1, #0
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fd28 	bl	8006040 <USBD_LL_Transmit>
  
  return USBD_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2205      	movs	r2, #5
 8005606:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800560a:	2300      	movs	r3, #0
 800560c:	2200      	movs	r2, #0
 800560e:	2100      	movs	r1, #0
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fd4f 	bl	80060b4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <_write>:

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

int _write(int fd, char *str, int len)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	e00b      	b.n	800564a <_write+0x2a>
	{
		//__io_putchar((*str++));
		HAL_UART_Transmit(&huart3, (uint8_t *)&str[i], 1, 0xFFFF);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	18d1      	adds	r1, r2, r3
 8005638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800563c:	2201      	movs	r2, #1
 800563e:	4807      	ldr	r0, [pc, #28]	; (800565c <_write+0x3c>)
 8005640:	f7fd fa07 	bl	8002a52 <HAL_UART_Transmit>
	for(int i=0;i<len;i++)
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	3301      	adds	r3, #1
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	429a      	cmp	r2, r3
 8005650:	dbef      	blt.n	8005632 <_write+0x12>
	}
	return len;
 8005652:	687b      	ldr	r3, [r7, #4]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20000380 	.word	0x20000380

08005660 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005664:	f7fb f9d4 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005668:	f000 f816 	bl	8005698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800566c:	f000 f8a6 	bl	80057bc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8005670:	f000 fa52 	bl	8005b18 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 8005674:	f000 f874 	bl	8005760 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  initI2C();
 8005678:	f7fa fd86 	bl	8000188 <initI2C>
  initTouch();
 800567c:	f7fb f804 	bl	8000688 <initTouch>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxITBuf, 1);
 8005680:	2201      	movs	r2, #1
 8005682:	4903      	ldr	r1, [pc, #12]	; (8005690 <main+0x30>)
 8005684:	4803      	ldr	r0, [pc, #12]	; (8005694 <main+0x34>)
 8005686:	f7fd fa7c 	bl	8002b82 <HAL_UART_Receive_IT>
  {

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  toucuProc();
 800568a:	f7fb f841 	bl	8000710 <toucuProc>
 800568e:	e7fc      	b.n	800568a <main+0x2a>
 8005690:	2000037c 	.word	0x2000037c
 8005694:	20000380 	.word	0x20000380

08005698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b094      	sub	sp, #80	; 0x50
 800569c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800569e:	2301      	movs	r3, #1
 80056a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80056a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80056a8:	2300      	movs	r3, #0
 80056aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80056ac:	2301      	movs	r3, #1
 80056ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80056b0:	2302      	movs	r3, #2
 80056b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80056b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80056ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80056be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fc fcb7 	bl	8002038 <HAL_RCC_OscConfig>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 80056d0:	21bd      	movs	r1, #189	; 0xbd
 80056d2:	4821      	ldr	r0, [pc, #132]	; (8005758 <SystemClock_Config+0xc0>)
 80056d4:	f000 f90a 	bl	80058ec <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056d8:	230f      	movs	r3, #15
 80056da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056dc:	2302      	movs	r3, #2
 80056de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80056e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80056ea:	2300      	movs	r3, #0
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80056ee:	f107 0314 	add.w	r3, r7, #20
 80056f2:	2101      	movs	r1, #1
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fc ff03 	bl	8002500 <HAL_RCC_ClockConfig>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <SystemClock_Config+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005700:	21cb      	movs	r1, #203	; 0xcb
 8005702:	4815      	ldr	r0, [pc, #84]	; (8005758 <SystemClock_Config+0xc0>)
 8005704:	f000 f8f2 	bl	80058ec <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005708:	2310      	movs	r3, #16
 800570a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800570c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005710:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005712:	1d3b      	adds	r3, r7, #4
 8005714:	4618      	mov	r0, r3
 8005716:	f7fd f899 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <SystemClock_Config+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005720:	21d2      	movs	r1, #210	; 0xd2
 8005722:	480d      	ldr	r0, [pc, #52]	; (8005758 <SystemClock_Config+0xc0>)
 8005724:	f000 f8e2 	bl	80058ec <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005728:	f7fd f840 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 800572c:	4602      	mov	r2, r0
 800572e:	4b0b      	ldr	r3, [pc, #44]	; (800575c <SystemClock_Config+0xc4>)
 8005730:	fba3 2302 	umull	r2, r3, r3, r2
 8005734:	099b      	lsrs	r3, r3, #6
 8005736:	4618      	mov	r0, r3
 8005738:	f7fb fae9 	bl	8000d0e <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800573c:	2004      	movs	r0, #4
 800573e:	f7fb faf3 	bl	8000d28 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005742:	2200      	movs	r2, #0
 8005744:	2100      	movs	r1, #0
 8005746:	f04f 30ff 	mov.w	r0, #4294967295
 800574a:	f7fb fab6 	bl	8000cba <HAL_NVIC_SetPriority>
}
 800574e:	bf00      	nop
 8005750:	3750      	adds	r7, #80	; 0x50
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	080072f4 	.word	0x080072f4
 800575c:	10624dd3 	.word	0x10624dd3

08005760 <MX_USART3_UART_Init>:

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8005764:	4b12      	ldr	r3, [pc, #72]	; (80057b0 <MX_USART3_UART_Init+0x50>)
 8005766:	4a13      	ldr	r2, [pc, #76]	; (80057b4 <MX_USART3_UART_Init+0x54>)
 8005768:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800576a:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <MX_USART3_UART_Init+0x50>)
 800576c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005770:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005772:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <MX_USART3_UART_Init+0x50>)
 8005774:	2200      	movs	r2, #0
 8005776:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005778:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <MX_USART3_UART_Init+0x50>)
 800577a:	2200      	movs	r2, #0
 800577c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800577e:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <MX_USART3_UART_Init+0x50>)
 8005780:	2200      	movs	r2, #0
 8005782:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005784:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <MX_USART3_UART_Init+0x50>)
 8005786:	220c      	movs	r2, #12
 8005788:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800578a:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <MX_USART3_UART_Init+0x50>)
 800578c:	2200      	movs	r2, #0
 800578e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <MX_USART3_UART_Init+0x50>)
 8005792:	2200      	movs	r2, #0
 8005794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005796:	4806      	ldr	r0, [pc, #24]	; (80057b0 <MX_USART3_UART_Init+0x50>)
 8005798:	f7fd f90e 	bl	80029b8 <HAL_UART_Init>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <MX_USART3_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80057a2:	21ef      	movs	r1, #239	; 0xef
 80057a4:	4804      	ldr	r0, [pc, #16]	; (80057b8 <MX_USART3_UART_Init+0x58>)
 80057a6:	f000 f8a1 	bl	80058ec <_Error_Handler>
  }

}
 80057aa:	bf00      	nop
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000380 	.word	0x20000380
 80057b4:	40004800 	.word	0x40004800
 80057b8:	080072f4 	.word	0x080072f4

080057bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80057c2:	4a2e      	ldr	r2, [pc, #184]	; (800587c <MX_GPIO_Init+0xc0>)
 80057c4:	4b2d      	ldr	r3, [pc, #180]	; (800587c <MX_GPIO_Init+0xc0>)
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	f043 0320 	orr.w	r3, r3, #32
 80057cc:	6193      	str	r3, [r2, #24]
 80057ce:	4b2b      	ldr	r3, [pc, #172]	; (800587c <MX_GPIO_Init+0xc0>)
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80057da:	4a28      	ldr	r2, [pc, #160]	; (800587c <MX_GPIO_Init+0xc0>)
 80057dc:	4b27      	ldr	r3, [pc, #156]	; (800587c <MX_GPIO_Init+0xc0>)
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f043 0308 	orr.w	r3, r3, #8
 80057e4:	6193      	str	r3, [r2, #24]
 80057e6:	4b25      	ldr	r3, [pc, #148]	; (800587c <MX_GPIO_Init+0xc0>)
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	60bb      	str	r3, [r7, #8]
 80057f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80057f2:	4a22      	ldr	r2, [pc, #136]	; (800587c <MX_GPIO_Init+0xc0>)
 80057f4:	4b21      	ldr	r3, [pc, #132]	; (800587c <MX_GPIO_Init+0xc0>)
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	f043 0304 	orr.w	r3, r3, #4
 80057fc:	6193      	str	r3, [r2, #24]
 80057fe:	4b1f      	ldr	r3, [pc, #124]	; (800587c <MX_GPIO_Init+0xc0>)
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	607b      	str	r3, [r7, #4]
 8005808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_SET);
 800580a:	2201      	movs	r2, #1
 800580c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005810:	481b      	ldr	r0, [pc, #108]	; (8005880 <MX_GPIO_Init+0xc4>)
 8005812:	f7fb fca2 	bl	800115a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005816:	23c0      	movs	r3, #192	; 0xc0
 8005818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800581a:	2311      	movs	r3, #17
 800581c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800581e:	2302      	movs	r3, #2
 8005820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005822:	f107 0310 	add.w	r3, r7, #16
 8005826:	4619      	mov	r1, r3
 8005828:	4815      	ldr	r0, [pc, #84]	; (8005880 <MX_GPIO_Init+0xc4>)
 800582a:	f7fb fb21 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800582e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005834:	2301      	movs	r3, #1
 8005836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005838:	2302      	movs	r3, #2
 800583a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800583c:	f107 0310 	add.w	r3, r7, #16
 8005840:	4619      	mov	r1, r3
 8005842:	480f      	ldr	r0, [pc, #60]	; (8005880 <MX_GPIO_Init+0xc4>)
 8005844:	f7fb fb14 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800584c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800584e:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <MX_GPIO_Init+0xc8>)
 8005850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005852:	2301      	movs	r3, #1
 8005854:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005856:	f107 0310 	add.w	r3, r7, #16
 800585a:	4619      	mov	r1, r3
 800585c:	4808      	ldr	r0, [pc, #32]	; (8005880 <MX_GPIO_Init+0xc4>)
 800585e:	f7fb fb07 	bl	8000e70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005862:	2200      	movs	r2, #0
 8005864:	2100      	movs	r1, #0
 8005866:	2017      	movs	r0, #23
 8005868:	f7fb fa27 	bl	8000cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800586c:	2017      	movs	r0, #23
 800586e:	f7fb fa40 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

}
 8005872:	bf00      	nop
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40021000 	.word	0x40021000
 8005880:	40010c00 	.word	0x40010c00
 8005884:	10210000 	.word	0x10210000

08005888 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a11      	ldr	r2, [pc, #68]	; (80058dc <HAL_UART_RxCpltCallback+0x54>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d11c      	bne.n	80058d4 <HAL_UART_RxCpltCallback+0x4c>
	{
		rxBuf[rxIn] = rxITBuf;
 800589a:	4b11      	ldr	r3, [pc, #68]	; (80058e0 <HAL_UART_RxCpltCallback+0x58>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <HAL_UART_RxCpltCallback+0x5c>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	b2d9      	uxtb	r1, r3
 80058a8:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <HAL_UART_RxCpltCallback+0x60>)
 80058aa:	5499      	strb	r1, [r3, r2]
		rxIn++;
 80058ac:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <HAL_UART_RxCpltCallback+0x58>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	3301      	adds	r3, #1
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <HAL_UART_RxCpltCallback+0x58>)
 80058b8:	701a      	strb	r2, [r3, #0]
		if(rxIn >= 100)
 80058ba:	4b09      	ldr	r3, [pc, #36]	; (80058e0 <HAL_UART_RxCpltCallback+0x58>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b63      	cmp	r3, #99	; 0x63
 80058c2:	d902      	bls.n	80058ca <HAL_UART_RxCpltCallback+0x42>
			rxIn = 0;
 80058c4:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <HAL_UART_RxCpltCallback+0x58>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, (uint8_t*)&rxITBuf, 1);
 80058ca:	2201      	movs	r2, #1
 80058cc:	4905      	ldr	r1, [pc, #20]	; (80058e4 <HAL_UART_RxCpltCallback+0x5c>)
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fd f957 	bl	8002b82 <HAL_UART_Receive_IT>
	}
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40004800 	.word	0x40004800
 80058e0:	20000328 	.word	0x20000328
 80058e4:	2000037c 	.word	0x2000037c
 80058e8:	200003c0 	.word	0x200003c0

080058ec <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80058f6:	e7fe      	b.n	80058f6 <_Error_Handler+0xa>

080058f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80058fe:	4a25      	ldr	r2, [pc, #148]	; (8005994 <HAL_MspInit+0x9c>)
 8005900:	4b24      	ldr	r3, [pc, #144]	; (8005994 <HAL_MspInit+0x9c>)
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	f043 0301 	orr.w	r3, r3, #1
 8005908:	6193      	str	r3, [r2, #24]
 800590a:	4b22      	ldr	r3, [pc, #136]	; (8005994 <HAL_MspInit+0x9c>)
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005916:	2003      	movs	r0, #3
 8005918:	f7fb f9c4 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800591c:	2200      	movs	r2, #0
 800591e:	2100      	movs	r1, #0
 8005920:	f06f 000b 	mvn.w	r0, #11
 8005924:	f7fb f9c9 	bl	8000cba <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005928:	2200      	movs	r2, #0
 800592a:	2100      	movs	r1, #0
 800592c:	f06f 000a 	mvn.w	r0, #10
 8005930:	f7fb f9c3 	bl	8000cba <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005934:	2200      	movs	r2, #0
 8005936:	2100      	movs	r1, #0
 8005938:	f06f 0009 	mvn.w	r0, #9
 800593c:	f7fb f9bd 	bl	8000cba <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005940:	2200      	movs	r2, #0
 8005942:	2100      	movs	r1, #0
 8005944:	f06f 0004 	mvn.w	r0, #4
 8005948:	f7fb f9b7 	bl	8000cba <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800594c:	2200      	movs	r2, #0
 800594e:	2100      	movs	r1, #0
 8005950:	f06f 0003 	mvn.w	r0, #3
 8005954:	f7fb f9b1 	bl	8000cba <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005958:	2200      	movs	r2, #0
 800595a:	2100      	movs	r1, #0
 800595c:	f06f 0001 	mvn.w	r0, #1
 8005960:	f7fb f9ab 	bl	8000cba <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005964:	2200      	movs	r2, #0
 8005966:	2100      	movs	r1, #0
 8005968:	f04f 30ff 	mov.w	r0, #4294967295
 800596c:	f7fb f9a5 	bl	8000cba <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005970:	4b09      	ldr	r3, [pc, #36]	; (8005998 <HAL_MspInit+0xa0>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	607b      	str	r3, [r7, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800597c:	607b      	str	r3, [r7, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005984:	607b      	str	r3, [r7, #4]
 8005986:	4a04      	ldr	r2, [pc, #16]	; (8005998 <HAL_MspInit+0xa0>)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800598c:	bf00      	nop
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40021000 	.word	0x40021000
 8005998:	40010000 	.word	0x40010000

0800599c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <HAL_UART_MspInit+0x78>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d12d      	bne.n	8005a0a <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80059ae:	4a1a      	ldr	r2, [pc, #104]	; (8005a18 <HAL_UART_MspInit+0x7c>)
 80059b0:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <HAL_UART_MspInit+0x7c>)
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059b8:	61d3      	str	r3, [r2, #28]
 80059ba:	4b17      	ldr	r3, [pc, #92]	; (8005a18 <HAL_UART_MspInit+0x7c>)
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
  
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80059c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059cc:	2302      	movs	r3, #2
 80059ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059d0:	2303      	movs	r3, #3
 80059d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059d4:	f107 0310 	add.w	r3, r7, #16
 80059d8:	4619      	mov	r1, r3
 80059da:	4810      	ldr	r0, [pc, #64]	; (8005a1c <HAL_UART_MspInit+0x80>)
 80059dc:	f7fb fa48 	bl	8000e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80059e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059ea:	2301      	movs	r3, #1
 80059ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ee:	f107 0310 	add.w	r3, r7, #16
 80059f2:	4619      	mov	r1, r3
 80059f4:	4809      	ldr	r0, [pc, #36]	; (8005a1c <HAL_UART_MspInit+0x80>)
 80059f6:	f7fb fa3b 	bl	8000e70 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80059fa:	2200      	movs	r2, #0
 80059fc:	2100      	movs	r1, #0
 80059fe:	2027      	movs	r0, #39	; 0x27
 8005a00:	f7fb f95b 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005a04:	2027      	movs	r0, #39	; 0x27
 8005a06:	f7fb f974 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005a0a:	bf00      	nop
 8005a0c:	3720      	adds	r7, #32
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40004800 	.word	0x40004800
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	40010c00 	.word	0x40010c00

08005a20 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005a24:	bf00      	nop
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr

08005a2c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a30:	e7fe      	b.n	8005a30 <HardFault_Handler+0x4>

08005a32 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8005a32:	b480      	push	{r7}
 8005a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a36:	e7fe      	b.n	8005a36 <MemManage_Handler+0x4>

08005a38 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a3c:	e7fe      	b.n	8005a3c <BusFault_Handler+0x4>

08005a3e <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a42:	e7fe      	b.n	8005a42 <UsageFault_Handler+0x4>

08005a44 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a48:	bf00      	nop
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr

08005a50 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a54:	bf00      	nop
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr

08005a5c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a60:	bf00      	nop
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr

08005a68 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a6c:	f7fb f816 	bl	8000a9c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8005a70:	f7fb f976 	bl	8000d60 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a74:	bf00      	nop
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005a7c:	4802      	ldr	r0, [pc, #8]	; (8005a88 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8005a7e:	f7fb fc9d 	bl	80013bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8005a82:	bf00      	nop
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000648 	.word	0x20000648

08005a8c <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005a90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005a94:	f7fb fb7a 	bl	800118c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005a98:	bf00      	nop
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <USART3_IRQHandler>:

/**
* @brief This function handles USART3 global interrupt.
*/
void USART3_IRQHandler(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005aa0:	4802      	ldr	r0, [pc, #8]	; (8005aac <USART3_IRQHandler+0x10>)
 8005aa2:	f7fd f8c3 	bl	8002c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005aa6:	bf00      	nop
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	20000380 	.word	0x20000380

08005ab0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005ab4:	4a15      	ldr	r2, [pc, #84]	; (8005b0c <SystemInit+0x5c>)
 8005ab6:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <SystemInit+0x5c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f043 0301 	orr.w	r3, r3, #1
 8005abe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005ac0:	4912      	ldr	r1, [pc, #72]	; (8005b0c <SystemInit+0x5c>)
 8005ac2:	4b12      	ldr	r3, [pc, #72]	; (8005b0c <SystemInit+0x5c>)
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <SystemInit+0x60>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005acc:	4a0f      	ldr	r2, [pc, #60]	; (8005b0c <SystemInit+0x5c>)
 8005ace:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <SystemInit+0x5c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ada:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005adc:	4a0b      	ldr	r2, [pc, #44]	; (8005b0c <SystemInit+0x5c>)
 8005ade:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <SystemInit+0x5c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ae6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005ae8:	4a08      	ldr	r2, [pc, #32]	; (8005b0c <SystemInit+0x5c>)
 8005aea:	4b08      	ldr	r3, [pc, #32]	; (8005b0c <SystemInit+0x5c>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005af2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <SystemInit+0x5c>)
 8005af6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005afa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005afc:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <SystemInit+0x64>)
 8005afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b02:	609a      	str	r2, [r3, #8]
#endif 
}
 8005b04:	bf00      	nop
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	f8ff0000 	.word	0xf8ff0000
 8005b14:	e000ed00 	.word	0xe000ed00

08005b18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	4906      	ldr	r1, [pc, #24]	; (8005b38 <MX_USB_DEVICE_Init+0x20>)
 8005b20:	4806      	ldr	r0, [pc, #24]	; (8005b3c <MX_USB_DEVICE_Init+0x24>)
 8005b22:	f7fe fe7f 	bl	8004824 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 8005b26:	4906      	ldr	r1, [pc, #24]	; (8005b40 <MX_USB_DEVICE_Init+0x28>)
 8005b28:	4804      	ldr	r0, [pc, #16]	; (8005b3c <MX_USB_DEVICE_Init+0x24>)
 8005b2a:	f7fe fea6 	bl	800487a <USBD_RegisterClass>

  USBD_Start(&hUsbDeviceFS);
 8005b2e:	4803      	ldr	r0, [pc, #12]	; (8005b3c <MX_USB_DEVICE_Init+0x24>)
 8005b30:	f7fe febc 	bl	80048ac <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005b34:	bf00      	nop
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20000258 	.word	0x20000258
 8005b3c:	20000424 	.word	0x20000424
 8005b40:	20000008 	.word	0x20000008

08005b44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a0d      	ldr	r2, [pc, #52]	; (8005b88 <HAL_PCD_MspInit+0x44>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d113      	bne.n	8005b7e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005b56:	4a0d      	ldr	r2, [pc, #52]	; (8005b8c <HAL_PCD_MspInit+0x48>)
 8005b58:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <HAL_PCD_MspInit+0x48>)
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b60:	61d3      	str	r3, [r2, #28]
 8005b62:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <HAL_PCD_MspInit+0x48>)
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2100      	movs	r1, #0
 8005b72:	2014      	movs	r0, #20
 8005b74:	f7fb f8a1 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005b78:	2014      	movs	r0, #20
 8005b7a:	f7fb f8ba 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005b7e:	bf00      	nop
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40005c00 	.word	0x40005c00
 8005b8c:	40021000 	.word	0x40021000

08005b90 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	f7fe fec8 	bl	800493c <USBD_LL_SetupStage>
}
 8005bac:	bf00      	nop
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	015b      	lsls	r3, r3, #5
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	f7fe fefa 	bl	80049d0 <USBD_LL_DataOutStage>
}
 8005bdc:	bf00      	nop
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	015b      	lsls	r3, r3, #5
 8005bfc:	4413      	add	r3, r2
 8005bfe:	333c      	adds	r3, #60	; 0x3c
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	4619      	mov	r1, r3
 8005c06:	f7fe ff3e 	bl	8004a86 <USBD_LL_DataInStage>
}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff f821 	bl	8004c68 <USBD_LL_SOF>
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d102      	bne.n	8005c48 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8005c42:	2301      	movs	r3, #1
 8005c44:	73fb      	strb	r3, [r7, #15]
    break;
 8005c46:	e002      	b.n	8005c4e <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	73fb      	strb	r3, [r7, #15]
    break;    
 8005c4c:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8005c54:	7bfa      	ldrb	r2, [r7, #15]
 8005c56:	4611      	mov	r1, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fe ffd2 	bl	8004c02 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fe ff9d 	bl	8004ba4 <USBD_LL_Reset>
}
 8005c6a:	bf00      	nop
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fe ffcc 	bl	8004c20 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005c90:	4a04      	ldr	r2, [pc, #16]	; (8005ca4 <HAL_PCD_SuspendCallback+0x30>)
 8005c92:	4b04      	ldr	r3, [pc, #16]	; (8005ca4 <HAL_PCD_SuspendCallback+0x30>)
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f043 0306 	orr.w	r3, r3, #6
 8005c9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005c9c:	bf00      	nop
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	e000ed00 	.word	0xe000ed00

08005ca8 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fe ffc6 	bl	8004c48 <USBD_LL_Resume>
}
 8005cbc:	bf00      	nop
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8005ccc:	4a22      	ldr	r2, [pc, #136]	; (8005d58 <USBD_LL_Init+0x94>)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a20      	ldr	r2, [pc, #128]	; (8005d58 <USBD_LL_Init+0x94>)
 8005cd8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8005cdc:	4b1e      	ldr	r3, [pc, #120]	; (8005d58 <USBD_LL_Init+0x94>)
 8005cde:	4a1f      	ldr	r2, [pc, #124]	; (8005d5c <USBD_LL_Init+0x98>)
 8005ce0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005ce2:	4b1d      	ldr	r3, [pc, #116]	; (8005d58 <USBD_LL_Init+0x94>)
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <USBD_LL_Init+0x94>)
 8005cea:	2202      	movs	r2, #2
 8005cec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8005cee:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <USBD_LL_Init+0x94>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005cf4:	4b18      	ldr	r3, [pc, #96]	; (8005d58 <USBD_LL_Init+0x94>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005cfa:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <USBD_LL_Init+0x94>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005d00:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <USBD_LL_Init+0x94>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005d06:	4814      	ldr	r0, [pc, #80]	; (8005d58 <USBD_LL_Init+0x94>)
 8005d08:	f7fb fa58 	bl	80011bc <HAL_PCD_Init>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d004      	beq.n	8005d1c <USBD_LL_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005d12:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8005d16:	4812      	ldr	r0, [pc, #72]	; (8005d60 <USBD_LL_Init+0x9c>)
 8005d18:	f7ff fde8 	bl	80058ec <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8005d22:	2318      	movs	r3, #24
 8005d24:	2200      	movs	r2, #0
 8005d26:	2100      	movs	r1, #0
 8005d28:	f7fc f948 	bl	8001fbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8005d32:	2358      	movs	r3, #88	; 0x58
 8005d34:	2200      	movs	r2, #0
 8005d36:	2180      	movs	r1, #128	; 0x80
 8005d38:	f7fc f940 	bl	8001fbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8005d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d46:	2200      	movs	r2, #0
 8005d48:	2181      	movs	r1, #129	; 0x81
 8005d4a:	f7fc f937 	bl	8001fbc <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20000648 	.word	0x20000648
 8005d5c:	40005c00 	.word	0x40005c00
 8005d60:	08007304 	.word	0x08007304

08005d64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fb faf8 	bl	8001370 <HAL_PCD_Start>
 8005d80:	4603      	mov	r3, r0
 8005d82:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8005d84:	7bbb      	ldrb	r3, [r7, #14]
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d816      	bhi.n	8005db8 <USBD_LL_Start+0x54>
 8005d8a:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <USBD_LL_Start+0x2c>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005da1 	.word	0x08005da1
 8005d94:	08005da7 	.word	0x08005da7
 8005d98:	08005dad 	.word	0x08005dad
 8005d9c:	08005db3 	.word	0x08005db3
    case HAL_OK :
      usb_status = USBD_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	73fb      	strb	r3, [r7, #15]
    break;
 8005da4:	e00b      	b.n	8005dbe <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005da6:	2302      	movs	r3, #2
 8005da8:	73fb      	strb	r3, [r7, #15]
    break;
 8005daa:	e008      	b.n	8005dbe <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
    break;
 8005db0:	e005      	b.n	8005dbe <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005db2:	2302      	movs	r3, #2
 8005db4:	73fb      	strb	r3, [r7, #15]
    break;
 8005db6:	e002      	b.n	8005dbe <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8005db8:	2302      	movs	r3, #2
 8005dba:	73fb      	strb	r3, [r7, #15]
    break;
 8005dbc:	bf00      	nop
  }
  return usb_status;
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	4608      	mov	r0, r1
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	70fb      	strb	r3, [r7, #3]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	70bb      	strb	r3, [r7, #2]
 8005dde:	4613      	mov	r3, r2
 8005de0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8005df0:	78bb      	ldrb	r3, [r7, #2]
 8005df2:	883a      	ldrh	r2, [r7, #0]
 8005df4:	78f9      	ldrb	r1, [r7, #3]
 8005df6:	f7fb fc08 	bl	800160a <HAL_PCD_EP_Open>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8005dfe:	7bbb      	ldrb	r3, [r7, #14]
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d817      	bhi.n	8005e34 <USBD_LL_OpenEP+0x6c>
 8005e04:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <USBD_LL_OpenEP+0x44>)
 8005e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0a:	bf00      	nop
 8005e0c:	08005e1d 	.word	0x08005e1d
 8005e10:	08005e23 	.word	0x08005e23
 8005e14:	08005e29 	.word	0x08005e29
 8005e18:	08005e2f 	.word	0x08005e2f
    case HAL_OK :
      usb_status = USBD_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8005e20:	e00b      	b.n	8005e3a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005e22:	2302      	movs	r3, #2
 8005e24:	73fb      	strb	r3, [r7, #15]
    break;
 8005e26:	e008      	b.n	8005e3a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8005e2c:	e005      	b.n	8005e3a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005e2e:	2302      	movs	r3, #2
 8005e30:	73fb      	strb	r3, [r7, #15]
    break;
 8005e32:	e002      	b.n	8005e3a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8005e34:	2302      	movs	r3, #2
 8005e36:	73fb      	strb	r3, [r7, #15]
    break;
 8005e38:	bf00      	nop
  }
  return usb_status;
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005e5e:	78fa      	ldrb	r2, [r7, #3]
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fb fc26 	bl	80016b4 <HAL_PCD_EP_Close>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8005e6c:	7bbb      	ldrb	r3, [r7, #14]
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d816      	bhi.n	8005ea0 <USBD_LL_CloseEP+0x5c>
 8005e72:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <USBD_LL_CloseEP+0x34>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005e89 	.word	0x08005e89
 8005e7c:	08005e8f 	.word	0x08005e8f
 8005e80:	08005e95 	.word	0x08005e95
 8005e84:	08005e9b 	.word	0x08005e9b
    case HAL_OK :
      usb_status = USBD_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8005e8c:	e00b      	b.n	8005ea6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005e8e:	2302      	movs	r3, #2
 8005e90:	73fb      	strb	r3, [r7, #15]
    break;
 8005e92:	e008      	b.n	8005ea6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005e94:	2301      	movs	r3, #1
 8005e96:	73fb      	strb	r3, [r7, #15]
    break;
 8005e98:	e005      	b.n	8005ea6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8005e9e:	e002      	b.n	8005ea6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8005ea4:	bf00      	nop
  }
  return usb_status;  
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005eca:	78fa      	ldrb	r2, [r7, #3]
 8005ecc:	4611      	mov	r1, r2
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fb fcad 	bl	800182e <HAL_PCD_EP_SetStall>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8005ed8:	7bbb      	ldrb	r3, [r7, #14]
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d816      	bhi.n	8005f0c <USBD_LL_StallEP+0x5c>
 8005ede:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <USBD_LL_StallEP+0x34>)
 8005ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee4:	08005ef5 	.word	0x08005ef5
 8005ee8:	08005efb 	.word	0x08005efb
 8005eec:	08005f01 	.word	0x08005f01
 8005ef0:	08005f07 	.word	0x08005f07
    case HAL_OK :
      usb_status = USBD_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8005ef8:	e00b      	b.n	8005f12 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005efa:	2302      	movs	r3, #2
 8005efc:	73fb      	strb	r3, [r7, #15]
    break;
 8005efe:	e008      	b.n	8005f12 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005f00:	2301      	movs	r3, #1
 8005f02:	73fb      	strb	r3, [r7, #15]
    break;
 8005f04:	e005      	b.n	8005f12 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005f06:	2302      	movs	r3, #2
 8005f08:	73fb      	strb	r3, [r7, #15]
    break;
 8005f0a:	e002      	b.n	8005f12 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8005f10:	bf00      	nop
  }
  return usb_status;  
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005f36:	78fa      	ldrb	r2, [r7, #3]
 8005f38:	4611      	mov	r1, r2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fb fccc 	bl	80018d8 <HAL_PCD_EP_ClrStall>
 8005f40:	4603      	mov	r3, r0
 8005f42:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8005f44:	7bbb      	ldrb	r3, [r7, #14]
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d816      	bhi.n	8005f78 <USBD_LL_ClearStallEP+0x5c>
 8005f4a:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <USBD_LL_ClearStallEP+0x34>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005f61 	.word	0x08005f61
 8005f54:	08005f67 	.word	0x08005f67
 8005f58:	08005f6d 	.word	0x08005f6d
 8005f5c:	08005f73 	.word	0x08005f73
    case HAL_OK :
      usb_status = USBD_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	73fb      	strb	r3, [r7, #15]
    break;
 8005f64:	e00b      	b.n	8005f7e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005f66:	2302      	movs	r3, #2
 8005f68:	73fb      	strb	r3, [r7, #15]
    break;
 8005f6a:	e008      	b.n	8005f7e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8005f70:	e005      	b.n	8005f7e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005f72:	2302      	movs	r3, #2
 8005f74:	73fb      	strb	r3, [r7, #15]
    break;
 8005f76:	e002      	b.n	8005f7e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8005f7c:	bf00      	nop
  }
  return usb_status; 
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005f9a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005f9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	da08      	bge.n	8005fb6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	015b      	lsls	r3, r3, #5
 8005fae:	4413      	add	r3, r2
 8005fb0:	332a      	adds	r3, #42	; 0x2a
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	e008      	b.n	8005fc8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	015b      	lsls	r3, r3, #5
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f203 232a 	addw	r3, r3, #554	; 0x22a
 8005fc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bc80      	pop	{r7}
 8005fd0:	4770      	bx	lr
	...

08005fd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005fee:	78fa      	ldrb	r2, [r7, #3]
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fb fae4 	bl	80015c0 <HAL_PCD_SetAddress>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d816      	bhi.n	8006030 <USBD_LL_SetUSBAddress+0x5c>
 8006002:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <USBD_LL_SetUSBAddress+0x34>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	08006019 	.word	0x08006019
 800600c:	0800601f 	.word	0x0800601f
 8006010:	08006025 	.word	0x08006025
 8006014:	0800602b 	.word	0x0800602b
    case HAL_OK :
      usb_status = USBD_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	73fb      	strb	r3, [r7, #15]
    break;
 800601c:	e00b      	b.n	8006036 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800601e:	2302      	movs	r3, #2
 8006020:	73fb      	strb	r3, [r7, #15]
    break;
 8006022:	e008      	b.n	8006036 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006024:	2301      	movs	r3, #1
 8006026:	73fb      	strb	r3, [r7, #15]
    break;
 8006028:	e005      	b.n	8006036 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800602a:	2302      	movs	r3, #2
 800602c:	73fb      	strb	r3, [r7, #15]
    break;
 800602e:	e002      	b.n	8006036 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006030:	2302      	movs	r3, #2
 8006032:	73fb      	strb	r3, [r7, #15]
    break;
 8006034:	bf00      	nop
  }
  return usb_status;  
 8006036:	7bfb      	ldrb	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	607a      	str	r2, [r7, #4]
 800604a:	461a      	mov	r2, r3
 800604c:	460b      	mov	r3, r1
 800604e:	72fb      	strb	r3, [r7, #11]
 8006050:	4613      	mov	r3, r2
 8006052:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006062:	893b      	ldrh	r3, [r7, #8]
 8006064:	7af9      	ldrb	r1, [r7, #11]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	f7fb fba6 	bl	80017b8 <HAL_PCD_EP_Transmit>
 800606c:	4603      	mov	r3, r0
 800606e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8006070:	7dbb      	ldrb	r3, [r7, #22]
 8006072:	2b03      	cmp	r3, #3
 8006074:	d816      	bhi.n	80060a4 <USBD_LL_Transmit+0x64>
 8006076:	a201      	add	r2, pc, #4	; (adr r2, 800607c <USBD_LL_Transmit+0x3c>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	0800608d 	.word	0x0800608d
 8006080:	08006093 	.word	0x08006093
 8006084:	08006099 	.word	0x08006099
 8006088:	0800609f 	.word	0x0800609f
    case HAL_OK :
      usb_status = USBD_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	75fb      	strb	r3, [r7, #23]
    break;
 8006090:	e00b      	b.n	80060aa <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006092:	2302      	movs	r3, #2
 8006094:	75fb      	strb	r3, [r7, #23]
    break;
 8006096:	e008      	b.n	80060aa <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006098:	2301      	movs	r3, #1
 800609a:	75fb      	strb	r3, [r7, #23]
    break;
 800609c:	e005      	b.n	80060aa <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800609e:	2302      	movs	r3, #2
 80060a0:	75fb      	strb	r3, [r7, #23]
    break;
 80060a2:	e002      	b.n	80060aa <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80060a4:	2302      	movs	r3, #2
 80060a6:	75fb      	strb	r3, [r7, #23]
    break;
 80060a8:	bf00      	nop
  }
  return usb_status;    
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	607a      	str	r2, [r7, #4]
 80060be:	461a      	mov	r2, r3
 80060c0:	460b      	mov	r3, r1
 80060c2:	72fb      	strb	r3, [r7, #11]
 80060c4:	4613      	mov	r3, r2
 80060c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80060d6:	893b      	ldrh	r3, [r7, #8]
 80060d8:	7af9      	ldrb	r1, [r7, #11]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	f7fb fb30 	bl	8001740 <HAL_PCD_EP_Receive>
 80060e0:	4603      	mov	r3, r0
 80060e2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80060e4:	7dbb      	ldrb	r3, [r7, #22]
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d816      	bhi.n	8006118 <USBD_LL_PrepareReceive+0x64>
 80060ea:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <USBD_LL_PrepareReceive+0x3c>)
 80060ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f0:	08006101 	.word	0x08006101
 80060f4:	08006107 	.word	0x08006107
 80060f8:	0800610d 	.word	0x0800610d
 80060fc:	08006113 	.word	0x08006113
    case HAL_OK :
      usb_status = USBD_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	75fb      	strb	r3, [r7, #23]
    break;
 8006104:	e00b      	b.n	800611e <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006106:	2302      	movs	r3, #2
 8006108:	75fb      	strb	r3, [r7, #23]
    break;
 800610a:	e008      	b.n	800611e <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800610c:	2301      	movs	r3, #1
 800610e:	75fb      	strb	r3, [r7, #23]
    break;
 8006110:	e005      	b.n	800611e <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006112:	2302      	movs	r3, #2
 8006114:	75fb      	strb	r3, [r7, #23]
    break;
 8006116:	e002      	b.n	800611e <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8006118:	2302      	movs	r3, #2
 800611a:	75fb      	strb	r3, [r7, #23]
    break;
 800611c:	bf00      	nop
  }
  return usb_status; 
 800611e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006130:	4b02      	ldr	r3, [pc, #8]	; (800613c <USBD_static_malloc+0x14>)
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr
 800613c:	2000032c 	.word	0x2000032c

08006140 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]

}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	bc80      	pop	{r7}
 8006150:	4770      	bx	lr

08006152 <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	460b      	mov	r3, r1
 800615c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr

08006168 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	4603      	mov	r3, r0
 8006170:	6039      	str	r1, [r7, #0]
 8006172:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2212      	movs	r2, #18
 8006178:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800617a:	4b03      	ldr	r3, [pc, #12]	; (8006188 <USBD_FS_DeviceDescriptor+0x20>)
}
 800617c:	4618      	mov	r0, r3
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	20000274 	.word	0x20000274

0800618c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	4603      	mov	r3, r0
 8006194:	6039      	str	r1, [r7, #0]
 8006196:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2204      	movs	r2, #4
 800619c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800619e:	4b03      	ldr	r3, [pc, #12]	; (80061ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	20000288 	.word	0x20000288

080061b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	6039      	str	r1, [r7, #0]
 80061ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d105      	bne.n	80061ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	4907      	ldr	r1, [pc, #28]	; (80061e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80061c6:	4808      	ldr	r0, [pc, #32]	; (80061e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80061c8:	f7ff f96a 	bl	80054a0 <USBD_GetString>
 80061cc:	e004      	b.n	80061d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	4904      	ldr	r1, [pc, #16]	; (80061e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80061d2:	4805      	ldr	r0, [pc, #20]	; (80061e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80061d4:	f7ff f964 	bl	80054a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80061d8:	4b02      	ldr	r3, [pc, #8]	; (80061e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000aa8 	.word	0x20000aa8
 80061e8:	08007318 	.word	0x08007318

080061ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	6039      	str	r1, [r7, #0]
 80061f6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	4904      	ldr	r1, [pc, #16]	; (800620c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80061fc:	4804      	ldr	r0, [pc, #16]	; (8006210 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80061fe:	f7ff f94f 	bl	80054a0 <USBD_GetString>
  return USBD_StrDesc;
 8006202:	4b02      	ldr	r3, [pc, #8]	; (800620c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000aa8 	.word	0x20000aa8
 8006210:	08007330 	.word	0x08007330

08006214 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	6039      	str	r1, [r7, #0]
 800621e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d105      	bne.n	8006232 <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	4907      	ldr	r1, [pc, #28]	; (8006248 <USBD_FS_SerialStrDescriptor+0x34>)
 800622a:	4808      	ldr	r0, [pc, #32]	; (800624c <USBD_FS_SerialStrDescriptor+0x38>)
 800622c:	f7ff f938 	bl	80054a0 <USBD_GetString>
 8006230:	e004      	b.n	800623c <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	4904      	ldr	r1, [pc, #16]	; (8006248 <USBD_FS_SerialStrDescriptor+0x34>)
 8006236:	4805      	ldr	r0, [pc, #20]	; (800624c <USBD_FS_SerialStrDescriptor+0x38>)
 8006238:	f7ff f932 	bl	80054a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800623c:	4b02      	ldr	r3, [pc, #8]	; (8006248 <USBD_FS_SerialStrDescriptor+0x34>)
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000aa8 	.word	0x20000aa8
 800624c:	08007344 	.word	0x08007344

08006250 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	4603      	mov	r3, r0
 8006258:	6039      	str	r1, [r7, #0]
 800625a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d105      	bne.n	800626e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	4907      	ldr	r1, [pc, #28]	; (8006284 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006266:	4808      	ldr	r0, [pc, #32]	; (8006288 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006268:	f7ff f91a 	bl	80054a0 <USBD_GetString>
 800626c:	e004      	b.n	8006278 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	4904      	ldr	r1, [pc, #16]	; (8006284 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006272:	4805      	ldr	r0, [pc, #20]	; (8006288 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006274:	f7ff f914 	bl	80054a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006278:	4b02      	ldr	r3, [pc, #8]	; (8006284 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000aa8 	.word	0x20000aa8
 8006288:	08007354 	.word	0x08007354

0800628c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	4603      	mov	r3, r0
 8006294:	6039      	str	r1, [r7, #0]
 8006296:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d105      	bne.n	80062aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	4907      	ldr	r1, [pc, #28]	; (80062c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80062a2:	4808      	ldr	r0, [pc, #32]	; (80062c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80062a4:	f7ff f8fc 	bl	80054a0 <USBD_GetString>
 80062a8:	e004      	b.n	80062b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	4904      	ldr	r1, [pc, #16]	; (80062c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80062ae:	4805      	ldr	r0, [pc, #20]	; (80062c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80062b0:	f7ff f8f6 	bl	80054a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80062b4:	4b02      	ldr	r3, [pc, #8]	; (80062c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000aa8 	.word	0x20000aa8
 80062c4:	08007360 	.word	0x08007360

080062c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80062c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80062ca:	e003      	b.n	80062d4 <LoopCopyDataInit>

080062cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80062cc:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80062ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80062d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80062d2:	3104      	adds	r1, #4

080062d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80062d4:	480a      	ldr	r0, [pc, #40]	; (8006300 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80062d6:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80062d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80062da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80062dc:	d3f6      	bcc.n	80062cc <CopyDataInit>
  ldr r2, =_sbss
 80062de:	4a0a      	ldr	r2, [pc, #40]	; (8006308 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80062e0:	e002      	b.n	80062e8 <LoopFillZerobss>

080062e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80062e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80062e4:	f842 3b04 	str.w	r3, [r2], #4

080062e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80062e8:	4b08      	ldr	r3, [pc, #32]	; (800630c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80062ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80062ec:	d3f9      	bcc.n	80062e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80062ee:	f7ff fbdf 	bl	8005ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80062f2:	f000 f80f 	bl	8006314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80062f6:	f7ff f9b3 	bl	8005660 <main>
  bx lr
 80062fa:	4770      	bx	lr
  ldr r3, =_sidata
 80062fc:	0800752c 	.word	0x0800752c
  ldr r0, =_sdata
 8006300:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006304:	200002f0 	.word	0x200002f0
  ldr r2, =_sbss
 8006308:	200002f0 	.word	0x200002f0
  ldr r3, = _ebss
 800630c:	20000cac 	.word	0x20000cac

08006310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006310:	e7fe      	b.n	8006310 <ADC1_2_IRQHandler>
	...

08006314 <__libc_init_array>:
 8006314:	b570      	push	{r4, r5, r6, lr}
 8006316:	2500      	movs	r5, #0
 8006318:	4e0c      	ldr	r6, [pc, #48]	; (800634c <__libc_init_array+0x38>)
 800631a:	4c0d      	ldr	r4, [pc, #52]	; (8006350 <__libc_init_array+0x3c>)
 800631c:	1ba4      	subs	r4, r4, r6
 800631e:	10a4      	asrs	r4, r4, #2
 8006320:	42a5      	cmp	r5, r4
 8006322:	d109      	bne.n	8006338 <__libc_init_array+0x24>
 8006324:	f000 ffc0 	bl	80072a8 <_init>
 8006328:	2500      	movs	r5, #0
 800632a:	4e0a      	ldr	r6, [pc, #40]	; (8006354 <__libc_init_array+0x40>)
 800632c:	4c0a      	ldr	r4, [pc, #40]	; (8006358 <__libc_init_array+0x44>)
 800632e:	1ba4      	subs	r4, r4, r6
 8006330:	10a4      	asrs	r4, r4, #2
 8006332:	42a5      	cmp	r5, r4
 8006334:	d105      	bne.n	8006342 <__libc_init_array+0x2e>
 8006336:	bd70      	pop	{r4, r5, r6, pc}
 8006338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800633c:	4798      	blx	r3
 800633e:	3501      	adds	r5, #1
 8006340:	e7ee      	b.n	8006320 <__libc_init_array+0xc>
 8006342:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006346:	4798      	blx	r3
 8006348:	3501      	adds	r5, #1
 800634a:	e7f2      	b.n	8006332 <__libc_init_array+0x1e>
 800634c:	08007524 	.word	0x08007524
 8006350:	08007524 	.word	0x08007524
 8006354:	08007524 	.word	0x08007524
 8006358:	08007528 	.word	0x08007528

0800635c <memset>:
 800635c:	4603      	mov	r3, r0
 800635e:	4402      	add	r2, r0
 8006360:	4293      	cmp	r3, r2
 8006362:	d100      	bne.n	8006366 <memset+0xa>
 8006364:	4770      	bx	lr
 8006366:	f803 1b01 	strb.w	r1, [r3], #1
 800636a:	e7f9      	b.n	8006360 <memset+0x4>

0800636c <iprintf>:
 800636c:	b40f      	push	{r0, r1, r2, r3}
 800636e:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <iprintf+0x2c>)
 8006370:	b513      	push	{r0, r1, r4, lr}
 8006372:	681c      	ldr	r4, [r3, #0]
 8006374:	b124      	cbz	r4, 8006380 <iprintf+0x14>
 8006376:	69a3      	ldr	r3, [r4, #24]
 8006378:	b913      	cbnz	r3, 8006380 <iprintf+0x14>
 800637a:	4620      	mov	r0, r4
 800637c:	f000 fa24 	bl	80067c8 <__sinit>
 8006380:	ab05      	add	r3, sp, #20
 8006382:	9a04      	ldr	r2, [sp, #16]
 8006384:	68a1      	ldr	r1, [r4, #8]
 8006386:	4620      	mov	r0, r4
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	f000 fbdd 	bl	8006b48 <_vfiprintf_r>
 800638e:	b002      	add	sp, #8
 8006390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006394:	b004      	add	sp, #16
 8006396:	4770      	bx	lr
 8006398:	2000028c 	.word	0x2000028c

0800639c <_puts_r>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	460e      	mov	r6, r1
 80063a0:	4605      	mov	r5, r0
 80063a2:	b118      	cbz	r0, 80063ac <_puts_r+0x10>
 80063a4:	6983      	ldr	r3, [r0, #24]
 80063a6:	b90b      	cbnz	r3, 80063ac <_puts_r+0x10>
 80063a8:	f000 fa0e 	bl	80067c8 <__sinit>
 80063ac:	69ab      	ldr	r3, [r5, #24]
 80063ae:	68ac      	ldr	r4, [r5, #8]
 80063b0:	b913      	cbnz	r3, 80063b8 <_puts_r+0x1c>
 80063b2:	4628      	mov	r0, r5
 80063b4:	f000 fa08 	bl	80067c8 <__sinit>
 80063b8:	4b23      	ldr	r3, [pc, #140]	; (8006448 <_puts_r+0xac>)
 80063ba:	429c      	cmp	r4, r3
 80063bc:	d117      	bne.n	80063ee <_puts_r+0x52>
 80063be:	686c      	ldr	r4, [r5, #4]
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	071b      	lsls	r3, r3, #28
 80063c4:	d51d      	bpl.n	8006402 <_puts_r+0x66>
 80063c6:	6923      	ldr	r3, [r4, #16]
 80063c8:	b1db      	cbz	r3, 8006402 <_puts_r+0x66>
 80063ca:	3e01      	subs	r6, #1
 80063cc:	68a3      	ldr	r3, [r4, #8]
 80063ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80063d2:	3b01      	subs	r3, #1
 80063d4:	60a3      	str	r3, [r4, #8]
 80063d6:	b9e9      	cbnz	r1, 8006414 <_puts_r+0x78>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	da2e      	bge.n	800643a <_puts_r+0x9e>
 80063dc:	4622      	mov	r2, r4
 80063de:	210a      	movs	r1, #10
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 f83f 	bl	8006464 <__swbuf_r>
 80063e6:	3001      	adds	r0, #1
 80063e8:	d011      	beq.n	800640e <_puts_r+0x72>
 80063ea:	200a      	movs	r0, #10
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
 80063ee:	4b17      	ldr	r3, [pc, #92]	; (800644c <_puts_r+0xb0>)
 80063f0:	429c      	cmp	r4, r3
 80063f2:	d101      	bne.n	80063f8 <_puts_r+0x5c>
 80063f4:	68ac      	ldr	r4, [r5, #8]
 80063f6:	e7e3      	b.n	80063c0 <_puts_r+0x24>
 80063f8:	4b15      	ldr	r3, [pc, #84]	; (8006450 <_puts_r+0xb4>)
 80063fa:	429c      	cmp	r4, r3
 80063fc:	bf08      	it	eq
 80063fe:	68ec      	ldreq	r4, [r5, #12]
 8006400:	e7de      	b.n	80063c0 <_puts_r+0x24>
 8006402:	4621      	mov	r1, r4
 8006404:	4628      	mov	r0, r5
 8006406:	f000 f87f 	bl	8006508 <__swsetup_r>
 800640a:	2800      	cmp	r0, #0
 800640c:	d0dd      	beq.n	80063ca <_puts_r+0x2e>
 800640e:	f04f 30ff 	mov.w	r0, #4294967295
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	2b00      	cmp	r3, #0
 8006416:	da04      	bge.n	8006422 <_puts_r+0x86>
 8006418:	69a2      	ldr	r2, [r4, #24]
 800641a:	4293      	cmp	r3, r2
 800641c:	db06      	blt.n	800642c <_puts_r+0x90>
 800641e:	290a      	cmp	r1, #10
 8006420:	d004      	beq.n	800642c <_puts_r+0x90>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	6022      	str	r2, [r4, #0]
 8006428:	7019      	strb	r1, [r3, #0]
 800642a:	e7cf      	b.n	80063cc <_puts_r+0x30>
 800642c:	4622      	mov	r2, r4
 800642e:	4628      	mov	r0, r5
 8006430:	f000 f818 	bl	8006464 <__swbuf_r>
 8006434:	3001      	adds	r0, #1
 8006436:	d1c9      	bne.n	80063cc <_puts_r+0x30>
 8006438:	e7e9      	b.n	800640e <_puts_r+0x72>
 800643a:	200a      	movs	r0, #10
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	6022      	str	r2, [r4, #0]
 8006442:	7018      	strb	r0, [r3, #0]
 8006444:	bd70      	pop	{r4, r5, r6, pc}
 8006446:	bf00      	nop
 8006448:	080074ac 	.word	0x080074ac
 800644c:	080074cc 	.word	0x080074cc
 8006450:	0800748c 	.word	0x0800748c

08006454 <puts>:
 8006454:	4b02      	ldr	r3, [pc, #8]	; (8006460 <puts+0xc>)
 8006456:	4601      	mov	r1, r0
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	f7ff bf9f 	b.w	800639c <_puts_r>
 800645e:	bf00      	nop
 8006460:	2000028c 	.word	0x2000028c

08006464 <__swbuf_r>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	460e      	mov	r6, r1
 8006468:	4614      	mov	r4, r2
 800646a:	4605      	mov	r5, r0
 800646c:	b118      	cbz	r0, 8006476 <__swbuf_r+0x12>
 800646e:	6983      	ldr	r3, [r0, #24]
 8006470:	b90b      	cbnz	r3, 8006476 <__swbuf_r+0x12>
 8006472:	f000 f9a9 	bl	80067c8 <__sinit>
 8006476:	4b21      	ldr	r3, [pc, #132]	; (80064fc <__swbuf_r+0x98>)
 8006478:	429c      	cmp	r4, r3
 800647a:	d12a      	bne.n	80064d2 <__swbuf_r+0x6e>
 800647c:	686c      	ldr	r4, [r5, #4]
 800647e:	69a3      	ldr	r3, [r4, #24]
 8006480:	60a3      	str	r3, [r4, #8]
 8006482:	89a3      	ldrh	r3, [r4, #12]
 8006484:	071a      	lsls	r2, r3, #28
 8006486:	d52e      	bpl.n	80064e6 <__swbuf_r+0x82>
 8006488:	6923      	ldr	r3, [r4, #16]
 800648a:	b363      	cbz	r3, 80064e6 <__swbuf_r+0x82>
 800648c:	6923      	ldr	r3, [r4, #16]
 800648e:	6820      	ldr	r0, [r4, #0]
 8006490:	b2f6      	uxtb	r6, r6
 8006492:	1ac0      	subs	r0, r0, r3
 8006494:	6963      	ldr	r3, [r4, #20]
 8006496:	4637      	mov	r7, r6
 8006498:	4298      	cmp	r0, r3
 800649a:	db04      	blt.n	80064a6 <__swbuf_r+0x42>
 800649c:	4621      	mov	r1, r4
 800649e:	4628      	mov	r0, r5
 80064a0:	f000 f928 	bl	80066f4 <_fflush_r>
 80064a4:	bb28      	cbnz	r0, 80064f2 <__swbuf_r+0x8e>
 80064a6:	68a3      	ldr	r3, [r4, #8]
 80064a8:	3001      	adds	r0, #1
 80064aa:	3b01      	subs	r3, #1
 80064ac:	60a3      	str	r3, [r4, #8]
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	6022      	str	r2, [r4, #0]
 80064b4:	701e      	strb	r6, [r3, #0]
 80064b6:	6963      	ldr	r3, [r4, #20]
 80064b8:	4298      	cmp	r0, r3
 80064ba:	d004      	beq.n	80064c6 <__swbuf_r+0x62>
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	07db      	lsls	r3, r3, #31
 80064c0:	d519      	bpl.n	80064f6 <__swbuf_r+0x92>
 80064c2:	2e0a      	cmp	r6, #10
 80064c4:	d117      	bne.n	80064f6 <__swbuf_r+0x92>
 80064c6:	4621      	mov	r1, r4
 80064c8:	4628      	mov	r0, r5
 80064ca:	f000 f913 	bl	80066f4 <_fflush_r>
 80064ce:	b190      	cbz	r0, 80064f6 <__swbuf_r+0x92>
 80064d0:	e00f      	b.n	80064f2 <__swbuf_r+0x8e>
 80064d2:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <__swbuf_r+0x9c>)
 80064d4:	429c      	cmp	r4, r3
 80064d6:	d101      	bne.n	80064dc <__swbuf_r+0x78>
 80064d8:	68ac      	ldr	r4, [r5, #8]
 80064da:	e7d0      	b.n	800647e <__swbuf_r+0x1a>
 80064dc:	4b09      	ldr	r3, [pc, #36]	; (8006504 <__swbuf_r+0xa0>)
 80064de:	429c      	cmp	r4, r3
 80064e0:	bf08      	it	eq
 80064e2:	68ec      	ldreq	r4, [r5, #12]
 80064e4:	e7cb      	b.n	800647e <__swbuf_r+0x1a>
 80064e6:	4621      	mov	r1, r4
 80064e8:	4628      	mov	r0, r5
 80064ea:	f000 f80d 	bl	8006508 <__swsetup_r>
 80064ee:	2800      	cmp	r0, #0
 80064f0:	d0cc      	beq.n	800648c <__swbuf_r+0x28>
 80064f2:	f04f 37ff 	mov.w	r7, #4294967295
 80064f6:	4638      	mov	r0, r7
 80064f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064fa:	bf00      	nop
 80064fc:	080074ac 	.word	0x080074ac
 8006500:	080074cc 	.word	0x080074cc
 8006504:	0800748c 	.word	0x0800748c

08006508 <__swsetup_r>:
 8006508:	4b32      	ldr	r3, [pc, #200]	; (80065d4 <__swsetup_r+0xcc>)
 800650a:	b570      	push	{r4, r5, r6, lr}
 800650c:	681d      	ldr	r5, [r3, #0]
 800650e:	4606      	mov	r6, r0
 8006510:	460c      	mov	r4, r1
 8006512:	b125      	cbz	r5, 800651e <__swsetup_r+0x16>
 8006514:	69ab      	ldr	r3, [r5, #24]
 8006516:	b913      	cbnz	r3, 800651e <__swsetup_r+0x16>
 8006518:	4628      	mov	r0, r5
 800651a:	f000 f955 	bl	80067c8 <__sinit>
 800651e:	4b2e      	ldr	r3, [pc, #184]	; (80065d8 <__swsetup_r+0xd0>)
 8006520:	429c      	cmp	r4, r3
 8006522:	d10f      	bne.n	8006544 <__swsetup_r+0x3c>
 8006524:	686c      	ldr	r4, [r5, #4]
 8006526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800652a:	b29a      	uxth	r2, r3
 800652c:	0715      	lsls	r5, r2, #28
 800652e:	d42c      	bmi.n	800658a <__swsetup_r+0x82>
 8006530:	06d0      	lsls	r0, r2, #27
 8006532:	d411      	bmi.n	8006558 <__swsetup_r+0x50>
 8006534:	2209      	movs	r2, #9
 8006536:	6032      	str	r2, [r6, #0]
 8006538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800653c:	81a3      	strh	r3, [r4, #12]
 800653e:	f04f 30ff 	mov.w	r0, #4294967295
 8006542:	bd70      	pop	{r4, r5, r6, pc}
 8006544:	4b25      	ldr	r3, [pc, #148]	; (80065dc <__swsetup_r+0xd4>)
 8006546:	429c      	cmp	r4, r3
 8006548:	d101      	bne.n	800654e <__swsetup_r+0x46>
 800654a:	68ac      	ldr	r4, [r5, #8]
 800654c:	e7eb      	b.n	8006526 <__swsetup_r+0x1e>
 800654e:	4b24      	ldr	r3, [pc, #144]	; (80065e0 <__swsetup_r+0xd8>)
 8006550:	429c      	cmp	r4, r3
 8006552:	bf08      	it	eq
 8006554:	68ec      	ldreq	r4, [r5, #12]
 8006556:	e7e6      	b.n	8006526 <__swsetup_r+0x1e>
 8006558:	0751      	lsls	r1, r2, #29
 800655a:	d512      	bpl.n	8006582 <__swsetup_r+0x7a>
 800655c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800655e:	b141      	cbz	r1, 8006572 <__swsetup_r+0x6a>
 8006560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006564:	4299      	cmp	r1, r3
 8006566:	d002      	beq.n	800656e <__swsetup_r+0x66>
 8006568:	4630      	mov	r0, r6
 800656a:	f000 fa1b 	bl	80069a4 <_free_r>
 800656e:	2300      	movs	r3, #0
 8006570:	6363      	str	r3, [r4, #52]	; 0x34
 8006572:	89a3      	ldrh	r3, [r4, #12]
 8006574:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006578:	81a3      	strh	r3, [r4, #12]
 800657a:	2300      	movs	r3, #0
 800657c:	6063      	str	r3, [r4, #4]
 800657e:	6923      	ldr	r3, [r4, #16]
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	89a3      	ldrh	r3, [r4, #12]
 8006584:	f043 0308 	orr.w	r3, r3, #8
 8006588:	81a3      	strh	r3, [r4, #12]
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	b94b      	cbnz	r3, 80065a2 <__swsetup_r+0x9a>
 800658e:	89a3      	ldrh	r3, [r4, #12]
 8006590:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006598:	d003      	beq.n	80065a2 <__swsetup_r+0x9a>
 800659a:	4621      	mov	r1, r4
 800659c:	4630      	mov	r0, r6
 800659e:	f000 f9c1 	bl	8006924 <__smakebuf_r>
 80065a2:	89a2      	ldrh	r2, [r4, #12]
 80065a4:	f012 0301 	ands.w	r3, r2, #1
 80065a8:	d00c      	beq.n	80065c4 <__swsetup_r+0xbc>
 80065aa:	2300      	movs	r3, #0
 80065ac:	60a3      	str	r3, [r4, #8]
 80065ae:	6963      	ldr	r3, [r4, #20]
 80065b0:	425b      	negs	r3, r3
 80065b2:	61a3      	str	r3, [r4, #24]
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	b953      	cbnz	r3, 80065ce <__swsetup_r+0xc6>
 80065b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80065c0:	d1ba      	bne.n	8006538 <__swsetup_r+0x30>
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	0792      	lsls	r2, r2, #30
 80065c6:	bf58      	it	pl
 80065c8:	6963      	ldrpl	r3, [r4, #20]
 80065ca:	60a3      	str	r3, [r4, #8]
 80065cc:	e7f2      	b.n	80065b4 <__swsetup_r+0xac>
 80065ce:	2000      	movs	r0, #0
 80065d0:	e7f7      	b.n	80065c2 <__swsetup_r+0xba>
 80065d2:	bf00      	nop
 80065d4:	2000028c 	.word	0x2000028c
 80065d8:	080074ac 	.word	0x080074ac
 80065dc:	080074cc 	.word	0x080074cc
 80065e0:	0800748c 	.word	0x0800748c

080065e4 <__sflush_r>:
 80065e4:	898a      	ldrh	r2, [r1, #12]
 80065e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ea:	4605      	mov	r5, r0
 80065ec:	0710      	lsls	r0, r2, #28
 80065ee:	460c      	mov	r4, r1
 80065f0:	d45a      	bmi.n	80066a8 <__sflush_r+0xc4>
 80065f2:	684b      	ldr	r3, [r1, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dc05      	bgt.n	8006604 <__sflush_r+0x20>
 80065f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	dc02      	bgt.n	8006604 <__sflush_r+0x20>
 80065fe:	2000      	movs	r0, #0
 8006600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006604:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006606:	2e00      	cmp	r6, #0
 8006608:	d0f9      	beq.n	80065fe <__sflush_r+0x1a>
 800660a:	2300      	movs	r3, #0
 800660c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006610:	682f      	ldr	r7, [r5, #0]
 8006612:	602b      	str	r3, [r5, #0]
 8006614:	d033      	beq.n	800667e <__sflush_r+0x9a>
 8006616:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	075a      	lsls	r2, r3, #29
 800661c:	d505      	bpl.n	800662a <__sflush_r+0x46>
 800661e:	6863      	ldr	r3, [r4, #4]
 8006620:	1ac0      	subs	r0, r0, r3
 8006622:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006624:	b10b      	cbz	r3, 800662a <__sflush_r+0x46>
 8006626:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006628:	1ac0      	subs	r0, r0, r3
 800662a:	2300      	movs	r3, #0
 800662c:	4602      	mov	r2, r0
 800662e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006630:	6a21      	ldr	r1, [r4, #32]
 8006632:	4628      	mov	r0, r5
 8006634:	47b0      	blx	r6
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	d106      	bne.n	800664a <__sflush_r+0x66>
 800663c:	6829      	ldr	r1, [r5, #0]
 800663e:	291d      	cmp	r1, #29
 8006640:	d84b      	bhi.n	80066da <__sflush_r+0xf6>
 8006642:	4a2b      	ldr	r2, [pc, #172]	; (80066f0 <__sflush_r+0x10c>)
 8006644:	40ca      	lsrs	r2, r1
 8006646:	07d6      	lsls	r6, r2, #31
 8006648:	d547      	bpl.n	80066da <__sflush_r+0xf6>
 800664a:	2200      	movs	r2, #0
 800664c:	6062      	str	r2, [r4, #4]
 800664e:	6922      	ldr	r2, [r4, #16]
 8006650:	04d9      	lsls	r1, r3, #19
 8006652:	6022      	str	r2, [r4, #0]
 8006654:	d504      	bpl.n	8006660 <__sflush_r+0x7c>
 8006656:	1c42      	adds	r2, r0, #1
 8006658:	d101      	bne.n	800665e <__sflush_r+0x7a>
 800665a:	682b      	ldr	r3, [r5, #0]
 800665c:	b903      	cbnz	r3, 8006660 <__sflush_r+0x7c>
 800665e:	6560      	str	r0, [r4, #84]	; 0x54
 8006660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006662:	602f      	str	r7, [r5, #0]
 8006664:	2900      	cmp	r1, #0
 8006666:	d0ca      	beq.n	80065fe <__sflush_r+0x1a>
 8006668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800666c:	4299      	cmp	r1, r3
 800666e:	d002      	beq.n	8006676 <__sflush_r+0x92>
 8006670:	4628      	mov	r0, r5
 8006672:	f000 f997 	bl	80069a4 <_free_r>
 8006676:	2000      	movs	r0, #0
 8006678:	6360      	str	r0, [r4, #52]	; 0x34
 800667a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800667e:	6a21      	ldr	r1, [r4, #32]
 8006680:	2301      	movs	r3, #1
 8006682:	4628      	mov	r0, r5
 8006684:	47b0      	blx	r6
 8006686:	1c41      	adds	r1, r0, #1
 8006688:	d1c6      	bne.n	8006618 <__sflush_r+0x34>
 800668a:	682b      	ldr	r3, [r5, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0c3      	beq.n	8006618 <__sflush_r+0x34>
 8006690:	2b1d      	cmp	r3, #29
 8006692:	d001      	beq.n	8006698 <__sflush_r+0xb4>
 8006694:	2b16      	cmp	r3, #22
 8006696:	d101      	bne.n	800669c <__sflush_r+0xb8>
 8006698:	602f      	str	r7, [r5, #0]
 800669a:	e7b0      	b.n	80065fe <__sflush_r+0x1a>
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a2:	81a3      	strh	r3, [r4, #12]
 80066a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a8:	690f      	ldr	r7, [r1, #16]
 80066aa:	2f00      	cmp	r7, #0
 80066ac:	d0a7      	beq.n	80065fe <__sflush_r+0x1a>
 80066ae:	0793      	lsls	r3, r2, #30
 80066b0:	bf18      	it	ne
 80066b2:	2300      	movne	r3, #0
 80066b4:	680e      	ldr	r6, [r1, #0]
 80066b6:	bf08      	it	eq
 80066b8:	694b      	ldreq	r3, [r1, #20]
 80066ba:	eba6 0807 	sub.w	r8, r6, r7
 80066be:	600f      	str	r7, [r1, #0]
 80066c0:	608b      	str	r3, [r1, #8]
 80066c2:	f1b8 0f00 	cmp.w	r8, #0
 80066c6:	dd9a      	ble.n	80065fe <__sflush_r+0x1a>
 80066c8:	4643      	mov	r3, r8
 80066ca:	463a      	mov	r2, r7
 80066cc:	6a21      	ldr	r1, [r4, #32]
 80066ce:	4628      	mov	r0, r5
 80066d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066d2:	47b0      	blx	r6
 80066d4:	2800      	cmp	r0, #0
 80066d6:	dc07      	bgt.n	80066e8 <__sflush_r+0x104>
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	f04f 30ff 	mov.w	r0, #4294967295
 80066e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e8:	4407      	add	r7, r0
 80066ea:	eba8 0800 	sub.w	r8, r8, r0
 80066ee:	e7e8      	b.n	80066c2 <__sflush_r+0xde>
 80066f0:	20400001 	.word	0x20400001

080066f4 <_fflush_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	690b      	ldr	r3, [r1, #16]
 80066f8:	4605      	mov	r5, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	b1db      	cbz	r3, 8006736 <_fflush_r+0x42>
 80066fe:	b118      	cbz	r0, 8006708 <_fflush_r+0x14>
 8006700:	6983      	ldr	r3, [r0, #24]
 8006702:	b90b      	cbnz	r3, 8006708 <_fflush_r+0x14>
 8006704:	f000 f860 	bl	80067c8 <__sinit>
 8006708:	4b0c      	ldr	r3, [pc, #48]	; (800673c <_fflush_r+0x48>)
 800670a:	429c      	cmp	r4, r3
 800670c:	d109      	bne.n	8006722 <_fflush_r+0x2e>
 800670e:	686c      	ldr	r4, [r5, #4]
 8006710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006714:	b17b      	cbz	r3, 8006736 <_fflush_r+0x42>
 8006716:	4621      	mov	r1, r4
 8006718:	4628      	mov	r0, r5
 800671a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800671e:	f7ff bf61 	b.w	80065e4 <__sflush_r>
 8006722:	4b07      	ldr	r3, [pc, #28]	; (8006740 <_fflush_r+0x4c>)
 8006724:	429c      	cmp	r4, r3
 8006726:	d101      	bne.n	800672c <_fflush_r+0x38>
 8006728:	68ac      	ldr	r4, [r5, #8]
 800672a:	e7f1      	b.n	8006710 <_fflush_r+0x1c>
 800672c:	4b05      	ldr	r3, [pc, #20]	; (8006744 <_fflush_r+0x50>)
 800672e:	429c      	cmp	r4, r3
 8006730:	bf08      	it	eq
 8006732:	68ec      	ldreq	r4, [r5, #12]
 8006734:	e7ec      	b.n	8006710 <_fflush_r+0x1c>
 8006736:	2000      	movs	r0, #0
 8006738:	bd38      	pop	{r3, r4, r5, pc}
 800673a:	bf00      	nop
 800673c:	080074ac 	.word	0x080074ac
 8006740:	080074cc 	.word	0x080074cc
 8006744:	0800748c 	.word	0x0800748c

08006748 <_cleanup_r>:
 8006748:	4901      	ldr	r1, [pc, #4]	; (8006750 <_cleanup_r+0x8>)
 800674a:	f000 b8a9 	b.w	80068a0 <_fwalk_reent>
 800674e:	bf00      	nop
 8006750:	080066f5 	.word	0x080066f5

08006754 <std.isra.0>:
 8006754:	2300      	movs	r3, #0
 8006756:	b510      	push	{r4, lr}
 8006758:	4604      	mov	r4, r0
 800675a:	6003      	str	r3, [r0, #0]
 800675c:	6043      	str	r3, [r0, #4]
 800675e:	6083      	str	r3, [r0, #8]
 8006760:	8181      	strh	r1, [r0, #12]
 8006762:	6643      	str	r3, [r0, #100]	; 0x64
 8006764:	81c2      	strh	r2, [r0, #14]
 8006766:	6103      	str	r3, [r0, #16]
 8006768:	6143      	str	r3, [r0, #20]
 800676a:	6183      	str	r3, [r0, #24]
 800676c:	4619      	mov	r1, r3
 800676e:	2208      	movs	r2, #8
 8006770:	305c      	adds	r0, #92	; 0x5c
 8006772:	f7ff fdf3 	bl	800635c <memset>
 8006776:	4b05      	ldr	r3, [pc, #20]	; (800678c <std.isra.0+0x38>)
 8006778:	6224      	str	r4, [r4, #32]
 800677a:	6263      	str	r3, [r4, #36]	; 0x24
 800677c:	4b04      	ldr	r3, [pc, #16]	; (8006790 <std.isra.0+0x3c>)
 800677e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006780:	4b04      	ldr	r3, [pc, #16]	; (8006794 <std.isra.0+0x40>)
 8006782:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006784:	4b04      	ldr	r3, [pc, #16]	; (8006798 <std.isra.0+0x44>)
 8006786:	6323      	str	r3, [r4, #48]	; 0x30
 8006788:	bd10      	pop	{r4, pc}
 800678a:	bf00      	nop
 800678c:	080070c5 	.word	0x080070c5
 8006790:	080070e7 	.word	0x080070e7
 8006794:	0800711f 	.word	0x0800711f
 8006798:	08007143 	.word	0x08007143

0800679c <__sfmoreglue>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	2568      	movs	r5, #104	; 0x68
 80067a0:	1e4a      	subs	r2, r1, #1
 80067a2:	4355      	muls	r5, r2
 80067a4:	460e      	mov	r6, r1
 80067a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067aa:	f000 f947 	bl	8006a3c <_malloc_r>
 80067ae:	4604      	mov	r4, r0
 80067b0:	b140      	cbz	r0, 80067c4 <__sfmoreglue+0x28>
 80067b2:	2100      	movs	r1, #0
 80067b4:	e880 0042 	stmia.w	r0, {r1, r6}
 80067b8:	300c      	adds	r0, #12
 80067ba:	60a0      	str	r0, [r4, #8]
 80067bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067c0:	f7ff fdcc 	bl	800635c <memset>
 80067c4:	4620      	mov	r0, r4
 80067c6:	bd70      	pop	{r4, r5, r6, pc}

080067c8 <__sinit>:
 80067c8:	6983      	ldr	r3, [r0, #24]
 80067ca:	b510      	push	{r4, lr}
 80067cc:	4604      	mov	r4, r0
 80067ce:	bb33      	cbnz	r3, 800681e <__sinit+0x56>
 80067d0:	6483      	str	r3, [r0, #72]	; 0x48
 80067d2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80067d4:	6503      	str	r3, [r0, #80]	; 0x50
 80067d6:	4b12      	ldr	r3, [pc, #72]	; (8006820 <__sinit+0x58>)
 80067d8:	4a12      	ldr	r2, [pc, #72]	; (8006824 <__sinit+0x5c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6282      	str	r2, [r0, #40]	; 0x28
 80067de:	4298      	cmp	r0, r3
 80067e0:	bf04      	itt	eq
 80067e2:	2301      	moveq	r3, #1
 80067e4:	6183      	streq	r3, [r0, #24]
 80067e6:	f000 f81f 	bl	8006828 <__sfp>
 80067ea:	6060      	str	r0, [r4, #4]
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 f81b 	bl	8006828 <__sfp>
 80067f2:	60a0      	str	r0, [r4, #8]
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 f817 	bl	8006828 <__sfp>
 80067fa:	2200      	movs	r2, #0
 80067fc:	60e0      	str	r0, [r4, #12]
 80067fe:	2104      	movs	r1, #4
 8006800:	6860      	ldr	r0, [r4, #4]
 8006802:	f7ff ffa7 	bl	8006754 <std.isra.0>
 8006806:	2201      	movs	r2, #1
 8006808:	2109      	movs	r1, #9
 800680a:	68a0      	ldr	r0, [r4, #8]
 800680c:	f7ff ffa2 	bl	8006754 <std.isra.0>
 8006810:	2202      	movs	r2, #2
 8006812:	2112      	movs	r1, #18
 8006814:	68e0      	ldr	r0, [r4, #12]
 8006816:	f7ff ff9d 	bl	8006754 <std.isra.0>
 800681a:	2301      	movs	r3, #1
 800681c:	61a3      	str	r3, [r4, #24]
 800681e:	bd10      	pop	{r4, pc}
 8006820:	080074ec 	.word	0x080074ec
 8006824:	08006749 	.word	0x08006749

08006828 <__sfp>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	4b1c      	ldr	r3, [pc, #112]	; (800689c <__sfp+0x74>)
 800682c:	4607      	mov	r7, r0
 800682e:	681e      	ldr	r6, [r3, #0]
 8006830:	69b3      	ldr	r3, [r6, #24]
 8006832:	b913      	cbnz	r3, 800683a <__sfp+0x12>
 8006834:	4630      	mov	r0, r6
 8006836:	f7ff ffc7 	bl	80067c8 <__sinit>
 800683a:	3648      	adds	r6, #72	; 0x48
 800683c:	68b4      	ldr	r4, [r6, #8]
 800683e:	6873      	ldr	r3, [r6, #4]
 8006840:	3b01      	subs	r3, #1
 8006842:	d503      	bpl.n	800684c <__sfp+0x24>
 8006844:	6833      	ldr	r3, [r6, #0]
 8006846:	b133      	cbz	r3, 8006856 <__sfp+0x2e>
 8006848:	6836      	ldr	r6, [r6, #0]
 800684a:	e7f7      	b.n	800683c <__sfp+0x14>
 800684c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006850:	b16d      	cbz	r5, 800686e <__sfp+0x46>
 8006852:	3468      	adds	r4, #104	; 0x68
 8006854:	e7f4      	b.n	8006840 <__sfp+0x18>
 8006856:	2104      	movs	r1, #4
 8006858:	4638      	mov	r0, r7
 800685a:	f7ff ff9f 	bl	800679c <__sfmoreglue>
 800685e:	6030      	str	r0, [r6, #0]
 8006860:	2800      	cmp	r0, #0
 8006862:	d1f1      	bne.n	8006848 <__sfp+0x20>
 8006864:	230c      	movs	r3, #12
 8006866:	4604      	mov	r4, r0
 8006868:	603b      	str	r3, [r7, #0]
 800686a:	4620      	mov	r0, r4
 800686c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800686e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006872:	81e3      	strh	r3, [r4, #14]
 8006874:	2301      	movs	r3, #1
 8006876:	6665      	str	r5, [r4, #100]	; 0x64
 8006878:	81a3      	strh	r3, [r4, #12]
 800687a:	6025      	str	r5, [r4, #0]
 800687c:	60a5      	str	r5, [r4, #8]
 800687e:	6065      	str	r5, [r4, #4]
 8006880:	6125      	str	r5, [r4, #16]
 8006882:	6165      	str	r5, [r4, #20]
 8006884:	61a5      	str	r5, [r4, #24]
 8006886:	2208      	movs	r2, #8
 8006888:	4629      	mov	r1, r5
 800688a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800688e:	f7ff fd65 	bl	800635c <memset>
 8006892:	6365      	str	r5, [r4, #52]	; 0x34
 8006894:	63a5      	str	r5, [r4, #56]	; 0x38
 8006896:	64a5      	str	r5, [r4, #72]	; 0x48
 8006898:	64e5      	str	r5, [r4, #76]	; 0x4c
 800689a:	e7e6      	b.n	800686a <__sfp+0x42>
 800689c:	080074ec 	.word	0x080074ec

080068a0 <_fwalk_reent>:
 80068a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a4:	4680      	mov	r8, r0
 80068a6:	4689      	mov	r9, r1
 80068a8:	2600      	movs	r6, #0
 80068aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068ae:	b914      	cbnz	r4, 80068b6 <_fwalk_reent+0x16>
 80068b0:	4630      	mov	r0, r6
 80068b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068b6:	68a5      	ldr	r5, [r4, #8]
 80068b8:	6867      	ldr	r7, [r4, #4]
 80068ba:	3f01      	subs	r7, #1
 80068bc:	d501      	bpl.n	80068c2 <_fwalk_reent+0x22>
 80068be:	6824      	ldr	r4, [r4, #0]
 80068c0:	e7f5      	b.n	80068ae <_fwalk_reent+0xe>
 80068c2:	89ab      	ldrh	r3, [r5, #12]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d907      	bls.n	80068d8 <_fwalk_reent+0x38>
 80068c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068cc:	3301      	adds	r3, #1
 80068ce:	d003      	beq.n	80068d8 <_fwalk_reent+0x38>
 80068d0:	4629      	mov	r1, r5
 80068d2:	4640      	mov	r0, r8
 80068d4:	47c8      	blx	r9
 80068d6:	4306      	orrs	r6, r0
 80068d8:	3568      	adds	r5, #104	; 0x68
 80068da:	e7ee      	b.n	80068ba <_fwalk_reent+0x1a>

080068dc <__swhatbuf_r>:
 80068dc:	b570      	push	{r4, r5, r6, lr}
 80068de:	460e      	mov	r6, r1
 80068e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e4:	b090      	sub	sp, #64	; 0x40
 80068e6:	2900      	cmp	r1, #0
 80068e8:	4614      	mov	r4, r2
 80068ea:	461d      	mov	r5, r3
 80068ec:	da07      	bge.n	80068fe <__swhatbuf_r+0x22>
 80068ee:	2300      	movs	r3, #0
 80068f0:	602b      	str	r3, [r5, #0]
 80068f2:	89b3      	ldrh	r3, [r6, #12]
 80068f4:	061a      	lsls	r2, r3, #24
 80068f6:	d410      	bmi.n	800691a <__swhatbuf_r+0x3e>
 80068f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068fc:	e00e      	b.n	800691c <__swhatbuf_r+0x40>
 80068fe:	aa01      	add	r2, sp, #4
 8006900:	f000 fc46 	bl	8007190 <_fstat_r>
 8006904:	2800      	cmp	r0, #0
 8006906:	dbf2      	blt.n	80068ee <__swhatbuf_r+0x12>
 8006908:	9a02      	ldr	r2, [sp, #8]
 800690a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800690e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006912:	425a      	negs	r2, r3
 8006914:	415a      	adcs	r2, r3
 8006916:	602a      	str	r2, [r5, #0]
 8006918:	e7ee      	b.n	80068f8 <__swhatbuf_r+0x1c>
 800691a:	2340      	movs	r3, #64	; 0x40
 800691c:	2000      	movs	r0, #0
 800691e:	6023      	str	r3, [r4, #0]
 8006920:	b010      	add	sp, #64	; 0x40
 8006922:	bd70      	pop	{r4, r5, r6, pc}

08006924 <__smakebuf_r>:
 8006924:	898b      	ldrh	r3, [r1, #12]
 8006926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006928:	079d      	lsls	r5, r3, #30
 800692a:	4606      	mov	r6, r0
 800692c:	460c      	mov	r4, r1
 800692e:	d507      	bpl.n	8006940 <__smakebuf_r+0x1c>
 8006930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	6123      	str	r3, [r4, #16]
 8006938:	2301      	movs	r3, #1
 800693a:	6163      	str	r3, [r4, #20]
 800693c:	b002      	add	sp, #8
 800693e:	bd70      	pop	{r4, r5, r6, pc}
 8006940:	ab01      	add	r3, sp, #4
 8006942:	466a      	mov	r2, sp
 8006944:	f7ff ffca 	bl	80068dc <__swhatbuf_r>
 8006948:	9900      	ldr	r1, [sp, #0]
 800694a:	4605      	mov	r5, r0
 800694c:	4630      	mov	r0, r6
 800694e:	f000 f875 	bl	8006a3c <_malloc_r>
 8006952:	b948      	cbnz	r0, 8006968 <__smakebuf_r+0x44>
 8006954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006958:	059a      	lsls	r2, r3, #22
 800695a:	d4ef      	bmi.n	800693c <__smakebuf_r+0x18>
 800695c:	f023 0303 	bic.w	r3, r3, #3
 8006960:	f043 0302 	orr.w	r3, r3, #2
 8006964:	81a3      	strh	r3, [r4, #12]
 8006966:	e7e3      	b.n	8006930 <__smakebuf_r+0xc>
 8006968:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <__smakebuf_r+0x7c>)
 800696a:	62b3      	str	r3, [r6, #40]	; 0x28
 800696c:	89a3      	ldrh	r3, [r4, #12]
 800696e:	6020      	str	r0, [r4, #0]
 8006970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006974:	81a3      	strh	r3, [r4, #12]
 8006976:	9b00      	ldr	r3, [sp, #0]
 8006978:	6120      	str	r0, [r4, #16]
 800697a:	6163      	str	r3, [r4, #20]
 800697c:	9b01      	ldr	r3, [sp, #4]
 800697e:	b15b      	cbz	r3, 8006998 <__smakebuf_r+0x74>
 8006980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006984:	4630      	mov	r0, r6
 8006986:	f000 fc15 	bl	80071b4 <_isatty_r>
 800698a:	b128      	cbz	r0, 8006998 <__smakebuf_r+0x74>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	f023 0303 	bic.w	r3, r3, #3
 8006992:	f043 0301 	orr.w	r3, r3, #1
 8006996:	81a3      	strh	r3, [r4, #12]
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	431d      	orrs	r5, r3
 800699c:	81a5      	strh	r5, [r4, #12]
 800699e:	e7cd      	b.n	800693c <__smakebuf_r+0x18>
 80069a0:	08006749 	.word	0x08006749

080069a4 <_free_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	4605      	mov	r5, r0
 80069a8:	2900      	cmp	r1, #0
 80069aa:	d043      	beq.n	8006a34 <_free_r+0x90>
 80069ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b0:	1f0c      	subs	r4, r1, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bfb8      	it	lt
 80069b6:	18e4      	addlt	r4, r4, r3
 80069b8:	f000 fc2c 	bl	8007214 <__malloc_lock>
 80069bc:	4a1e      	ldr	r2, [pc, #120]	; (8006a38 <_free_r+0x94>)
 80069be:	6813      	ldr	r3, [r2, #0]
 80069c0:	4610      	mov	r0, r2
 80069c2:	b933      	cbnz	r3, 80069d2 <_free_r+0x2e>
 80069c4:	6063      	str	r3, [r4, #4]
 80069c6:	6014      	str	r4, [r2, #0]
 80069c8:	4628      	mov	r0, r5
 80069ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ce:	f000 bc22 	b.w	8007216 <__malloc_unlock>
 80069d2:	42a3      	cmp	r3, r4
 80069d4:	d90b      	bls.n	80069ee <_free_r+0x4a>
 80069d6:	6821      	ldr	r1, [r4, #0]
 80069d8:	1862      	adds	r2, r4, r1
 80069da:	4293      	cmp	r3, r2
 80069dc:	bf01      	itttt	eq
 80069de:	681a      	ldreq	r2, [r3, #0]
 80069e0:	685b      	ldreq	r3, [r3, #4]
 80069e2:	1852      	addeq	r2, r2, r1
 80069e4:	6022      	streq	r2, [r4, #0]
 80069e6:	6063      	str	r3, [r4, #4]
 80069e8:	6004      	str	r4, [r0, #0]
 80069ea:	e7ed      	b.n	80069c8 <_free_r+0x24>
 80069ec:	4613      	mov	r3, r2
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	b10a      	cbz	r2, 80069f6 <_free_r+0x52>
 80069f2:	42a2      	cmp	r2, r4
 80069f4:	d9fa      	bls.n	80069ec <_free_r+0x48>
 80069f6:	6819      	ldr	r1, [r3, #0]
 80069f8:	1858      	adds	r0, r3, r1
 80069fa:	42a0      	cmp	r0, r4
 80069fc:	d10b      	bne.n	8006a16 <_free_r+0x72>
 80069fe:	6820      	ldr	r0, [r4, #0]
 8006a00:	4401      	add	r1, r0
 8006a02:	1858      	adds	r0, r3, r1
 8006a04:	4282      	cmp	r2, r0
 8006a06:	6019      	str	r1, [r3, #0]
 8006a08:	d1de      	bne.n	80069c8 <_free_r+0x24>
 8006a0a:	6810      	ldr	r0, [r2, #0]
 8006a0c:	6852      	ldr	r2, [r2, #4]
 8006a0e:	4401      	add	r1, r0
 8006a10:	6019      	str	r1, [r3, #0]
 8006a12:	605a      	str	r2, [r3, #4]
 8006a14:	e7d8      	b.n	80069c8 <_free_r+0x24>
 8006a16:	d902      	bls.n	8006a1e <_free_r+0x7a>
 8006a18:	230c      	movs	r3, #12
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	e7d4      	b.n	80069c8 <_free_r+0x24>
 8006a1e:	6820      	ldr	r0, [r4, #0]
 8006a20:	1821      	adds	r1, r4, r0
 8006a22:	428a      	cmp	r2, r1
 8006a24:	bf01      	itttt	eq
 8006a26:	6811      	ldreq	r1, [r2, #0]
 8006a28:	6852      	ldreq	r2, [r2, #4]
 8006a2a:	1809      	addeq	r1, r1, r0
 8006a2c:	6021      	streq	r1, [r4, #0]
 8006a2e:	6062      	str	r2, [r4, #4]
 8006a30:	605c      	str	r4, [r3, #4]
 8006a32:	e7c9      	b.n	80069c8 <_free_r+0x24>
 8006a34:	bd38      	pop	{r3, r4, r5, pc}
 8006a36:	bf00      	nop
 8006a38:	20000340 	.word	0x20000340

08006a3c <_malloc_r>:
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	1ccd      	adds	r5, r1, #3
 8006a40:	f025 0503 	bic.w	r5, r5, #3
 8006a44:	3508      	adds	r5, #8
 8006a46:	2d0c      	cmp	r5, #12
 8006a48:	bf38      	it	cc
 8006a4a:	250c      	movcc	r5, #12
 8006a4c:	2d00      	cmp	r5, #0
 8006a4e:	4606      	mov	r6, r0
 8006a50:	db01      	blt.n	8006a56 <_malloc_r+0x1a>
 8006a52:	42a9      	cmp	r1, r5
 8006a54:	d903      	bls.n	8006a5e <_malloc_r+0x22>
 8006a56:	230c      	movs	r3, #12
 8006a58:	6033      	str	r3, [r6, #0]
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
 8006a5e:	f000 fbd9 	bl	8007214 <__malloc_lock>
 8006a62:	4a23      	ldr	r2, [pc, #140]	; (8006af0 <_malloc_r+0xb4>)
 8006a64:	6814      	ldr	r4, [r2, #0]
 8006a66:	4621      	mov	r1, r4
 8006a68:	b991      	cbnz	r1, 8006a90 <_malloc_r+0x54>
 8006a6a:	4c22      	ldr	r4, [pc, #136]	; (8006af4 <_malloc_r+0xb8>)
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	b91b      	cbnz	r3, 8006a78 <_malloc_r+0x3c>
 8006a70:	4630      	mov	r0, r6
 8006a72:	f000 fb17 	bl	80070a4 <_sbrk_r>
 8006a76:	6020      	str	r0, [r4, #0]
 8006a78:	4629      	mov	r1, r5
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f000 fb12 	bl	80070a4 <_sbrk_r>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d126      	bne.n	8006ad2 <_malloc_r+0x96>
 8006a84:	230c      	movs	r3, #12
 8006a86:	4630      	mov	r0, r6
 8006a88:	6033      	str	r3, [r6, #0]
 8006a8a:	f000 fbc4 	bl	8007216 <__malloc_unlock>
 8006a8e:	e7e4      	b.n	8006a5a <_malloc_r+0x1e>
 8006a90:	680b      	ldr	r3, [r1, #0]
 8006a92:	1b5b      	subs	r3, r3, r5
 8006a94:	d41a      	bmi.n	8006acc <_malloc_r+0x90>
 8006a96:	2b0b      	cmp	r3, #11
 8006a98:	d90f      	bls.n	8006aba <_malloc_r+0x7e>
 8006a9a:	600b      	str	r3, [r1, #0]
 8006a9c:	18cc      	adds	r4, r1, r3
 8006a9e:	50cd      	str	r5, [r1, r3]
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f000 fbb8 	bl	8007216 <__malloc_unlock>
 8006aa6:	f104 000b 	add.w	r0, r4, #11
 8006aaa:	1d23      	adds	r3, r4, #4
 8006aac:	f020 0007 	bic.w	r0, r0, #7
 8006ab0:	1ac3      	subs	r3, r0, r3
 8006ab2:	d01b      	beq.n	8006aec <_malloc_r+0xb0>
 8006ab4:	425a      	negs	r2, r3
 8006ab6:	50e2      	str	r2, [r4, r3]
 8006ab8:	bd70      	pop	{r4, r5, r6, pc}
 8006aba:	428c      	cmp	r4, r1
 8006abc:	bf0b      	itete	eq
 8006abe:	6863      	ldreq	r3, [r4, #4]
 8006ac0:	684b      	ldrne	r3, [r1, #4]
 8006ac2:	6013      	streq	r3, [r2, #0]
 8006ac4:	6063      	strne	r3, [r4, #4]
 8006ac6:	bf18      	it	ne
 8006ac8:	460c      	movne	r4, r1
 8006aca:	e7e9      	b.n	8006aa0 <_malloc_r+0x64>
 8006acc:	460c      	mov	r4, r1
 8006ace:	6849      	ldr	r1, [r1, #4]
 8006ad0:	e7ca      	b.n	8006a68 <_malloc_r+0x2c>
 8006ad2:	1cc4      	adds	r4, r0, #3
 8006ad4:	f024 0403 	bic.w	r4, r4, #3
 8006ad8:	42a0      	cmp	r0, r4
 8006ada:	d005      	beq.n	8006ae8 <_malloc_r+0xac>
 8006adc:	1a21      	subs	r1, r4, r0
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f000 fae0 	bl	80070a4 <_sbrk_r>
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d0cd      	beq.n	8006a84 <_malloc_r+0x48>
 8006ae8:	6025      	str	r5, [r4, #0]
 8006aea:	e7d9      	b.n	8006aa0 <_malloc_r+0x64>
 8006aec:	bd70      	pop	{r4, r5, r6, pc}
 8006aee:	bf00      	nop
 8006af0:	20000340 	.word	0x20000340
 8006af4:	20000344 	.word	0x20000344

08006af8 <__sfputc_r>:
 8006af8:	6893      	ldr	r3, [r2, #8]
 8006afa:	b410      	push	{r4}
 8006afc:	3b01      	subs	r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	6093      	str	r3, [r2, #8]
 8006b02:	da08      	bge.n	8006b16 <__sfputc_r+0x1e>
 8006b04:	6994      	ldr	r4, [r2, #24]
 8006b06:	42a3      	cmp	r3, r4
 8006b08:	db02      	blt.n	8006b10 <__sfputc_r+0x18>
 8006b0a:	b2cb      	uxtb	r3, r1
 8006b0c:	2b0a      	cmp	r3, #10
 8006b0e:	d102      	bne.n	8006b16 <__sfputc_r+0x1e>
 8006b10:	bc10      	pop	{r4}
 8006b12:	f7ff bca7 	b.w	8006464 <__swbuf_r>
 8006b16:	6813      	ldr	r3, [r2, #0]
 8006b18:	1c58      	adds	r0, r3, #1
 8006b1a:	6010      	str	r0, [r2, #0]
 8006b1c:	7019      	strb	r1, [r3, #0]
 8006b1e:	b2c8      	uxtb	r0, r1
 8006b20:	bc10      	pop	{r4}
 8006b22:	4770      	bx	lr

08006b24 <__sfputs_r>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	4606      	mov	r6, r0
 8006b28:	460f      	mov	r7, r1
 8006b2a:	4614      	mov	r4, r2
 8006b2c:	18d5      	adds	r5, r2, r3
 8006b2e:	42ac      	cmp	r4, r5
 8006b30:	d101      	bne.n	8006b36 <__sfputs_r+0x12>
 8006b32:	2000      	movs	r0, #0
 8006b34:	e007      	b.n	8006b46 <__sfputs_r+0x22>
 8006b36:	463a      	mov	r2, r7
 8006b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	f7ff ffdb 	bl	8006af8 <__sfputc_r>
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	d1f3      	bne.n	8006b2e <__sfputs_r+0xa>
 8006b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b48 <_vfiprintf_r>:
 8006b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	b09d      	sub	sp, #116	; 0x74
 8006b4e:	460c      	mov	r4, r1
 8006b50:	4617      	mov	r7, r2
 8006b52:	9303      	str	r3, [sp, #12]
 8006b54:	4606      	mov	r6, r0
 8006b56:	b118      	cbz	r0, 8006b60 <_vfiprintf_r+0x18>
 8006b58:	6983      	ldr	r3, [r0, #24]
 8006b5a:	b90b      	cbnz	r3, 8006b60 <_vfiprintf_r+0x18>
 8006b5c:	f7ff fe34 	bl	80067c8 <__sinit>
 8006b60:	4b7c      	ldr	r3, [pc, #496]	; (8006d54 <_vfiprintf_r+0x20c>)
 8006b62:	429c      	cmp	r4, r3
 8006b64:	d157      	bne.n	8006c16 <_vfiprintf_r+0xce>
 8006b66:	6874      	ldr	r4, [r6, #4]
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	0718      	lsls	r0, r3, #28
 8006b6c:	d55d      	bpl.n	8006c2a <_vfiprintf_r+0xe2>
 8006b6e:	6923      	ldr	r3, [r4, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d05a      	beq.n	8006c2a <_vfiprintf_r+0xe2>
 8006b74:	2300      	movs	r3, #0
 8006b76:	9309      	str	r3, [sp, #36]	; 0x24
 8006b78:	2320      	movs	r3, #32
 8006b7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b7e:	2330      	movs	r3, #48	; 0x30
 8006b80:	f04f 0b01 	mov.w	fp, #1
 8006b84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b88:	46b8      	mov	r8, r7
 8006b8a:	4645      	mov	r5, r8
 8006b8c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d155      	bne.n	8006c40 <_vfiprintf_r+0xf8>
 8006b94:	ebb8 0a07 	subs.w	sl, r8, r7
 8006b98:	d00b      	beq.n	8006bb2 <_vfiprintf_r+0x6a>
 8006b9a:	4653      	mov	r3, sl
 8006b9c:	463a      	mov	r2, r7
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f7ff ffbf 	bl	8006b24 <__sfputs_r>
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	f000 80c4 	beq.w	8006d34 <_vfiprintf_r+0x1ec>
 8006bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bae:	4453      	add	r3, sl
 8006bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb2:	f898 3000 	ldrb.w	r3, [r8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 80bc 	beq.w	8006d34 <_vfiprintf_r+0x1ec>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc2:	9304      	str	r3, [sp, #16]
 8006bc4:	9307      	str	r3, [sp, #28]
 8006bc6:	9205      	str	r2, [sp, #20]
 8006bc8:	9306      	str	r3, [sp, #24]
 8006bca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bce:	931a      	str	r3, [sp, #104]	; 0x68
 8006bd0:	2205      	movs	r2, #5
 8006bd2:	7829      	ldrb	r1, [r5, #0]
 8006bd4:	4860      	ldr	r0, [pc, #384]	; (8006d58 <_vfiprintf_r+0x210>)
 8006bd6:	f000 fb0f 	bl	80071f8 <memchr>
 8006bda:	f105 0801 	add.w	r8, r5, #1
 8006bde:	9b04      	ldr	r3, [sp, #16]
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d131      	bne.n	8006c48 <_vfiprintf_r+0x100>
 8006be4:	06d9      	lsls	r1, r3, #27
 8006be6:	bf44      	itt	mi
 8006be8:	2220      	movmi	r2, #32
 8006bea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006bee:	071a      	lsls	r2, r3, #28
 8006bf0:	bf44      	itt	mi
 8006bf2:	222b      	movmi	r2, #43	; 0x2b
 8006bf4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006bf8:	782a      	ldrb	r2, [r5, #0]
 8006bfa:	2a2a      	cmp	r2, #42	; 0x2a
 8006bfc:	d02c      	beq.n	8006c58 <_vfiprintf_r+0x110>
 8006bfe:	2100      	movs	r1, #0
 8006c00:	200a      	movs	r0, #10
 8006c02:	9a07      	ldr	r2, [sp, #28]
 8006c04:	46a8      	mov	r8, r5
 8006c06:	f898 3000 	ldrb.w	r3, [r8]
 8006c0a:	3501      	adds	r5, #1
 8006c0c:	3b30      	subs	r3, #48	; 0x30
 8006c0e:	2b09      	cmp	r3, #9
 8006c10:	d96d      	bls.n	8006cee <_vfiprintf_r+0x1a6>
 8006c12:	b371      	cbz	r1, 8006c72 <_vfiprintf_r+0x12a>
 8006c14:	e026      	b.n	8006c64 <_vfiprintf_r+0x11c>
 8006c16:	4b51      	ldr	r3, [pc, #324]	; (8006d5c <_vfiprintf_r+0x214>)
 8006c18:	429c      	cmp	r4, r3
 8006c1a:	d101      	bne.n	8006c20 <_vfiprintf_r+0xd8>
 8006c1c:	68b4      	ldr	r4, [r6, #8]
 8006c1e:	e7a3      	b.n	8006b68 <_vfiprintf_r+0x20>
 8006c20:	4b4f      	ldr	r3, [pc, #316]	; (8006d60 <_vfiprintf_r+0x218>)
 8006c22:	429c      	cmp	r4, r3
 8006c24:	bf08      	it	eq
 8006c26:	68f4      	ldreq	r4, [r6, #12]
 8006c28:	e79e      	b.n	8006b68 <_vfiprintf_r+0x20>
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	f7ff fc6b 	bl	8006508 <__swsetup_r>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d09e      	beq.n	8006b74 <_vfiprintf_r+0x2c>
 8006c36:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3a:	b01d      	add	sp, #116	; 0x74
 8006c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c40:	2b25      	cmp	r3, #37	; 0x25
 8006c42:	d0a7      	beq.n	8006b94 <_vfiprintf_r+0x4c>
 8006c44:	46a8      	mov	r8, r5
 8006c46:	e7a0      	b.n	8006b8a <_vfiprintf_r+0x42>
 8006c48:	4a43      	ldr	r2, [pc, #268]	; (8006d58 <_vfiprintf_r+0x210>)
 8006c4a:	4645      	mov	r5, r8
 8006c4c:	1a80      	subs	r0, r0, r2
 8006c4e:	fa0b f000 	lsl.w	r0, fp, r0
 8006c52:	4318      	orrs	r0, r3
 8006c54:	9004      	str	r0, [sp, #16]
 8006c56:	e7bb      	b.n	8006bd0 <_vfiprintf_r+0x88>
 8006c58:	9a03      	ldr	r2, [sp, #12]
 8006c5a:	1d11      	adds	r1, r2, #4
 8006c5c:	6812      	ldr	r2, [r2, #0]
 8006c5e:	9103      	str	r1, [sp, #12]
 8006c60:	2a00      	cmp	r2, #0
 8006c62:	db01      	blt.n	8006c68 <_vfiprintf_r+0x120>
 8006c64:	9207      	str	r2, [sp, #28]
 8006c66:	e004      	b.n	8006c72 <_vfiprintf_r+0x12a>
 8006c68:	4252      	negs	r2, r2
 8006c6a:	f043 0302 	orr.w	r3, r3, #2
 8006c6e:	9207      	str	r2, [sp, #28]
 8006c70:	9304      	str	r3, [sp, #16]
 8006c72:	f898 3000 	ldrb.w	r3, [r8]
 8006c76:	2b2e      	cmp	r3, #46	; 0x2e
 8006c78:	d110      	bne.n	8006c9c <_vfiprintf_r+0x154>
 8006c7a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006c7e:	f108 0101 	add.w	r1, r8, #1
 8006c82:	2b2a      	cmp	r3, #42	; 0x2a
 8006c84:	d137      	bne.n	8006cf6 <_vfiprintf_r+0x1ae>
 8006c86:	9b03      	ldr	r3, [sp, #12]
 8006c88:	f108 0802 	add.w	r8, r8, #2
 8006c8c:	1d1a      	adds	r2, r3, #4
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	9203      	str	r2, [sp, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	bfb8      	it	lt
 8006c96:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c9a:	9305      	str	r3, [sp, #20]
 8006c9c:	4d31      	ldr	r5, [pc, #196]	; (8006d64 <_vfiprintf_r+0x21c>)
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	f898 1000 	ldrb.w	r1, [r8]
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f000 faa7 	bl	80071f8 <memchr>
 8006caa:	b140      	cbz	r0, 8006cbe <_vfiprintf_r+0x176>
 8006cac:	2340      	movs	r3, #64	; 0x40
 8006cae:	1b40      	subs	r0, r0, r5
 8006cb0:	fa03 f000 	lsl.w	r0, r3, r0
 8006cb4:	9b04      	ldr	r3, [sp, #16]
 8006cb6:	f108 0801 	add.w	r8, r8, #1
 8006cba:	4303      	orrs	r3, r0
 8006cbc:	9304      	str	r3, [sp, #16]
 8006cbe:	f898 1000 	ldrb.w	r1, [r8]
 8006cc2:	2206      	movs	r2, #6
 8006cc4:	4828      	ldr	r0, [pc, #160]	; (8006d68 <_vfiprintf_r+0x220>)
 8006cc6:	f108 0701 	add.w	r7, r8, #1
 8006cca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cce:	f000 fa93 	bl	80071f8 <memchr>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d034      	beq.n	8006d40 <_vfiprintf_r+0x1f8>
 8006cd6:	4b25      	ldr	r3, [pc, #148]	; (8006d6c <_vfiprintf_r+0x224>)
 8006cd8:	bb03      	cbnz	r3, 8006d1c <_vfiprintf_r+0x1d4>
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	3307      	adds	r3, #7
 8006cde:	f023 0307 	bic.w	r3, r3, #7
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	9303      	str	r3, [sp, #12]
 8006ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce8:	444b      	add	r3, r9
 8006cea:	9309      	str	r3, [sp, #36]	; 0x24
 8006cec:	e74c      	b.n	8006b88 <_vfiprintf_r+0x40>
 8006cee:	fb00 3202 	mla	r2, r0, r2, r3
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	e786      	b.n	8006c04 <_vfiprintf_r+0xbc>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	250a      	movs	r5, #10
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	9305      	str	r3, [sp, #20]
 8006cfe:	4688      	mov	r8, r1
 8006d00:	f898 2000 	ldrb.w	r2, [r8]
 8006d04:	3101      	adds	r1, #1
 8006d06:	3a30      	subs	r2, #48	; 0x30
 8006d08:	2a09      	cmp	r2, #9
 8006d0a:	d903      	bls.n	8006d14 <_vfiprintf_r+0x1cc>
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0c5      	beq.n	8006c9c <_vfiprintf_r+0x154>
 8006d10:	9005      	str	r0, [sp, #20]
 8006d12:	e7c3      	b.n	8006c9c <_vfiprintf_r+0x154>
 8006d14:	fb05 2000 	mla	r0, r5, r0, r2
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e7f0      	b.n	8006cfe <_vfiprintf_r+0x1b6>
 8006d1c:	ab03      	add	r3, sp, #12
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	4622      	mov	r2, r4
 8006d22:	4b13      	ldr	r3, [pc, #76]	; (8006d70 <_vfiprintf_r+0x228>)
 8006d24:	a904      	add	r1, sp, #16
 8006d26:	4630      	mov	r0, r6
 8006d28:	f3af 8000 	nop.w
 8006d2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d30:	4681      	mov	r9, r0
 8006d32:	d1d8      	bne.n	8006ce6 <_vfiprintf_r+0x19e>
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	065b      	lsls	r3, r3, #25
 8006d38:	f53f af7d 	bmi.w	8006c36 <_vfiprintf_r+0xee>
 8006d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d3e:	e77c      	b.n	8006c3a <_vfiprintf_r+0xf2>
 8006d40:	ab03      	add	r3, sp, #12
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	4622      	mov	r2, r4
 8006d46:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <_vfiprintf_r+0x228>)
 8006d48:	a904      	add	r1, sp, #16
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	f000 f88a 	bl	8006e64 <_printf_i>
 8006d50:	e7ec      	b.n	8006d2c <_vfiprintf_r+0x1e4>
 8006d52:	bf00      	nop
 8006d54:	080074ac 	.word	0x080074ac
 8006d58:	080074f0 	.word	0x080074f0
 8006d5c:	080074cc 	.word	0x080074cc
 8006d60:	0800748c 	.word	0x0800748c
 8006d64:	080074f6 	.word	0x080074f6
 8006d68:	080074fa 	.word	0x080074fa
 8006d6c:	00000000 	.word	0x00000000
 8006d70:	08006b25 	.word	0x08006b25

08006d74 <_printf_common>:
 8006d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d78:	4691      	mov	r9, r2
 8006d7a:	461f      	mov	r7, r3
 8006d7c:	688a      	ldr	r2, [r1, #8]
 8006d7e:	690b      	ldr	r3, [r1, #16]
 8006d80:	4606      	mov	r6, r0
 8006d82:	4293      	cmp	r3, r2
 8006d84:	bfb8      	it	lt
 8006d86:	4613      	movlt	r3, r2
 8006d88:	f8c9 3000 	str.w	r3, [r9]
 8006d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d90:	460c      	mov	r4, r1
 8006d92:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d96:	b112      	cbz	r2, 8006d9e <_printf_common+0x2a>
 8006d98:	3301      	adds	r3, #1
 8006d9a:	f8c9 3000 	str.w	r3, [r9]
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	0699      	lsls	r1, r3, #26
 8006da2:	bf42      	ittt	mi
 8006da4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006da8:	3302      	addmi	r3, #2
 8006daa:	f8c9 3000 	strmi.w	r3, [r9]
 8006dae:	6825      	ldr	r5, [r4, #0]
 8006db0:	f015 0506 	ands.w	r5, r5, #6
 8006db4:	d107      	bne.n	8006dc6 <_printf_common+0x52>
 8006db6:	f104 0a19 	add.w	sl, r4, #25
 8006dba:	68e3      	ldr	r3, [r4, #12]
 8006dbc:	f8d9 2000 	ldr.w	r2, [r9]
 8006dc0:	1a9b      	subs	r3, r3, r2
 8006dc2:	429d      	cmp	r5, r3
 8006dc4:	db2a      	blt.n	8006e1c <_printf_common+0xa8>
 8006dc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006dca:	6822      	ldr	r2, [r4, #0]
 8006dcc:	3300      	adds	r3, #0
 8006dce:	bf18      	it	ne
 8006dd0:	2301      	movne	r3, #1
 8006dd2:	0692      	lsls	r2, r2, #26
 8006dd4:	d42f      	bmi.n	8006e36 <_printf_common+0xc2>
 8006dd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dda:	4639      	mov	r1, r7
 8006ddc:	4630      	mov	r0, r6
 8006dde:	47c0      	blx	r8
 8006de0:	3001      	adds	r0, #1
 8006de2:	d022      	beq.n	8006e2a <_printf_common+0xb6>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	68e5      	ldr	r5, [r4, #12]
 8006de8:	f003 0306 	and.w	r3, r3, #6
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	bf18      	it	ne
 8006df0:	2500      	movne	r5, #0
 8006df2:	f8d9 2000 	ldr.w	r2, [r9]
 8006df6:	f04f 0900 	mov.w	r9, #0
 8006dfa:	bf08      	it	eq
 8006dfc:	1aad      	subeq	r5, r5, r2
 8006dfe:	68a3      	ldr	r3, [r4, #8]
 8006e00:	6922      	ldr	r2, [r4, #16]
 8006e02:	bf08      	it	eq
 8006e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	bfc4      	itt	gt
 8006e0c:	1a9b      	subgt	r3, r3, r2
 8006e0e:	18ed      	addgt	r5, r5, r3
 8006e10:	341a      	adds	r4, #26
 8006e12:	454d      	cmp	r5, r9
 8006e14:	d11b      	bne.n	8006e4e <_printf_common+0xda>
 8006e16:	2000      	movs	r0, #0
 8006e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	4652      	mov	r2, sl
 8006e20:	4639      	mov	r1, r7
 8006e22:	4630      	mov	r0, r6
 8006e24:	47c0      	blx	r8
 8006e26:	3001      	adds	r0, #1
 8006e28:	d103      	bne.n	8006e32 <_printf_common+0xbe>
 8006e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e32:	3501      	adds	r5, #1
 8006e34:	e7c1      	b.n	8006dba <_printf_common+0x46>
 8006e36:	2030      	movs	r0, #48	; 0x30
 8006e38:	18e1      	adds	r1, r4, r3
 8006e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e44:	4422      	add	r2, r4
 8006e46:	3302      	adds	r3, #2
 8006e48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e4c:	e7c3      	b.n	8006dd6 <_printf_common+0x62>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	4622      	mov	r2, r4
 8006e52:	4639      	mov	r1, r7
 8006e54:	4630      	mov	r0, r6
 8006e56:	47c0      	blx	r8
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d0e6      	beq.n	8006e2a <_printf_common+0xb6>
 8006e5c:	f109 0901 	add.w	r9, r9, #1
 8006e60:	e7d7      	b.n	8006e12 <_printf_common+0x9e>
	...

08006e64 <_printf_i>:
 8006e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e68:	4617      	mov	r7, r2
 8006e6a:	7e0a      	ldrb	r2, [r1, #24]
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	2a6e      	cmp	r2, #110	; 0x6e
 8006e70:	4698      	mov	r8, r3
 8006e72:	4606      	mov	r6, r0
 8006e74:	460c      	mov	r4, r1
 8006e76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e78:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006e7c:	f000 80bc 	beq.w	8006ff8 <_printf_i+0x194>
 8006e80:	d81a      	bhi.n	8006eb8 <_printf_i+0x54>
 8006e82:	2a63      	cmp	r2, #99	; 0x63
 8006e84:	d02e      	beq.n	8006ee4 <_printf_i+0x80>
 8006e86:	d80a      	bhi.n	8006e9e <_printf_i+0x3a>
 8006e88:	2a00      	cmp	r2, #0
 8006e8a:	f000 80c8 	beq.w	800701e <_printf_i+0x1ba>
 8006e8e:	2a58      	cmp	r2, #88	; 0x58
 8006e90:	f000 808a 	beq.w	8006fa8 <_printf_i+0x144>
 8006e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e98:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006e9c:	e02a      	b.n	8006ef4 <_printf_i+0x90>
 8006e9e:	2a64      	cmp	r2, #100	; 0x64
 8006ea0:	d001      	beq.n	8006ea6 <_printf_i+0x42>
 8006ea2:	2a69      	cmp	r2, #105	; 0x69
 8006ea4:	d1f6      	bne.n	8006e94 <_printf_i+0x30>
 8006ea6:	6821      	ldr	r1, [r4, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006eae:	d023      	beq.n	8006ef8 <_printf_i+0x94>
 8006eb0:	1d11      	adds	r1, r2, #4
 8006eb2:	6019      	str	r1, [r3, #0]
 8006eb4:	6813      	ldr	r3, [r2, #0]
 8006eb6:	e027      	b.n	8006f08 <_printf_i+0xa4>
 8006eb8:	2a73      	cmp	r2, #115	; 0x73
 8006eba:	f000 80b4 	beq.w	8007026 <_printf_i+0x1c2>
 8006ebe:	d808      	bhi.n	8006ed2 <_printf_i+0x6e>
 8006ec0:	2a6f      	cmp	r2, #111	; 0x6f
 8006ec2:	d02a      	beq.n	8006f1a <_printf_i+0xb6>
 8006ec4:	2a70      	cmp	r2, #112	; 0x70
 8006ec6:	d1e5      	bne.n	8006e94 <_printf_i+0x30>
 8006ec8:	680a      	ldr	r2, [r1, #0]
 8006eca:	f042 0220 	orr.w	r2, r2, #32
 8006ece:	600a      	str	r2, [r1, #0]
 8006ed0:	e003      	b.n	8006eda <_printf_i+0x76>
 8006ed2:	2a75      	cmp	r2, #117	; 0x75
 8006ed4:	d021      	beq.n	8006f1a <_printf_i+0xb6>
 8006ed6:	2a78      	cmp	r2, #120	; 0x78
 8006ed8:	d1dc      	bne.n	8006e94 <_printf_i+0x30>
 8006eda:	2278      	movs	r2, #120	; 0x78
 8006edc:	496f      	ldr	r1, [pc, #444]	; (800709c <_printf_i+0x238>)
 8006ede:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006ee2:	e064      	b.n	8006fae <_printf_i+0x14a>
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006eea:	1d11      	adds	r1, r2, #4
 8006eec:	6019      	str	r1, [r3, #0]
 8006eee:	6813      	ldr	r3, [r2, #0]
 8006ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e0a3      	b.n	8007040 <_printf_i+0x1dc>
 8006ef8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006efc:	f102 0104 	add.w	r1, r2, #4
 8006f00:	6019      	str	r1, [r3, #0]
 8006f02:	d0d7      	beq.n	8006eb4 <_printf_i+0x50>
 8006f04:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	da03      	bge.n	8006f14 <_printf_i+0xb0>
 8006f0c:	222d      	movs	r2, #45	; 0x2d
 8006f0e:	425b      	negs	r3, r3
 8006f10:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f14:	4962      	ldr	r1, [pc, #392]	; (80070a0 <_printf_i+0x23c>)
 8006f16:	220a      	movs	r2, #10
 8006f18:	e017      	b.n	8006f4a <_printf_i+0xe6>
 8006f1a:	6820      	ldr	r0, [r4, #0]
 8006f1c:	6819      	ldr	r1, [r3, #0]
 8006f1e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006f22:	d003      	beq.n	8006f2c <_printf_i+0xc8>
 8006f24:	1d08      	adds	r0, r1, #4
 8006f26:	6018      	str	r0, [r3, #0]
 8006f28:	680b      	ldr	r3, [r1, #0]
 8006f2a:	e006      	b.n	8006f3a <_printf_i+0xd6>
 8006f2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f30:	f101 0004 	add.w	r0, r1, #4
 8006f34:	6018      	str	r0, [r3, #0]
 8006f36:	d0f7      	beq.n	8006f28 <_printf_i+0xc4>
 8006f38:	880b      	ldrh	r3, [r1, #0]
 8006f3a:	2a6f      	cmp	r2, #111	; 0x6f
 8006f3c:	bf14      	ite	ne
 8006f3e:	220a      	movne	r2, #10
 8006f40:	2208      	moveq	r2, #8
 8006f42:	4957      	ldr	r1, [pc, #348]	; (80070a0 <_printf_i+0x23c>)
 8006f44:	2000      	movs	r0, #0
 8006f46:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006f4a:	6865      	ldr	r5, [r4, #4]
 8006f4c:	2d00      	cmp	r5, #0
 8006f4e:	60a5      	str	r5, [r4, #8]
 8006f50:	f2c0 809c 	blt.w	800708c <_printf_i+0x228>
 8006f54:	6820      	ldr	r0, [r4, #0]
 8006f56:	f020 0004 	bic.w	r0, r0, #4
 8006f5a:	6020      	str	r0, [r4, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d13f      	bne.n	8006fe0 <_printf_i+0x17c>
 8006f60:	2d00      	cmp	r5, #0
 8006f62:	f040 8095 	bne.w	8007090 <_printf_i+0x22c>
 8006f66:	4675      	mov	r5, lr
 8006f68:	2a08      	cmp	r2, #8
 8006f6a:	d10b      	bne.n	8006f84 <_printf_i+0x120>
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	07da      	lsls	r2, r3, #31
 8006f70:	d508      	bpl.n	8006f84 <_printf_i+0x120>
 8006f72:	6923      	ldr	r3, [r4, #16]
 8006f74:	6862      	ldr	r2, [r4, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	bfde      	ittt	le
 8006f7a:	2330      	movle	r3, #48	; 0x30
 8006f7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f84:	ebae 0305 	sub.w	r3, lr, r5
 8006f88:	6123      	str	r3, [r4, #16]
 8006f8a:	f8cd 8000 	str.w	r8, [sp]
 8006f8e:	463b      	mov	r3, r7
 8006f90:	aa03      	add	r2, sp, #12
 8006f92:	4621      	mov	r1, r4
 8006f94:	4630      	mov	r0, r6
 8006f96:	f7ff feed 	bl	8006d74 <_printf_common>
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d155      	bne.n	800704a <_printf_i+0x1e6>
 8006f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa2:	b005      	add	sp, #20
 8006fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fa8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006fac:	493c      	ldr	r1, [pc, #240]	; (80070a0 <_printf_i+0x23c>)
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006fb6:	f100 0504 	add.w	r5, r0, #4
 8006fba:	601d      	str	r5, [r3, #0]
 8006fbc:	d001      	beq.n	8006fc2 <_printf_i+0x15e>
 8006fbe:	6803      	ldr	r3, [r0, #0]
 8006fc0:	e002      	b.n	8006fc8 <_printf_i+0x164>
 8006fc2:	0655      	lsls	r5, r2, #25
 8006fc4:	d5fb      	bpl.n	8006fbe <_printf_i+0x15a>
 8006fc6:	8803      	ldrh	r3, [r0, #0]
 8006fc8:	07d0      	lsls	r0, r2, #31
 8006fca:	bf44      	itt	mi
 8006fcc:	f042 0220 	orrmi.w	r2, r2, #32
 8006fd0:	6022      	strmi	r2, [r4, #0]
 8006fd2:	b91b      	cbnz	r3, 8006fdc <_printf_i+0x178>
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	f022 0220 	bic.w	r2, r2, #32
 8006fda:	6022      	str	r2, [r4, #0]
 8006fdc:	2210      	movs	r2, #16
 8006fde:	e7b1      	b.n	8006f44 <_printf_i+0xe0>
 8006fe0:	4675      	mov	r5, lr
 8006fe2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fe6:	fb02 3310 	mls	r3, r2, r0, r3
 8006fea:	5ccb      	ldrb	r3, [r1, r3]
 8006fec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d1f5      	bne.n	8006fe2 <_printf_i+0x17e>
 8006ff6:	e7b7      	b.n	8006f68 <_printf_i+0x104>
 8006ff8:	6808      	ldr	r0, [r1, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007000:	6949      	ldr	r1, [r1, #20]
 8007002:	d004      	beq.n	800700e <_printf_i+0x1aa>
 8007004:	1d10      	adds	r0, r2, #4
 8007006:	6018      	str	r0, [r3, #0]
 8007008:	6813      	ldr	r3, [r2, #0]
 800700a:	6019      	str	r1, [r3, #0]
 800700c:	e007      	b.n	800701e <_printf_i+0x1ba>
 800700e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007012:	f102 0004 	add.w	r0, r2, #4
 8007016:	6018      	str	r0, [r3, #0]
 8007018:	6813      	ldr	r3, [r2, #0]
 800701a:	d0f6      	beq.n	800700a <_printf_i+0x1a6>
 800701c:	8019      	strh	r1, [r3, #0]
 800701e:	2300      	movs	r3, #0
 8007020:	4675      	mov	r5, lr
 8007022:	6123      	str	r3, [r4, #16]
 8007024:	e7b1      	b.n	8006f8a <_printf_i+0x126>
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	1d11      	adds	r1, r2, #4
 800702a:	6019      	str	r1, [r3, #0]
 800702c:	6815      	ldr	r5, [r2, #0]
 800702e:	2100      	movs	r1, #0
 8007030:	6862      	ldr	r2, [r4, #4]
 8007032:	4628      	mov	r0, r5
 8007034:	f000 f8e0 	bl	80071f8 <memchr>
 8007038:	b108      	cbz	r0, 800703e <_printf_i+0x1da>
 800703a:	1b40      	subs	r0, r0, r5
 800703c:	6060      	str	r0, [r4, #4]
 800703e:	6863      	ldr	r3, [r4, #4]
 8007040:	6123      	str	r3, [r4, #16]
 8007042:	2300      	movs	r3, #0
 8007044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007048:	e79f      	b.n	8006f8a <_printf_i+0x126>
 800704a:	6923      	ldr	r3, [r4, #16]
 800704c:	462a      	mov	r2, r5
 800704e:	4639      	mov	r1, r7
 8007050:	4630      	mov	r0, r6
 8007052:	47c0      	blx	r8
 8007054:	3001      	adds	r0, #1
 8007056:	d0a2      	beq.n	8006f9e <_printf_i+0x13a>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	079b      	lsls	r3, r3, #30
 800705c:	d507      	bpl.n	800706e <_printf_i+0x20a>
 800705e:	2500      	movs	r5, #0
 8007060:	f104 0919 	add.w	r9, r4, #25
 8007064:	68e3      	ldr	r3, [r4, #12]
 8007066:	9a03      	ldr	r2, [sp, #12]
 8007068:	1a9b      	subs	r3, r3, r2
 800706a:	429d      	cmp	r5, r3
 800706c:	db05      	blt.n	800707a <_printf_i+0x216>
 800706e:	68e0      	ldr	r0, [r4, #12]
 8007070:	9b03      	ldr	r3, [sp, #12]
 8007072:	4298      	cmp	r0, r3
 8007074:	bfb8      	it	lt
 8007076:	4618      	movlt	r0, r3
 8007078:	e793      	b.n	8006fa2 <_printf_i+0x13e>
 800707a:	2301      	movs	r3, #1
 800707c:	464a      	mov	r2, r9
 800707e:	4639      	mov	r1, r7
 8007080:	4630      	mov	r0, r6
 8007082:	47c0      	blx	r8
 8007084:	3001      	adds	r0, #1
 8007086:	d08a      	beq.n	8006f9e <_printf_i+0x13a>
 8007088:	3501      	adds	r5, #1
 800708a:	e7eb      	b.n	8007064 <_printf_i+0x200>
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1a7      	bne.n	8006fe0 <_printf_i+0x17c>
 8007090:	780b      	ldrb	r3, [r1, #0]
 8007092:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007096:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800709a:	e765      	b.n	8006f68 <_printf_i+0x104>
 800709c:	08007512 	.word	0x08007512
 80070a0:	08007501 	.word	0x08007501

080070a4 <_sbrk_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	2300      	movs	r3, #0
 80070a8:	4c05      	ldr	r4, [pc, #20]	; (80070c0 <_sbrk_r+0x1c>)
 80070aa:	4605      	mov	r5, r0
 80070ac:	4608      	mov	r0, r1
 80070ae:	6023      	str	r3, [r4, #0]
 80070b0:	f000 f8ec 	bl	800728c <_sbrk>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_sbrk_r+0x1a>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	b103      	cbz	r3, 80070be <_sbrk_r+0x1a>
 80070bc:	602b      	str	r3, [r5, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	20000ca8 	.word	0x20000ca8

080070c4 <__sread>:
 80070c4:	b510      	push	{r4, lr}
 80070c6:	460c      	mov	r4, r1
 80070c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070cc:	f000 f8a4 	bl	8007218 <_read_r>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	bfab      	itete	ge
 80070d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070d6:	89a3      	ldrhlt	r3, [r4, #12]
 80070d8:	181b      	addge	r3, r3, r0
 80070da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070de:	bfac      	ite	ge
 80070e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80070e2:	81a3      	strhlt	r3, [r4, #12]
 80070e4:	bd10      	pop	{r4, pc}

080070e6 <__swrite>:
 80070e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ea:	461f      	mov	r7, r3
 80070ec:	898b      	ldrh	r3, [r1, #12]
 80070ee:	4605      	mov	r5, r0
 80070f0:	05db      	lsls	r3, r3, #23
 80070f2:	460c      	mov	r4, r1
 80070f4:	4616      	mov	r6, r2
 80070f6:	d505      	bpl.n	8007104 <__swrite+0x1e>
 80070f8:	2302      	movs	r3, #2
 80070fa:	2200      	movs	r2, #0
 80070fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007100:	f000 f868 	bl	80071d4 <_lseek_r>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	4632      	mov	r2, r6
 8007108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800710c:	81a3      	strh	r3, [r4, #12]
 800710e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007112:	463b      	mov	r3, r7
 8007114:	4628      	mov	r0, r5
 8007116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800711a:	f000 b817 	b.w	800714c <_write_r>

0800711e <__sseek>:
 800711e:	b510      	push	{r4, lr}
 8007120:	460c      	mov	r4, r1
 8007122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007126:	f000 f855 	bl	80071d4 <_lseek_r>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	bf15      	itete	ne
 8007130:	6560      	strne	r0, [r4, #84]	; 0x54
 8007132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800713a:	81a3      	strheq	r3, [r4, #12]
 800713c:	bf18      	it	ne
 800713e:	81a3      	strhne	r3, [r4, #12]
 8007140:	bd10      	pop	{r4, pc}

08007142 <__sclose>:
 8007142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007146:	f000 b813 	b.w	8007170 <_close_r>
	...

0800714c <_write_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4605      	mov	r5, r0
 8007150:	4608      	mov	r0, r1
 8007152:	4611      	mov	r1, r2
 8007154:	2200      	movs	r2, #0
 8007156:	4c05      	ldr	r4, [pc, #20]	; (800716c <_write_r+0x20>)
 8007158:	6022      	str	r2, [r4, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	f7fe fa60 	bl	8005620 <_write>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	d102      	bne.n	800716a <_write_r+0x1e>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	b103      	cbz	r3, 800716a <_write_r+0x1e>
 8007168:	602b      	str	r3, [r5, #0]
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	20000ca8 	.word	0x20000ca8

08007170 <_close_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	2300      	movs	r3, #0
 8007174:	4c05      	ldr	r4, [pc, #20]	; (800718c <_close_r+0x1c>)
 8007176:	4605      	mov	r5, r0
 8007178:	4608      	mov	r0, r1
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	f000 f85e 	bl	800723c <_close>
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	d102      	bne.n	800718a <_close_r+0x1a>
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	b103      	cbz	r3, 800718a <_close_r+0x1a>
 8007188:	602b      	str	r3, [r5, #0]
 800718a:	bd38      	pop	{r3, r4, r5, pc}
 800718c:	20000ca8 	.word	0x20000ca8

08007190 <_fstat_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	2300      	movs	r3, #0
 8007194:	4c06      	ldr	r4, [pc, #24]	; (80071b0 <_fstat_r+0x20>)
 8007196:	4605      	mov	r5, r0
 8007198:	4608      	mov	r0, r1
 800719a:	4611      	mov	r1, r2
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	f000 f855 	bl	800724c <_fstat>
 80071a2:	1c43      	adds	r3, r0, #1
 80071a4:	d102      	bne.n	80071ac <_fstat_r+0x1c>
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	b103      	cbz	r3, 80071ac <_fstat_r+0x1c>
 80071aa:	602b      	str	r3, [r5, #0]
 80071ac:	bd38      	pop	{r3, r4, r5, pc}
 80071ae:	bf00      	nop
 80071b0:	20000ca8 	.word	0x20000ca8

080071b4 <_isatty_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	2300      	movs	r3, #0
 80071b8:	4c05      	ldr	r4, [pc, #20]	; (80071d0 <_isatty_r+0x1c>)
 80071ba:	4605      	mov	r5, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	6023      	str	r3, [r4, #0]
 80071c0:	f000 f84c 	bl	800725c <_isatty>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_isatty_r+0x1a>
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_isatty_r+0x1a>
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	20000ca8 	.word	0x20000ca8

080071d4 <_lseek_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4605      	mov	r5, r0
 80071d8:	4608      	mov	r0, r1
 80071da:	4611      	mov	r1, r2
 80071dc:	2200      	movs	r2, #0
 80071de:	4c05      	ldr	r4, [pc, #20]	; (80071f4 <_lseek_r+0x20>)
 80071e0:	6022      	str	r2, [r4, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f000 f842 	bl	800726c <_lseek>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d102      	bne.n	80071f2 <_lseek_r+0x1e>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	b103      	cbz	r3, 80071f2 <_lseek_r+0x1e>
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	20000ca8 	.word	0x20000ca8

080071f8 <memchr>:
 80071f8:	b510      	push	{r4, lr}
 80071fa:	b2c9      	uxtb	r1, r1
 80071fc:	4402      	add	r2, r0
 80071fe:	4290      	cmp	r0, r2
 8007200:	4603      	mov	r3, r0
 8007202:	d101      	bne.n	8007208 <memchr+0x10>
 8007204:	2000      	movs	r0, #0
 8007206:	bd10      	pop	{r4, pc}
 8007208:	781c      	ldrb	r4, [r3, #0]
 800720a:	3001      	adds	r0, #1
 800720c:	428c      	cmp	r4, r1
 800720e:	d1f6      	bne.n	80071fe <memchr+0x6>
 8007210:	4618      	mov	r0, r3
 8007212:	bd10      	pop	{r4, pc}

08007214 <__malloc_lock>:
 8007214:	4770      	bx	lr

08007216 <__malloc_unlock>:
 8007216:	4770      	bx	lr

08007218 <_read_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4605      	mov	r5, r0
 800721c:	4608      	mov	r0, r1
 800721e:	4611      	mov	r1, r2
 8007220:	2200      	movs	r2, #0
 8007222:	4c05      	ldr	r4, [pc, #20]	; (8007238 <_read_r+0x20>)
 8007224:	6022      	str	r2, [r4, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	f000 f828 	bl	800727c <_read>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_read_r+0x1e>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	b103      	cbz	r3, 8007236 <_read_r+0x1e>
 8007234:	602b      	str	r3, [r5, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	20000ca8 	.word	0x20000ca8

0800723c <_close>:
 800723c:	2258      	movs	r2, #88	; 0x58
 800723e:	4b02      	ldr	r3, [pc, #8]	; (8007248 <_close+0xc>)
 8007240:	f04f 30ff 	mov.w	r0, #4294967295
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	4770      	bx	lr
 8007248:	20000ca8 	.word	0x20000ca8

0800724c <_fstat>:
 800724c:	2258      	movs	r2, #88	; 0x58
 800724e:	4b02      	ldr	r3, [pc, #8]	; (8007258 <_fstat+0xc>)
 8007250:	f04f 30ff 	mov.w	r0, #4294967295
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	4770      	bx	lr
 8007258:	20000ca8 	.word	0x20000ca8

0800725c <_isatty>:
 800725c:	2258      	movs	r2, #88	; 0x58
 800725e:	4b02      	ldr	r3, [pc, #8]	; (8007268 <_isatty+0xc>)
 8007260:	2000      	movs	r0, #0
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20000ca8 	.word	0x20000ca8

0800726c <_lseek>:
 800726c:	2258      	movs	r2, #88	; 0x58
 800726e:	4b02      	ldr	r3, [pc, #8]	; (8007278 <_lseek+0xc>)
 8007270:	f04f 30ff 	mov.w	r0, #4294967295
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	4770      	bx	lr
 8007278:	20000ca8 	.word	0x20000ca8

0800727c <_read>:
 800727c:	2258      	movs	r2, #88	; 0x58
 800727e:	4b02      	ldr	r3, [pc, #8]	; (8007288 <_read+0xc>)
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	4770      	bx	lr
 8007288:	20000ca8 	.word	0x20000ca8

0800728c <_sbrk>:
 800728c:	4b04      	ldr	r3, [pc, #16]	; (80072a0 <_sbrk+0x14>)
 800728e:	4602      	mov	r2, r0
 8007290:	6819      	ldr	r1, [r3, #0]
 8007292:	b909      	cbnz	r1, 8007298 <_sbrk+0xc>
 8007294:	4903      	ldr	r1, [pc, #12]	; (80072a4 <_sbrk+0x18>)
 8007296:	6019      	str	r1, [r3, #0]
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	4402      	add	r2, r0
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	4770      	bx	lr
 80072a0:	20000348 	.word	0x20000348
 80072a4:	20000cac 	.word	0x20000cac

080072a8 <_init>:
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072aa:	bf00      	nop
 80072ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ae:	bc08      	pop	{r3}
 80072b0:	469e      	mov	lr, r3
 80072b2:	4770      	bx	lr

080072b4 <_fini>:
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	bf00      	nop
 80072b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ba:	bc08      	pop	{r3}
 80072bc:	469e      	mov	lr, r3
 80072be:	4770      	bx	lr
